{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","props","isPartiallyChecked","isDefaultChecked","position","isDisabled","className","children","React","useState","isChecked","setChecked","onChange","e","undefined","target","checked","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;AAoBO,MAAMA,QAA0D,GACrEC,KADwE,IAEjD;AAAA,QAErBC,kBAFqB,GAQnBD,KARmB,CAErBC,kBAFqB;AAAA,QAGrBC,gBAHqB,GAQnBF,KARmB,CAGrBE,gBAHqB;AAAA,QAIrBC,QAJqB,GAQnBH,KARmB,CAIrBG,QAJqB;AAAA,QAKrBC,UALqB,GAQnBJ,KARmB,CAKrBI,UALqB;AAAA,QAMrBC,SANqB,GAQnBL,KARmB,CAMrBK,SANqB;AAAA,QAOrBC,QAPqB,GAQnBN,KARmB,CAOrBM,QAPqB;;AAAA,0BASSC,KAAK,CAACC,QAAN,CAAwB,CAAC,CAACN,gBAA1B,CATT;AAAA;AAAA,QAShBO,SATgB;AAAA,QASLC,UATK;;AAWvB,QAAMC,QAAQ,GAAIC,CAAD,IAA4C;AAC3D,QAAI,CAACR,UAAL,EAAiB;AACf,UAAIJ,KAAK,CAACS,SAAN,KAAoBI,SAAxB,EAAmC;AACjC,YAAI,CAACZ,kBAAL,EAAyB;AACvBS,UAAAA,UAAU,CAACE,CAAC,CAACE,MAAF,CAASC,OAAV,CAAV;AACD;;AACD,YAAIf,KAAK,CAACW,QAAV,EAAoB;AAClBX,UAAAA,KAAK,CAACW,QAAN,CAAe,CAACF,SAAhB;AACD;AACF,OAPD,MAOO;AACL,YAAIT,KAAK,CAACW,QAAV,EAAoB;AAClBX,UAAAA,KAAK,CAACW,QAAN,CAAe,CAACX,KAAK,CAACS,SAAtB;AACD;AACF;AACF;AACF,GAfD;;AAiBA,SACE,oBAAC,6BAAD;AACE,IAAA,SAAS,EAAET,KAAK,CAACS,SAAN,IAAmBA,SADhC;AAEE,IAAA,UAAU,EAAEL,UAFd;AAGE,IAAA,SAAS,EAAEC,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,QAAQ,KAAK,OAAb,IACC,oBAAC,4BAAD;AAAoB,IAAA,UAAU,EAAEC,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,QADH,CANJ,EAWE,oBAAC,kCAAD;AAA0B,IAAA,UAAU,EAAEF,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,4BAAD;AACE,IAAA,UAAU,EAAEA,UADd;AAEE,IAAA,SAAS,EAAEJ,KAAK,CAACS,SAAN,IAAmBA,SAFhC;AAGE,IAAA,kBAAkB,EAAER,kBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,wBAAD;AACE,IAAA,QAAQ,EAAEU,QADZ;AAEE,IAAA,OAAO,EAAEX,KAAK,CAACS,SAAN,IAAmBA,SAF9B;AAGE,IAAA,QAAQ,EAAEL,UAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAUG,CAACJ,KAAK,CAACS,SAAN,IAAmBA,SAApB,KACC,oBAAC,4BAAD;AACE,IAAA,UAAU,EAAEL,UADd;AAEE,IAAA,SAAS,EAAEJ,KAAK,CAACS,SAAN,IAAmBA,SAFhC;AAGE,IAAA,kBAAkB,EAAER,kBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAXJ,CADF,CAXF,EAkCGE,QAAQ,KAAK,MAAb,IACC,oBAAC,4BAAD;AAAoB,IAAA,UAAU,EAAEC,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,QADH,CAnCJ,CADF;AA0CD,CAxEM;;;AA0EPP,QAAQ,CAACiB,YAAT,GAAwB;AACtBb,EAAAA,QAAQ,EAAE;AADY,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Check } from '../../Icons';\nimport { HorizontalPosition } from '../../types';\nimport {\n  HiddenCheckbox,\n  StyledCheckboxIcon,\n  StyledCheckboxInputShown,\n  StyledCheckboxLabel,\n  StyledCheckboxMark,\n  StyledCheckboxSpan\n} from './Checkbox.style';\n\nexport interface CheckboxProps {\n  isChecked?: boolean;\n  isDefaultChecked?: boolean;\n  isPartiallyChecked?: boolean;\n  isDisabled?: boolean;\n  onChange?: (isChecked: boolean) => void;\n  position?: HorizontalPosition;\n  /** custom className */\n  className?: string;\n}\n\nexport const Checkbox: React.FC<React.PropsWithChildren<CheckboxProps>> = (\n  props: React.PropsWithChildren<CheckboxProps>\n): React.ReactElement => {\n  const {\n    isPartiallyChecked,\n    isDefaultChecked,\n    position,\n    isDisabled,\n    className,\n    children\n  } = props;\n  const [isChecked, setChecked] = React.useState<boolean>(!!isDefaultChecked);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isDisabled) {\n      if (props.isChecked === undefined) {\n        if (!isPartiallyChecked) {\n          setChecked(e.target.checked);\n        }\n        if (props.onChange) {\n          props.onChange(!isChecked);\n        }\n      } else {\n        if (props.onChange) {\n          props.onChange(!props.isChecked);\n        }\n      }\n    }\n  };\n\n  return (\n    <StyledCheckboxLabel\n      isChecked={props.isChecked || isChecked}\n      isDisabled={isDisabled}\n      className={className}\n    >\n      {position === 'right' && (\n        <StyledCheckboxSpan isDisabled={isDisabled}>\n          {children}\n        </StyledCheckboxSpan>\n      )}\n\n      <StyledCheckboxInputShown isDisabled={isDisabled}>\n        <StyledCheckboxMark\n          isDisabled={isDisabled}\n          isChecked={props.isChecked || isChecked}\n          isPartiallyChecked={isPartiallyChecked}\n        >\n          <HiddenCheckbox\n            onChange={onChange}\n            checked={props.isChecked || isChecked}\n            disabled={isDisabled}\n          />\n          {(props.isChecked || isChecked) && (\n            <StyledCheckboxIcon\n              isDisabled={isDisabled}\n              isChecked={props.isChecked || isChecked}\n              isPartiallyChecked={isPartiallyChecked}\n            >\n              <Check />\n            </StyledCheckboxIcon>\n          )}\n        </StyledCheckboxMark>\n      </StyledCheckboxInputShown>\n\n      {position === 'left' && (\n        <StyledCheckboxSpan isDisabled={isDisabled}>\n          {children}\n        </StyledCheckboxSpan>\n      )}\n    </StyledCheckboxLabel>\n  );\n};\n\nCheckbox.defaultProps = {\n  position: 'left'\n};\n"]}