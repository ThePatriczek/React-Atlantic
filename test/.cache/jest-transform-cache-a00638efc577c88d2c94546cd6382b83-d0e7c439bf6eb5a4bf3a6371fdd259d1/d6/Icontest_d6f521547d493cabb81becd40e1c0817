defda9a7d815f4fe89bb34b6c244caa6
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Icon = require("./Icon");

var _defaultValues = require("../../constants/defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Icon/Icon.test.jsx";

const Component = (name, isRotating) => {
  return _react.default.createElement(Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 8
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (checkbox = Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children)) => {
  output = (0, _enzyme.mount)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {
      expect(output.props().isDefaultChecked).toEqual(checkbox.props.isDefaultChecked);
    });
    it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
      expect(output.props().isChecked).toEqual(checkbox.props.isChecked);
    });
    it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
      expect(output.props().isDisabled).toEqual(checkbox.props.isDisabled);
    });
    it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
      expect(output.props().isPartiallyChecked).toEqual(checkbox.props.isPartiallyChecked);
    });
    it(`Should have position: ${checkbox.props.position}`, () => {
      expect(output.props().position).toEqual(checkbox.props.position);
    });
    it(`Should have children: ${checkbox.props.children}`, () => {
      expect(output.props().children).toEqual(checkbox.props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkljb24udGVzdC5qc3giXSwibmFtZXMiOlsiQ29tcG9uZW50IiwibmFtZSIsImlzUm90YXRpbmciLCJpc0NoZWNrZWQiLCJpc1BhcnRpYWxseUNoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJvdXRwdXQiLCJ0ZXN0cyIsImNoZWNrYm94IiwiZGVmYXVsdFZhbHVlcyIsImRlc2NyaWJlIiwiaXQiLCJwcm9wcyIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQUNDLElBQUQsRUFBT0MsVUFBUCxLQUFzQjtBQUM3QyxTQUNFLDZCQUFDLFFBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBRUMsU0FEYjtBQUVFLElBQUEsa0JBQWtCLEVBQUVDLGtCQUZ0QjtBQUdFLElBQUEsZ0JBQWdCLEVBQUVDLGdCQUhwQjtBQUlFLElBQUEsVUFBVSxFQUFFQyxVQUpkO0FBS0UsSUFBQSxRQUFRLEVBQUVDLFFBTFo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FPR0MsUUFQSCxDQURGO0FBV0QsQ0FaTTs7O0FBY1AsSUFBSUMsTUFBSjs7QUFFTyxNQUFNQyxLQUFLLEdBQUcsQ0FDbkJDLFFBQVEsR0FBR1gsU0FBUyxDQUNsQlksNkJBQWNULFNBREksRUFFbEJTLDZCQUFjUCxnQkFGSSxFQUdsQk8sNkJBQWNOLFVBSEksRUFJbEJNLDZCQUFjUixrQkFKSSxFQUtsQlEsNkJBQWNMLFFBTEksRUFNbEJLLDZCQUFjSixRQU5JLENBREQsS0FTaEI7QUFDSEMsRUFBQUEsTUFBTSxHQUFHLG1CQUFNRSxRQUFOLENBQVQ7QUFFQSxTQUFPRSxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDaENDLElBQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlVixnQkFBaUIsRUFBbEUsRUFBcUUsTUFBTTtBQUMzRVcsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVYsZ0JBQWhCLENBQU4sQ0FBd0NZLE9BQXhDLENBQ0VOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlVixnQkFEakI7QUFHRCxLQUpDLENBQUY7QUFLQVMsSUFBQUEsRUFBRSxDQUFFLDBCQUF5QkgsUUFBUSxDQUFDSSxLQUFULENBQWVaLFNBQVUsRUFBcEQsRUFBdUQsTUFBTTtBQUM3RGEsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVosU0FBaEIsQ0FBTixDQUFpQ2MsT0FBakMsQ0FBeUNOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlWixTQUF4RDtBQUNELEtBRkMsQ0FBRjtBQUdBVyxJQUFBQSxFQUFFLENBQUUsMkJBQTBCSCxRQUFRLENBQUNJLEtBQVQsQ0FBZVQsVUFBVyxFQUF0RCxFQUF5RCxNQUFNO0FBQy9EVSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlVCxVQUFoQixDQUFOLENBQWtDVyxPQUFsQyxDQUEwQ04sUUFBUSxDQUFDSSxLQUFULENBQWVULFVBQXpEO0FBQ0QsS0FGQyxDQUFGO0FBR0FRLElBQUFBLEVBQUUsQ0FBRSxtQ0FBa0NILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlWCxrQkFBbUIsRUFBdEUsRUFBeUUsTUFBTTtBQUMvRVksTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVgsa0JBQWhCLENBQU4sQ0FBMENhLE9BQTFDLENBQ0VOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlWCxrQkFEakI7QUFHRCxLQUpDLENBQUY7QUFLQVUsSUFBQUEsRUFBRSxDQUFFLHlCQUF3QkgsUUFBUSxDQUFDSSxLQUFULENBQWVSLFFBQVMsRUFBbEQsRUFBcUQsTUFBTTtBQUMzRFMsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVIsUUFBaEIsQ0FBTixDQUFnQ1UsT0FBaEMsQ0FBd0NOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlUixRQUF2RDtBQUNELEtBRkMsQ0FBRjtBQUdBTyxJQUFBQSxFQUFFLENBQUUseUJBQXdCSCxRQUFRLENBQUNJLEtBQVQsQ0FBZVAsUUFBUyxFQUFsRCxFQUFxRCxNQUFNO0FBQzNEUSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlUCxRQUFoQixDQUFOLENBQWdDUyxPQUFoQyxDQUF3Q04sUUFBUSxDQUFDSSxLQUFULENBQWVQLFFBQXZEO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0F2QmMsQ0FBZjtBQXdCRCxDQXBDTTs7O0FBc0NQRSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuL0ljb24nO1xuaW1wb3J0IHsgZGVmYXVsdFZhbHVlcyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9kZWZhdWx0VmFsdWVzJztcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChuYW1lLCBpc1JvdGF0aW5nKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPENoZWNrYm94XG4gICAgICBpc0NoZWNrZWQ9e2lzQ2hlY2tlZH1cbiAgICAgIGlzUGFydGlhbGx5Q2hlY2tlZD17aXNQYXJ0aWFsbHlDaGVja2VkfVxuICAgICAgaXNEZWZhdWx0Q2hlY2tlZD17aXNEZWZhdWx0Q2hlY2tlZH1cbiAgICAgIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICBwb3NpdGlvbj17cG9zaXRpb259XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ2hlY2tib3g+XG4gICk7XG59O1xuXG5sZXQgb3V0cHV0O1xuXG5leHBvcnQgY29uc3QgdGVzdHMgPSAoXG4gIGNoZWNrYm94ID0gQ29tcG9uZW50KFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNDaGVja2VkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNEZWZhdWx0Q2hlY2tlZCxcbiAgICBkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5wb3NpdGlvbixcbiAgICBkZWZhdWx0VmFsdWVzLmNoaWxkcmVuXG4gIClcbikgPT4ge1xuICBvdXRwdXQgPSBtb3VudChjaGVja2JveCk7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0RlZmF1bHRDaGVja2VkKS50b0VxdWFsKFxuICAgICAgICBjaGVja2JveC5wcm9wcy5pc0RlZmF1bHRDaGVja2VkXG4gICAgICApO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0NoZWNrZWQ6ICR7Y2hlY2tib3gucHJvcHMuaXNDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0NoZWNrZWQpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuaXNDaGVja2VkKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtjaGVja2JveC5wcm9wcy5pc0Rpc2FibGVkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0Rpc2FibGVkKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLmlzRGlzYWJsZWQpO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc1BhcnRpYWxseUNoZWNrZWQ6ICR7Y2hlY2tib3gucHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc1BhcnRpYWxseUNoZWNrZWQpLnRvRXF1YWwoXG4gICAgICAgIGNoZWNrYm94LnByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7Y2hlY2tib3gucHJvcHMucG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLnBvc2l0aW9uKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLnBvc2l0aW9uKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgY2hpbGRyZW46ICR7Y2hlY2tib3gucHJvcHMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmNoaWxkcmVuKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLmNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19