b4954f334122128e0555eaf4b7f9afc3
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = isChecked => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6
    },
    __self: void 0
  });
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component, {
  isChecked,
  isDefaultChecked,
  isDisabled,
  isPartiallyChecked,
  position,
  children
}) => {
  output = (0, _enzyme.shallow)(checkbox());
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(isChecked);
    });
    it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);
    });
    it(`Should have isDisabled: ${isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(isDisabled);
    });
    it(`Should have isPartiallyChecked: ${isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(isPartiallyChecked);
    });
    it(`Should have position: ${position}`, () => {
      expect(output.prop('position')).toEqual(position);
    });
    it(`Should have children: ${children}`, () => {
      expect(output.prop('children')).toEqual(children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsIm91dHB1dCIsInRlc3RzIiwiY2hlY2tib3giLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzUGFydGlhbGx5Q2hlY2tlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwicHJvcCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHQyxTQUFTLElBQUk7QUFDcEMsU0FBTyw2QkFBQyxrQkFBRDtBQUFVLElBQUEsU0FBUyxFQUFFQSxTQUFyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFQO0FBQ0QsQ0FGTTs7O0FBSVAsSUFBSUMsTUFBTSxHQUFHLHFCQUFRRixTQUFTLEVBQWpCLENBQWI7O0FBRU8sTUFBTUcsS0FBSyxHQUFHLENBQ25CQyxRQUFRLEdBQUdKLFNBRFEsRUFFbkI7QUFDRUMsRUFBQUEsU0FERjtBQUVFSSxFQUFBQSxnQkFGRjtBQUdFQyxFQUFBQSxVQUhGO0FBSUVDLEVBQUFBLGtCQUpGO0FBS0VDLEVBQUFBLFFBTEY7QUFNRUMsRUFBQUE7QUFORixDQUZtQixLQVVoQjtBQUNIUCxFQUFBQSxNQUFNLEdBQUcscUJBQVFFLFFBQVEsRUFBaEIsQ0FBVDtBQUVBLFNBQU9NLFFBQVEsQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUNoQ0MsSUFBQUEsRUFBRSxDQUFFLDBCQUF5QlYsU0FBVSxFQUFyQyxFQUF3QyxNQUFNO0FBQzlDVyxNQUFBQSxNQUFNLENBQUNWLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLFdBQVosQ0FBRCxDQUFOLENBQWlDQyxPQUFqQyxDQUF5Q2IsU0FBekM7QUFDRCxLQUZDLENBQUY7QUFJQVUsSUFBQUEsRUFBRSxDQUFFLGlDQUFnQ04sZ0JBQWlCLEVBQW5ELEVBQXNELE1BQU07QUFDNURPLE1BQUFBLE1BQU0sQ0FBQ1YsTUFBTSxDQUFDVyxJQUFQLENBQVksa0JBQVosQ0FBRCxDQUFOLENBQXdDQyxPQUF4QyxDQUFnRFQsZ0JBQWhEO0FBQ0QsS0FGQyxDQUFGO0FBSUFNLElBQUFBLEVBQUUsQ0FBRSwyQkFBMEJMLFVBQVcsRUFBdkMsRUFBMEMsTUFBTTtBQUNoRE0sTUFBQUEsTUFBTSxDQUFDVixNQUFNLENBQUNXLElBQVAsQ0FBWSxZQUFaLENBQUQsQ0FBTixDQUFrQ0MsT0FBbEMsQ0FBMENSLFVBQTFDO0FBQ0QsS0FGQyxDQUFGO0FBSUFLLElBQUFBLEVBQUUsQ0FBRSxtQ0FBa0NKLGtCQUFtQixFQUF2RCxFQUEwRCxNQUFNO0FBQ2hFSyxNQUFBQSxNQUFNLENBQUNWLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLG9CQUFaLENBQUQsQ0FBTixDQUEwQ0MsT0FBMUMsQ0FBa0RQLGtCQUFsRDtBQUNELEtBRkMsQ0FBRjtBQUlBSSxJQUFBQSxFQUFFLENBQUUseUJBQXdCSCxRQUFTLEVBQW5DLEVBQXNDLE1BQU07QUFDNUNJLE1BQUFBLE1BQU0sQ0FBQ1YsTUFBTSxDQUFDVyxJQUFQLENBQVksVUFBWixDQUFELENBQU4sQ0FBZ0NDLE9BQWhDLENBQXdDTixRQUF4QztBQUNELEtBRkMsQ0FBRjtBQUlBRyxJQUFBQSxFQUFFLENBQUUseUJBQXdCRixRQUFTLEVBQW5DLEVBQXNDLE1BQU07QUFDNUNHLE1BQUFBLE1BQU0sQ0FBQ1YsTUFBTSxDQUFDVyxJQUFQLENBQVksVUFBWixDQUFELENBQU4sQ0FBZ0NDLE9BQWhDLENBQXdDTCxRQUF4QztBQUNELEtBRkMsQ0FBRjtBQUdELEdBeEJjLENBQWY7QUF5QkQsQ0F0Q007OztBQXdDUE4sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnLi9DaGVja2JveCc7XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnQgPSBpc0NoZWNrZWQgPT4ge1xuICByZXR1cm4gPENoZWNrYm94IGlzQ2hlY2tlZD17aXNDaGVja2VkfSAvPjtcbn07XG5cbmxldCBvdXRwdXQgPSBzaGFsbG93KENvbXBvbmVudCgpKTtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBjaGVja2JveCA9IENvbXBvbmVudCxcbiAge1xuICAgIGlzQ2hlY2tlZCxcbiAgICBpc0RlZmF1bHRDaGVja2VkLFxuICAgIGlzRGlzYWJsZWQsXG4gICAgaXNQYXJ0aWFsbHlDaGVja2VkLFxuICAgIHBvc2l0aW9uLFxuICAgIGNoaWxkcmVuXG4gIH1cbikgPT4ge1xuICBvdXRwdXQgPSBzaGFsbG93KGNoZWNrYm94KCkpO1xuXG4gIHJldHVybiBkZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtpc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0NoZWNrZWQnKSkudG9FcXVhbChpc0NoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRGVmYXVsdENoZWNrZWQ6ICR7aXNEZWZhdWx0Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGVmYXVsdENoZWNrZWQnKSkudG9FcXVhbChpc0RlZmF1bHRDaGVja2VkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2lzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoaXNEaXNhYmxlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNQYXJ0aWFsbHlDaGVja2VkOiAke2lzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKGlzUGFydGlhbGx5Q2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7cG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdwb3NpdGlvbicpKS50b0VxdWFsKHBvc2l0aW9uKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtjaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=