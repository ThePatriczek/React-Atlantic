{"version":3,"sources":["Icon.test.jsx"],"names":["Component","wrapper","icon","name","prop","toEqual","isRotating","output","tests","button","defaultValues","isDisabled","isFullWidth","isRound","size","type","children","props","mockClick","jest","fn","setProps","onClick","simulate","toHaveBeenCalled","not","text"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEO,MAAMA,SAAS,GAAG,MAAM;AAC7B,SAAO,4CAAS,MAAT,EAAiB,MAAM;AAC5B,UAAMC,OAAO,GAAG,mBAAMC,IAAN,CAAhB;AAEA,0CAAI,qBAAoBC,IAAK,EAA7B,EAAgC,MAC9B,qBAAOF,OAAO,CAACG,IAAR,CAAa,MAAb,CAAP,EAA6BC,OAA7B,CAAqCF,IAArC,CADF;AAGA,0CAAI,2BAA0BG,UAAW,EAAzC,EAA4C,MAC1C,qBAAOL,OAAO,CAACG,IAAR,CAAa,YAAb,CAAP,EAAmCC,OAAnC,CAA2CC,UAA3C,CADF;AAED,GARM,CAAP;AASD,CAVM;;;AAYP,IAAIC,MAAJ;;AAEO,MAAMC,KAAK,GAAG,CACnBC,MAAM,GAAGT,SAAS,CAChBU,6BAAcC,UADE,EAEhBD,6BAAcE,WAFE,EAGhBF,6BAAcG,OAHE,EAIhBH,6BAAcI,IAJE,EAKhBJ,6BAAcK,IALE,EAMhBL,6BAAcM,QANE,CADC,KAShB;AACHT,EAAAA,MAAM,GAAG,mBAAME,MAAN,CAAT;AAEA,SAAO,4CAAS,QAAT,EAAmB,MAAM;AAC9B,0CAAI,2BAA0BA,MAAM,CAACQ,KAAP,CAAaN,UAAW,EAAtD,EAAyD,MAAM;AAC7D,2BAAOJ,MAAM,CAACU,KAAP,GAAeN,UAAtB,EAAkCN,OAAlC,CAA0CI,MAAM,CAACQ,KAAP,CAAaN,UAAvD;AACD,KAFD;AAGA,0CAAI,4BAA2BF,MAAM,CAACQ,KAAP,CAAaL,WAAY,EAAxD,EAA2D,MAAM;AAC/D,2BAAOL,MAAM,CAACU,KAAP,GAAeL,WAAtB,EAAmCP,OAAnC,CAA2CI,MAAM,CAACQ,KAAP,CAAaL,WAAxD;AACD,KAFD;AAGA,0CAAI,wBAAuBH,MAAM,CAACQ,KAAP,CAAaJ,OAAQ,EAAhD,EAAmD,MAAM;AACvD,2BAAON,MAAM,CAACU,KAAP,GAAeJ,OAAtB,EAA+BR,OAA/B,CAAuCI,MAAM,CAACQ,KAAP,CAAaJ,OAApD;AACD,KAFD;AAGA,0CAAI,qBAAoBJ,MAAM,CAACQ,KAAP,CAAaH,IAAK,EAA1C,EAA6C,MAAM;AACjD,2BAAOP,MAAM,CAACU,KAAP,GAAeH,IAAtB,EAA4BT,OAA5B,CAAoCI,MAAM,CAACQ,KAAP,CAAaH,IAAjD;AACD,KAFD;AAGA,0CAAI,qBAAoBL,MAAM,CAACQ,KAAP,CAAaF,IAAK,EAA1C,EAA6C,MAAM;AACjD,2BAAOR,MAAM,CAACU,KAAP,GAAeF,IAAtB,EAA4BV,OAA5B,CAAoCI,MAAM,CAACQ,KAAP,CAAaF,IAAjD;AACD,KAFD;AAGA,0CAAI,2DAAJ,EAAgE,MAAM;AACpE,YAAMG,SAAS,GAAGC,IAAI,CAACC,EAAL,EAAlB;AAEAb,MAAAA,MAAM,CAACc,QAAP,CAAgB;AACdC,QAAAA,OAAO,EAAEJ;AADK,OAAhB;AAIAX,MAAAA,MAAM,CAACgB,QAAP,CAAgB,OAAhB;;AAEA,UAAI,CAACd,MAAM,CAACQ,KAAP,CAAaN,UAAlB,EAA8B;AAC5B,6BAAOO,SAAP,EAAkBM,gBAAlB;AACD,OAFD,MAEO;AACL,6BAAON,SAAP,EAAkBO,GAAlB,CAAsBD,gBAAtB;AACD;AACF,KAdD;AAeA,0CAAI,yBAAwBf,MAAM,CAACQ,KAAP,CAAaD,QAAS,EAAlD,EAAqD,MAAM;AACzD,2BAAOT,MAAM,CAACmB,IAAP,EAAP,EAAsBrB,OAAtB,CAA8BI,MAAM,CAACQ,KAAP,CAAaD,QAA3C;AACD,KAFD;AAGD,GAlCM,CAAP;AAmCD,CA/CM;;;AAiDPR,KAAK","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { Icon } from './Icon';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { describe, it } from 'storybook-addon-specifications';\nimport expect from 'expect';\n\nexport const Component = () => {\n  return describe('Icon', () => {\n    const wrapper = mount(icon);\n\n    it(`Should have name: ${name}`, () =>\n      expect(wrapper.prop('name')).toEqual(name));\n\n    it(`Should have isRotating: ${isRotating}`, () =>\n      expect(wrapper.prop('isRotating')).toEqual(isRotating));\n  });\n};\n\nlet output;\n\nexport const tests = (\n  button = Component(\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.children\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {\n      expect(output.props().isDisabled).toEqual(button.props.isDisabled);\n    });\n    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {\n      expect(output.props().isFullWidth).toEqual(button.props.isFullWidth);\n    });\n    it(`Should have isRound: ${button.props.isRound}`, () => {\n      expect(output.props().isRound).toEqual(button.props.isRound);\n    });\n    it(`Should have size: ${button.props.size}`, () => {\n      expect(output.props().size).toEqual(button.props.size);\n    });\n    it(`Should have type: ${button.props.type}`, () => {\n      expect(output.props().type).toEqual(button.props.type);\n    });\n    it(`onClick should have been called if Button is not disabled`, () => {\n      const mockClick = jest.fn();\n\n      output.setProps({\n        onClick: mockClick\n      });\n\n      output.simulate('click');\n\n      if (!button.props.isDisabled) {\n        expect(mockClick).toHaveBeenCalled();\n      } else {\n        expect(mockClick).not.toHaveBeenCalled();\n      }\n    });\n    it(`Should have children: ${button.props.children}`, () => {\n      expect(output.text()).toEqual(button.props.children);\n    });\n  });\n};\n\ntests();\n"]}