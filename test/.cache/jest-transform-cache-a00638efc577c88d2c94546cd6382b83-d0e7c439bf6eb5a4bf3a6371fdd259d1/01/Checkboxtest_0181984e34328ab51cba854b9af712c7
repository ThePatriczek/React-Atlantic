f9bf49d5ccf0cb99f94439d0ac51bce9
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = exports.defaultValues = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";
const defaultValues = {
  isChecked: false,
  isDefaultChecked: false,
  isDisabled: false,
  isPartiallyChecked: false,
  position: 'left',
  children: 'Change me, please ðŸ¥º'
};
exports.defaultValues = defaultValues;

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component(), props = {
  isChecked: defaultValues.isChecked,
  isDefaultChecked: defaultValues.isDefaultChecked,
  isDisabled: defaultValues.isDisabled,
  isPartiallyChecked: defaultValues.isPartiallyChecked,
  position: defaultValues.position,
  children: defaultValues.children
}) => {
  output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${props.isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(props.isChecked);
    });
    it(`Should have isDefaultChecked: ${props.isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(props.isDefaultChecked);
    });
    it(`Should have isDisabled: ${props.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(props.isDisabled);
    });
    it(`Should have isPartiallyChecked: ${props.isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(props.isPartiallyChecked);
    });
    it(`Should have position: ${props.position}`, () => {
      expect(output.prop('position')).toEqual(props.position);
    });
    it(`Should have children: ${props.children}`, () => {
      expect(output.prop('children')).toEqual(props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbImRlZmF1bHRWYWx1ZXMiLCJpc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzUGFydGlhbGx5Q2hlY2tlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJvdXRwdXQiLCJ0ZXN0cyIsImNoZWNrYm94IiwicHJvcHMiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwicHJvcCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7QUFFTyxNQUFNQSxhQUFhLEdBQUc7QUFDM0JDLEVBQUFBLFNBQVMsRUFBRSxLQURnQjtBQUUzQkMsRUFBQUEsZ0JBQWdCLEVBQUUsS0FGUztBQUczQkMsRUFBQUEsVUFBVSxFQUFFLEtBSGU7QUFJM0JDLEVBQUFBLGtCQUFrQixFQUFFLEtBSk87QUFLM0JDLEVBQUFBLFFBQVEsRUFBRSxNQUxpQjtBQU0zQkMsRUFBQUEsUUFBUSxFQUFFO0FBTmlCLENBQXRCOzs7QUFTQSxNQUFNQyxTQUFTLEdBQUcsQ0FDdkJOLFNBRHVCLEVBRXZCQyxnQkFGdUIsRUFHdkJDLFVBSHVCLEVBSXZCQyxrQkFKdUIsRUFLdkJDLFFBTHVCLEVBTXZCQyxRQU51QixLQU9wQjtBQUNILFNBQ0UsNkJBQUMsa0JBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBRUwsU0FEYjtBQUVFLElBQUEsa0JBQWtCLEVBQUVHLGtCQUZ0QjtBQUdFLElBQUEsZ0JBQWdCLEVBQUVGLGdCQUhwQjtBQUlFLElBQUEsVUFBVSxFQUFFQyxVQUpkO0FBS0UsSUFBQSxRQUFRLEVBQUVFLFFBTFo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FPR0MsUUFQSCxDQURGO0FBV0QsQ0FuQk07OztBQXFCUCxJQUFJRSxNQUFNLEdBQUcscUJBQVFELFNBQVMsRUFBakIsQ0FBYjs7QUFFTyxNQUFNRSxLQUFLLEdBQUcsQ0FDbkJDLFFBQVEsR0FBR0gsU0FBUyxFQURELEVBRW5CSSxLQUFLLEdBQUc7QUFDTlYsRUFBQUEsU0FBUyxFQUFFRCxhQUFhLENBQUNDLFNBRG5CO0FBRU5DLEVBQUFBLGdCQUFnQixFQUFFRixhQUFhLENBQUNFLGdCQUYxQjtBQUdOQyxFQUFBQSxVQUFVLEVBQUVILGFBQWEsQ0FBQ0csVUFIcEI7QUFJTkMsRUFBQUEsa0JBQWtCLEVBQUVKLGFBQWEsQ0FBQ0ksa0JBSjVCO0FBS05DLEVBQUFBLFFBQVEsRUFBRUwsYUFBYSxDQUFDSyxRQUxsQjtBQU1OQyxFQUFBQSxRQUFRLEVBQUVOLGFBQWEsQ0FBQ007QUFObEIsQ0FGVyxLQVVoQjtBQUNIRSxFQUFBQSxNQUFNLEdBQUcscUJBQVFFLFFBQVIsQ0FBVDtBQUVBLFNBQU9FLFFBQVEsQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUNoQ0MsSUFBQUEsRUFBRSxDQUFFLDBCQUF5QkYsS0FBSyxDQUFDVixTQUFVLEVBQTNDLEVBQThDLE1BQU07QUFDcERhLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksV0FBWixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDTCxLQUFLLENBQUNWLFNBQS9DO0FBQ0QsS0FGQyxDQUFGO0FBSUFZLElBQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NGLEtBQUssQ0FBQ1QsZ0JBQWlCLEVBQXpELEVBQTRELE1BQU07QUFDbEVZLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksa0JBQVosQ0FBRCxDQUFOLENBQXdDQyxPQUF4QyxDQUFnREwsS0FBSyxDQUFDVCxnQkFBdEQ7QUFDRCxLQUZDLENBQUY7QUFJQVcsSUFBQUEsRUFBRSxDQUFFLDJCQUEwQkYsS0FBSyxDQUFDUixVQUFXLEVBQTdDLEVBQWdELE1BQU07QUFDdERXLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksWUFBWixDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDTCxLQUFLLENBQUNSLFVBQWhEO0FBQ0QsS0FGQyxDQUFGO0FBSUFVLElBQUFBLEVBQUUsQ0FBRSxtQ0FBa0NGLEtBQUssQ0FBQ1Asa0JBQW1CLEVBQTdELEVBQWdFLE1BQU07QUFDdEVVLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksb0JBQVosQ0FBRCxDQUFOLENBQTBDQyxPQUExQyxDQUNFTCxLQUFLLENBQUNQLGtCQURSO0FBR0QsS0FKQyxDQUFGO0FBTUFTLElBQUFBLEVBQUUsQ0FBRSx5QkFBd0JGLEtBQUssQ0FBQ04sUUFBUyxFQUF6QyxFQUE0QyxNQUFNO0FBQ2xEUyxNQUFBQSxNQUFNLENBQUNOLE1BQU0sQ0FBQ08sSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDQyxPQUFoQyxDQUF3Q0wsS0FBSyxDQUFDTixRQUE5QztBQUNELEtBRkMsQ0FBRjtBQUlBUSxJQUFBQSxFQUFFLENBQUUseUJBQXdCRixLQUFLLENBQUNMLFFBQVMsRUFBekMsRUFBNEMsTUFBTTtBQUNsRFEsTUFBQUEsTUFBTSxDQUFDTixNQUFNLENBQUNPLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0NMLEtBQUssQ0FBQ0wsUUFBOUM7QUFDRCxLQUZDLENBQUY7QUFHRCxHQTFCYyxDQUFmO0FBMkJELENBeENNOzs7QUEwQ1BHLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFZhbHVlcyA9IHtcbiAgaXNDaGVja2VkOiBmYWxzZSxcbiAgaXNEZWZhdWx0Q2hlY2tlZDogZmFsc2UsXG4gIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICBpc1BhcnRpYWxseUNoZWNrZWQ6IGZhbHNlLFxuICBwb3NpdGlvbjogJ2xlZnQnLFxuICBjaGlsZHJlbjogJ0NoYW5nZSBtZSwgcGxlYXNlIPCfpbonXG59O1xuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2hlY2tib3hcbiAgICAgIGlzQ2hlY2tlZD17aXNDaGVja2VkfVxuICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbn07XG5cbmxldCBvdXRwdXQgPSBzaGFsbG93KENvbXBvbmVudCgpKTtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBjaGVja2JveCA9IENvbXBvbmVudCgpLFxuICBwcm9wcyA9IHtcbiAgICBpc0NoZWNrZWQ6IGRlZmF1bHRWYWx1ZXMuaXNDaGVja2VkLFxuICAgIGlzRGVmYXVsdENoZWNrZWQ6IGRlZmF1bHRWYWx1ZXMuaXNEZWZhdWx0Q2hlY2tlZCxcbiAgICBpc0Rpc2FibGVkOiBkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWQsXG4gICAgaXNQYXJ0aWFsbHlDaGVja2VkOiBkZWZhdWx0VmFsdWVzLmlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgICBwb3NpdGlvbjogZGVmYXVsdFZhbHVlcy5wb3NpdGlvbixcbiAgICBjaGlsZHJlbjogZGVmYXVsdFZhbHVlcy5jaGlsZHJlblxuICB9XG4pID0+IHtcbiAgb3V0cHV0ID0gc2hhbGxvdyhjaGVja2JveCk7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNDaGVja2VkOiAke3Byb3BzLmlzQ2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKHByb3BzLmlzQ2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtwcm9wcy5pc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEZWZhdWx0Q2hlY2tlZCcpKS50b0VxdWFsKHByb3BzLmlzRGVmYXVsdENoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRGlzYWJsZWQ6ICR7cHJvcHMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChwcm9wcy5pc0Rpc2FibGVkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc1BhcnRpYWxseUNoZWNrZWQ6ICR7cHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoXG4gICAgICAgIHByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBwb3NpdGlvbjogJHtwcm9wcy5wb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwocHJvcHMucG9zaXRpb24pO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGNoaWxkcmVuOiAke3Byb3BzLmNoaWxkcmVufWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnY2hpbGRyZW4nKSkudG9FcXVhbChwcm9wcy5jaGlsZHJlbik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudGVzdHMoKTtcbiJdfQ==