62897a840add57756fdcaa4a0d571c98
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = exports.defaultValues = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";
const defaultValues = {
  isChecked: false,
  isDefaultChecked: false,
  isDisabled: false,
  isPartiallyChecked: false,
  position: 'left',
  children: 'Change me, please ðŸ¥º'
};
exports.defaultValues = defaultValues;

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component(), isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', isDefaultChecked => {
    it(`Should have isChecked: ${isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(isChecked);
    });
    it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);
    });
    it(`Should have isDisabled: ${isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(isDisabled);
    });
    it(`Should have isPartiallyChecked: ${isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(isPartiallyChecked);
    });
    it(`Should have position: ${position}`, () => {
      expect(output.prop('position')).toEqual(position);
    });
    it(`Should have children: ${children}`, () => {
      expect(output.prop('children')).toEqual(children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbImRlZmF1bHRWYWx1ZXMiLCJpc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzUGFydGlhbGx5Q2hlY2tlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJvdXRwdXQiLCJ0ZXN0cyIsImNoZWNrYm94IiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInByb3AiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7O0FBRU8sTUFBTUEsYUFBYSxHQUFHO0FBQzNCQyxFQUFBQSxTQUFTLEVBQUUsS0FEZ0I7QUFFM0JDLEVBQUFBLGdCQUFnQixFQUFFLEtBRlM7QUFHM0JDLEVBQUFBLFVBQVUsRUFBRSxLQUhlO0FBSTNCQyxFQUFBQSxrQkFBa0IsRUFBRSxLQUpPO0FBSzNCQyxFQUFBQSxRQUFRLEVBQUUsTUFMaUI7QUFNM0JDLEVBQUFBLFFBQVEsRUFBRTtBQU5pQixDQUF0Qjs7O0FBU0EsTUFBTUMsU0FBUyxHQUFHLENBQ3ZCTixTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVMLFNBRGI7QUFFRSxJQUFBLGtCQUFrQixFQUFFRyxrQkFGdEI7QUFHRSxJQUFBLGdCQUFnQixFQUFFRixnQkFIcEI7QUFJRSxJQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT0dDLFFBUEgsQ0FERjtBQVdELENBbkJNOzs7QUFxQlAsSUFBSUUsTUFBTSxHQUFHLHFCQUFRRCxTQUFTLEVBQWpCLENBQWI7O0FBRU8sTUFBTUUsS0FBSyxHQUFHLENBQ25CQyxRQUFRLEdBQUdILFNBQVMsRUFERCxFQUVuQk4sU0FGbUIsRUFHbkJDLGdCQUhtQixFQUluQkMsVUFKbUIsRUFLbkJDLGtCQUxtQixFQU1uQkMsUUFObUIsRUFPbkJDLFFBUG1CLEtBUWhCO0FBQ0hFLEVBQUFBLE1BQU0sR0FBRyxxQkFBUUUsUUFBUixDQUFUO0FBRUEsU0FBT0MsUUFBUSxDQUFDLFVBQUQsRUFBYVQsZ0JBQWdCLElBQUk7QUFDOUNVLElBQUFBLEVBQUUsQ0FBRSwwQkFBeUJYLFNBQVUsRUFBckMsRUFBd0MsTUFBTTtBQUM5Q1ksTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxXQUFaLENBQUQsQ0FBTixDQUFpQ0MsT0FBakMsQ0FBeUNkLFNBQXpDO0FBQ0QsS0FGQyxDQUFGO0FBSUFXLElBQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NWLGdCQUFpQixFQUFuRCxFQUFzRCxNQUFNO0FBQzVEVyxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLGtCQUFaLENBQUQsQ0FBTixDQUF3Q0MsT0FBeEMsQ0FBZ0RiLGdCQUFoRDtBQUNELEtBRkMsQ0FBRjtBQUlBVSxJQUFBQSxFQUFFLENBQUUsMkJBQTBCVCxVQUFXLEVBQXZDLEVBQTBDLE1BQU07QUFDaERVLE1BQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDTSxJQUFQLENBQVksWUFBWixDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDWixVQUExQztBQUNELEtBRkMsQ0FBRjtBQUlBUyxJQUFBQSxFQUFFLENBQUUsbUNBQWtDUixrQkFBbUIsRUFBdkQsRUFBMEQsTUFBTTtBQUNoRVMsTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxvQkFBWixDQUFELENBQU4sQ0FBMENDLE9BQTFDLENBQWtEWCxrQkFBbEQ7QUFDRCxLQUZDLENBQUY7QUFJQVEsSUFBQUEsRUFBRSxDQUFFLHlCQUF3QlAsUUFBUyxFQUFuQyxFQUFzQyxNQUFNO0FBQzVDUSxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDQyxPQUFoQyxDQUF3Q1YsUUFBeEM7QUFDRCxLQUZDLENBQUY7QUFJQU8sSUFBQUEsRUFBRSxDQUFFLHlCQUF3Qk4sUUFBUyxFQUFuQyxFQUFzQyxNQUFNO0FBQzVDTyxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDQyxPQUFoQyxDQUF3Q1QsUUFBeEM7QUFDRCxLQUZDLENBQUY7QUFHRCxHQXhCYyxDQUFmO0FBeUJELENBcENNOzs7QUFzQ1BHLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFZhbHVlcyA9IHtcbiAgaXNDaGVja2VkOiBmYWxzZSxcbiAgaXNEZWZhdWx0Q2hlY2tlZDogZmFsc2UsXG4gIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICBpc1BhcnRpYWxseUNoZWNrZWQ6IGZhbHNlLFxuICBwb3NpdGlvbjogJ2xlZnQnLFxuICBjaGlsZHJlbjogJ0NoYW5nZSBtZSwgcGxlYXNlIPCfpbonXG59O1xuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2hlY2tib3hcbiAgICAgIGlzQ2hlY2tlZD17aXNDaGVja2VkfVxuICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbn07XG5cbmxldCBvdXRwdXQgPSBzaGFsbG93KENvbXBvbmVudCgpKTtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBjaGVja2JveCA9IENvbXBvbmVudCgpLFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgb3V0cHV0ID0gc2hhbGxvdyhjaGVja2JveCk7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsIGlzRGVmYXVsdENoZWNrZWQgPT4ge1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0NoZWNrZWQ6ICR7aXNDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNDaGVja2VkJykpLnRvRXF1YWwoaXNDaGVja2VkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2lzRGVmYXVsdENoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0RlZmF1bHRDaGVja2VkJykpLnRvRXF1YWwoaXNEZWZhdWx0Q2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtpc0Rpc2FibGVkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEaXNhYmxlZCcpKS50b0VxdWFsKGlzRGlzYWJsZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtpc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc1BhcnRpYWxseUNoZWNrZWQnKSkudG9FcXVhbChpc1BhcnRpYWxseUNoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIHBvc2l0aW9uOiAke3Bvc2l0aW9ufWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgncG9zaXRpb24nKSkudG9FcXVhbChwb3NpdGlvbik7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgY2hpbGRyZW46ICR7Y2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdjaGlsZHJlbicpKS50b0VxdWFsKGNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19