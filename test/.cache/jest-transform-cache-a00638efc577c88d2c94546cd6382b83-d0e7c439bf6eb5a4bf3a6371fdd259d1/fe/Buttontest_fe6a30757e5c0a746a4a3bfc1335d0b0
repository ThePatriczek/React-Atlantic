6c43ae24c19c7da0908b4c22c9b8de6a
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _defaultValues = require("../../constants/defaultValues");

var _Button = require("./Button");

var _storybookAddonSpecifications = require("storybook-addon-specifications");

var _expect = _interopRequireDefault(require("expect"));

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Button/Button.test.jsx";
const mockClick = jest.fn();

const Component = (isChecked, isDefaultChecked, isDisabled, isFullWidth, isRound, size, type, value) => {
  return _react.default.createElement(_Button.Button, {
    isDisabled: isDisabled,
    isFullWidth: isFullWidth,
    isRound: isRound,
    size: size,
    type: type,
    onClick: mockClick,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20
    },
    __self: void 0
  }, value);
};

exports.Component = Component;
let output;

const tests = (button = Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isFullWidth, _defaultValues.defaultValues.isRound, _defaultValues.defaultValues.size, _defaultValues.defaultValues.type, _defaultValues.defaultValues.value)) => {
  output = (0, _enzyme.mount)(button);
  return (0, _storybookAddonSpecifications.describe)('Button', () => {
    (0, _storybookAddonSpecifications.it)(`Should have the right text: ${value}`, () => (0, _expect.default)(output.text()).toEqual(value));
    (0, _storybookAddonSpecifications.it)(`onClick should have been called if Button is not disabled`, () => {
      const mockClick = jest.fn();
      output.setProps({
        onClick: mockClick
      });
      output.simulate('click');

      if (!isDisabled) {
        (0, _expect.default)(mockClick).toHaveBeenCalled();
      } else {
        (0, _expect.default)(mockClick).not.toHaveBeenCalled();
      }
    });
    (0, _storybookAddonSpecifications.it)(`Should have isDisabled: ${isDisabled}`, () => {
      (0, _expect.default)(output.prop('isDisabled')).toEqual(isDisabled);
    });
    (0, _storybookAddonSpecifications.it)(`Should have isRound: ${isRound}`, () => {
      (0, _expect.default)(output.prop('isRound')).toEqual(isRound);
    });
    (0, _storybookAddonSpecifications.it)(`Should have isFullWidth: ${isFullWidth}`, () => {
      (0, _expect.default)(output.prop('isFullWidth')).toEqual(isFullWidth);
    });
    (0, _storybookAddonSpecifications.it)(`Should have type: ${type}`, () => {
      (0, _expect.default)(output.prop('type')).toEqual(type);
    });
    (0, _storybookAddonSpecifications.it)(`Should have size: ${size}`, () => {
      (0, _expect.default)(output.prop('size')).toEqual(size);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LmpzeCJdLCJuYW1lcyI6WyJtb2NrQ2xpY2siLCJqZXN0IiwiZm4iLCJDb21wb25lbnQiLCJpc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzRnVsbFdpZHRoIiwiaXNSb3VuZCIsInNpemUiLCJ0eXBlIiwidmFsdWUiLCJvdXRwdXQiLCJ0ZXN0cyIsImJ1dHRvbiIsImRlZmF1bHRWYWx1ZXMiLCJ0ZXh0IiwidG9FcXVhbCIsInNldFByb3BzIiwib25DbGljayIsInNpbXVsYXRlIiwidG9IYXZlQmVlbkNhbGxlZCIsIm5vdCIsInByb3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7QUFFQSxNQUFNQSxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFsQjs7QUFDTyxNQUFNQyxTQUFTLEdBQUcsQ0FDdkJDLFNBRHVCLEVBRXZCQyxnQkFGdUIsRUFHdkJDLFVBSHVCLEVBSXZCQyxXQUp1QixFQUt2QkMsT0FMdUIsRUFNdkJDLElBTnVCLEVBT3ZCQyxJQVB1QixFQVF2QkMsS0FSdUIsS0FTcEI7QUFDSCxTQUNFLDZCQUFDLGNBQUQ7QUFDRSxJQUFBLFVBQVUsRUFBRUwsVUFEZDtBQUVFLElBQUEsV0FBVyxFQUFFQyxXQUZmO0FBR0UsSUFBQSxPQUFPLEVBQUVDLE9BSFg7QUFJRSxJQUFBLElBQUksRUFBRUMsSUFKUjtBQUtFLElBQUEsSUFBSSxFQUFFQyxJQUxSO0FBTUUsSUFBQSxPQUFPLEVBQUVWLFNBTlg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FRR1csS0FSSCxDQURGO0FBWUQsQ0F0Qk07OztBQXdCUCxJQUFJQyxNQUFKOztBQUVPLE1BQU1DLEtBQUssR0FBRyxDQUNuQkMsTUFBTSxHQUFHWCxTQUFTLENBQ2hCWSw2QkFBY1gsU0FERSxFQUVoQlcsNkJBQWNWLGdCQUZFLEVBR2hCVSw2QkFBY1QsVUFIRSxFQUloQlMsNkJBQWNSLFdBSkUsRUFLaEJRLDZCQUFjUCxPQUxFLEVBTWhCTyw2QkFBY04sSUFORSxFQU9oQk0sNkJBQWNMLElBUEUsRUFRaEJLLDZCQUFjSixLQVJFLENBREMsS0FXaEI7QUFDSEMsRUFBQUEsTUFBTSxHQUFHLG1CQUFNRSxNQUFOLENBQVQ7QUFFQSxTQUFPLDRDQUFTLFFBQVQsRUFBbUIsTUFBTTtBQUM5QiwwQ0FBSSwrQkFBOEJILEtBQU0sRUFBeEMsRUFBMkMsTUFDekMscUJBQU9DLE1BQU0sQ0FBQ0ksSUFBUCxFQUFQLEVBQXNCQyxPQUF0QixDQUE4Qk4sS0FBOUIsQ0FERjtBQUdBLDBDQUFJLDJEQUFKLEVBQWdFLE1BQU07QUFDcEUsWUFBTVgsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBbEI7QUFFQVUsTUFBQUEsTUFBTSxDQUFDTSxRQUFQLENBQWdCO0FBQ2RDLFFBQUFBLE9BQU8sRUFBRW5CO0FBREssT0FBaEI7QUFJQVksTUFBQUEsTUFBTSxDQUFDUSxRQUFQLENBQWdCLE9BQWhCOztBQUVBLFVBQUksQ0FBQ2QsVUFBTCxFQUFpQjtBQUNmLDZCQUFPTixTQUFQLEVBQWtCcUIsZ0JBQWxCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsNkJBQU9yQixTQUFQLEVBQWtCc0IsR0FBbEIsQ0FBc0JELGdCQUF0QjtBQUNEO0FBQ0YsS0FkRDtBQWdCQSwwQ0FBSSwyQkFBMEJmLFVBQVcsRUFBekMsRUFBNEMsTUFBTTtBQUNoRCwyQkFBT00sTUFBTSxDQUFDVyxJQUFQLENBQVksWUFBWixDQUFQLEVBQWtDTixPQUFsQyxDQUEwQ1gsVUFBMUM7QUFDRCxLQUZEO0FBSUEsMENBQUksd0JBQXVCRSxPQUFRLEVBQW5DLEVBQXNDLE1BQU07QUFDMUMsMkJBQU9JLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLFNBQVosQ0FBUCxFQUErQk4sT0FBL0IsQ0FBdUNULE9BQXZDO0FBQ0QsS0FGRDtBQUlBLDBDQUFJLDRCQUEyQkQsV0FBWSxFQUEzQyxFQUE4QyxNQUFNO0FBQ2xELDJCQUFPSyxNQUFNLENBQUNXLElBQVAsQ0FBWSxhQUFaLENBQVAsRUFBbUNOLE9BQW5DLENBQTJDVixXQUEzQztBQUNELEtBRkQ7QUFJQSwwQ0FBSSxxQkFBb0JHLElBQUssRUFBN0IsRUFBZ0MsTUFBTTtBQUNwQywyQkFBT0UsTUFBTSxDQUFDVyxJQUFQLENBQVksTUFBWixDQUFQLEVBQTRCTixPQUE1QixDQUFvQ1AsSUFBcEM7QUFDRCxLQUZEO0FBSUEsMENBQUkscUJBQW9CRCxJQUFLLEVBQTdCLEVBQWdDLE1BQU07QUFDcEMsMkJBQU9HLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLE1BQVosQ0FBUCxFQUE0Qk4sT0FBNUIsQ0FBb0NSLElBQXBDO0FBQ0QsS0FGRDtBQUdELEdBdkNNLENBQVA7QUF3Q0QsQ0F0RE07OztBQXdEUEksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZhdWx0VmFsdWVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2RlZmF1bHRWYWx1ZXMnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9CdXR0b24nO1xuaW1wb3J0IHsgZGVzY3JpYmUsIGl0IH0gZnJvbSAnc3Rvcnlib29rLWFkZG9uLXNwZWNpZmljYXRpb25zJztcbmltcG9ydCBleHBlY3QgZnJvbSAnZXhwZWN0JztcblxuY29uc3QgbW9ja0NsaWNrID0gamVzdC5mbigpO1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc0Z1bGxXaWR0aCxcbiAgaXNSb3VuZCxcbiAgc2l6ZSxcbiAgdHlwZSxcbiAgdmFsdWVcbikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICBpc0Z1bGxXaWR0aD17aXNGdWxsV2lkdGh9XG4gICAgICBpc1JvdW5kPXtpc1JvdW5kfVxuICAgICAgc2l6ZT17c2l6ZX1cbiAgICAgIHR5cGU9e3R5cGV9XG4gICAgICBvbkNsaWNrPXttb2NrQ2xpY2t9XG4gICAgPlxuICAgICAge3ZhbHVlfVxuICAgIDwvQnV0dG9uPlxuICApO1xufTtcblxubGV0IG91dHB1dDtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBidXR0b24gPSBDb21wb25lbnQoXG4gICAgZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5pc0RlZmF1bHRDaGVja2VkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgICBkZWZhdWx0VmFsdWVzLmlzRnVsbFdpZHRoLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNSb3VuZCxcbiAgICBkZWZhdWx0VmFsdWVzLnNpemUsXG4gICAgZGVmYXVsdFZhbHVlcy50eXBlLFxuICAgIGRlZmF1bHRWYWx1ZXMudmFsdWVcbiAgKVxuKSA9PiB7XG4gIG91dHB1dCA9IG1vdW50KGJ1dHRvbik7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XG4gICAgaXQoYFNob3VsZCBoYXZlIHRoZSByaWdodCB0ZXh0OiAke3ZhbHVlfWAsICgpID0+XG4gICAgICBleHBlY3Qob3V0cHV0LnRleHQoKSkudG9FcXVhbCh2YWx1ZSkpO1xuXG4gICAgaXQoYG9uQ2xpY2sgc2hvdWxkIGhhdmUgYmVlbiBjYWxsZWQgaWYgQnV0dG9uIGlzIG5vdCBkaXNhYmxlZGAsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tDbGljayA9IGplc3QuZm4oKTtcblxuICAgICAgb3V0cHV0LnNldFByb3BzKHtcbiAgICAgICAgb25DbGljazogbW9ja0NsaWNrXG4gICAgICB9KTtcblxuICAgICAgb3V0cHV0LnNpbXVsYXRlKCdjbGljaycpO1xuXG4gICAgICBpZiAoIWlzRGlzYWJsZWQpIHtcbiAgICAgICAgZXhwZWN0KG1vY2tDbGljaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwZWN0KG1vY2tDbGljaykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2lzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoaXNEaXNhYmxlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNSb3VuZDogJHtpc1JvdW5kfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNSb3VuZCcpKS50b0VxdWFsKGlzUm91bmQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRnVsbFdpZHRoOiAke2lzRnVsbFdpZHRofWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNGdWxsV2lkdGgnKSkudG9FcXVhbChpc0Z1bGxXaWR0aCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgdHlwZTogJHt0eXBlfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgndHlwZScpKS50b0VxdWFsKHR5cGUpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIHNpemU6ICR7c2l6ZX1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3NpemUnKSkudG9FcXVhbChzaXplKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19