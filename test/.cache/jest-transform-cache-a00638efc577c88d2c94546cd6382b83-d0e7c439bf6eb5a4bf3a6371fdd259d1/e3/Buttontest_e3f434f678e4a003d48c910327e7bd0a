61baf507255da4bbf4d46e4f689a1a64
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Button = require("./Button");

var _defaultValues = require("../../constants/defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Button/Button.test.jsx";

const Component = (isDisabled, isFullWidth, isRound, size, type, children, onClick) => {
  return _react.default.createElement(_Button.Button, {
    isDisabled: isDisabled,
    isFullWidth: isFullWidth,
    isRound: isRound,
    size: size,
    type: type,
    onClick: onClick,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (button = Component(_defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isFullWidth, _defaultValues.defaultValues.isRound, _defaultValues.defaultValues.size, _defaultValues.defaultValues.type, _defaultValues.defaultValues.children)) => {
  output = (0, _enzyme.mount)(button);
  return describe('Button', () => {
    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {
      expect(output.props().isDisabled).toEqual(button.props.isDisabled);
    });
    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {
      expect(output.props().isFullWidth).toEqual(button.props.isFullWidth);
    });
    it(`Should have isRound: ${button.props.isRound}`, () => {
      expect(output.props().isRound).toEqual(button.props.isRound);
    });
    it(`Should have size: ${button.props.size}`, () => {
      expect(output.props().size).toEqual(button.props.size);
    });
    it(`Should have type: ${button.props.type}`, () => {
      expect(output.props().type).toEqual(button.props.type);
    });
    it(`Should have children: ${button.props.children}`, () => {
      expect(output.text()).toEqual(button.props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LmpzeCJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJpc0Rpc2FibGVkIiwiaXNGdWxsV2lkdGgiLCJpc1JvdW5kIiwic2l6ZSIsInR5cGUiLCJjaGlsZHJlbiIsIm9uQ2xpY2siLCJvdXRwdXQiLCJ0ZXN0cyIsImJ1dHRvbiIsImRlZmF1bHRWYWx1ZXMiLCJkZXNjcmliZSIsIml0IiwicHJvcHMiLCJleHBlY3QiLCJ0b0VxdWFsIiwidGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFTyxNQUFNQSxTQUFTLEdBQUcsQ0FDdkJDLFVBRHVCLEVBRXZCQyxXQUZ1QixFQUd2QkMsT0FIdUIsRUFJdkJDLElBSnVCLEVBS3ZCQyxJQUx1QixFQU12QkMsUUFOdUIsRUFPdkJDLE9BUHVCLEtBUXBCO0FBQ0gsU0FDRSw2QkFBQyxjQUFEO0FBQ0UsSUFBQSxVQUFVLEVBQUVOLFVBRGQ7QUFFRSxJQUFBLFdBQVcsRUFBRUMsV0FGZjtBQUdFLElBQUEsT0FBTyxFQUFFQyxPQUhYO0FBSUUsSUFBQSxJQUFJLEVBQUVDLElBSlI7QUFLRSxJQUFBLElBQUksRUFBRUMsSUFMUjtBQU1FLElBQUEsT0FBTyxFQUFFRSxPQU5YO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBUUdELFFBUkgsQ0FERjtBQVlELENBckJNOzs7QUF1QlAsSUFBSUUsTUFBSjs7QUFFTyxNQUFNQyxLQUFLLEdBQUcsQ0FDbkJDLE1BQU0sR0FBR1YsU0FBUyxDQUNoQlcsNkJBQWNWLFVBREUsRUFFaEJVLDZCQUFjVCxXQUZFLEVBR2hCUyw2QkFBY1IsT0FIRSxFQUloQlEsNkJBQWNQLElBSkUsRUFLaEJPLDZCQUFjTixJQUxFLEVBTWhCTSw2QkFBY0wsUUFORSxDQURDLEtBU2hCO0FBQ0hFLEVBQUFBLE1BQU0sR0FBRyxtQkFBTUUsTUFBTixDQUFUO0FBRUEsU0FBT0UsUUFBUSxDQUFDLFFBQUQsRUFBVyxNQUFNO0FBQzlCQyxJQUFBQSxFQUFFLENBQUUsMkJBQTBCSCxNQUFNLENBQUNJLEtBQVAsQ0FBYWIsVUFBVyxFQUFwRCxFQUF1RCxNQUFNO0FBQzdEYyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlYixVQUFoQixDQUFOLENBQWtDZSxPQUFsQyxDQUEwQ04sTUFBTSxDQUFDSSxLQUFQLENBQWFiLFVBQXZEO0FBQ0QsS0FGQyxDQUFGO0FBR0FZLElBQUFBLEVBQUUsQ0FBRSw0QkFBMkJILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhWixXQUFZLEVBQXRELEVBQXlELE1BQU07QUFDL0RhLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVaLFdBQWhCLENBQU4sQ0FBbUNjLE9BQW5DLENBQTJDTixNQUFNLENBQUNJLEtBQVAsQ0FBYVosV0FBeEQ7QUFDRCxLQUZDLENBQUY7QUFHQVcsSUFBQUEsRUFBRSxDQUFFLHdCQUF1QkgsTUFBTSxDQUFDSSxLQUFQLENBQWFYLE9BQVEsRUFBOUMsRUFBaUQsTUFBTTtBQUN2RFksTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVgsT0FBaEIsQ0FBTixDQUErQmEsT0FBL0IsQ0FBdUNOLE1BQU0sQ0FBQ0ksS0FBUCxDQUFhWCxPQUFwRDtBQUNELEtBRkMsQ0FBRjtBQUdBVSxJQUFBQSxFQUFFLENBQUUscUJBQW9CSCxNQUFNLENBQUNJLEtBQVAsQ0FBYVYsSUFBSyxFQUF4QyxFQUEyQyxNQUFNO0FBQ2pEVyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlVixJQUFoQixDQUFOLENBQTRCWSxPQUE1QixDQUFvQ04sTUFBTSxDQUFDSSxLQUFQLENBQWFWLElBQWpEO0FBQ0QsS0FGQyxDQUFGO0FBR0FTLElBQUFBLEVBQUUsQ0FBRSxxQkFBb0JILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhVCxJQUFLLEVBQXhDLEVBQTJDLE1BQU07QUFDakRVLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVULElBQWhCLENBQU4sQ0FBNEJXLE9BQTVCLENBQW9DTixNQUFNLENBQUNJLEtBQVAsQ0FBYVQsSUFBakQ7QUFDRCxLQUZDLENBQUY7QUFJQVEsSUFBQUEsRUFBRSxDQUFFLHlCQUF3QkgsTUFBTSxDQUFDSSxLQUFQLENBQWFSLFFBQVMsRUFBaEQsRUFBbUQsTUFBTTtBQUN6RFMsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNTLElBQVAsRUFBRCxDQUFOLENBQXNCRCxPQUF0QixDQUE4Qk4sTUFBTSxDQUFDSSxLQUFQLENBQWFSLFFBQTNDO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FwQmMsQ0FBZjtBQXFCRCxDQWpDTTs7O0FBbUNQRyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4vQnV0dG9uJztcbmltcG9ydCB7IGRlZmF1bHRWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZGVmYXVsdFZhbHVlcyc7XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoXG4gIGlzRGlzYWJsZWQsXG4gIGlzRnVsbFdpZHRoLFxuICBpc1JvdW5kLFxuICBzaXplLFxuICB0eXBlLFxuICBjaGlsZHJlbixcbiAgb25DbGlja1xuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIGlzRnVsbFdpZHRoPXtpc0Z1bGxXaWR0aH1cbiAgICAgIGlzUm91bmQ9e2lzUm91bmR9XG4gICAgICBzaXplPXtzaXplfVxuICAgICAgdHlwZT17dHlwZX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQnV0dG9uPlxuICApO1xufTtcblxubGV0IG91dHB1dDtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBidXR0b24gPSBDb21wb25lbnQoXG4gICAgZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNGdWxsV2lkdGgsXG4gICAgZGVmYXVsdFZhbHVlcy5pc1JvdW5kLFxuICAgIGRlZmF1bHRWYWx1ZXMuc2l6ZSxcbiAgICBkZWZhdWx0VmFsdWVzLnR5cGUsXG4gICAgZGVmYXVsdFZhbHVlcy5jaGlsZHJlblxuICApXG4pID0+IHtcbiAgb3V0cHV0ID0gbW91bnQoYnV0dG9uKTtcblxuICByZXR1cm4gZGVzY3JpYmUoJ0J1dHRvbicsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtidXR0b24ucHJvcHMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNEaXNhYmxlZCkudG9FcXVhbChidXR0b24ucHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRnVsbFdpZHRoOiAke2J1dHRvbi5wcm9wcy5pc0Z1bGxXaWR0aH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNGdWxsV2lkdGgpLnRvRXF1YWwoYnV0dG9uLnByb3BzLmlzRnVsbFdpZHRoKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNSb3VuZDogJHtidXR0b24ucHJvcHMuaXNSb3VuZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNSb3VuZCkudG9FcXVhbChidXR0b24ucHJvcHMuaXNSb3VuZCk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIHNpemU6ICR7YnV0dG9uLnByb3BzLnNpemV9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLnNpemUpLnRvRXF1YWwoYnV0dG9uLnByb3BzLnNpemUpO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSB0eXBlOiAke2J1dHRvbi5wcm9wcy50eXBlfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS50eXBlKS50b0VxdWFsKGJ1dHRvbi5wcm9wcy50eXBlKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtidXR0b24ucHJvcHMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC50ZXh0KCkpLnRvRXF1YWwoYnV0dG9uLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19