a5dca3b1eec1ec2ef82d1f90b214f37b
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Button = require("./Button");

var _defaultValues = require("../../constants/defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Button/Button.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Button.Button, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (checkbox = Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children)) => {
  output = (0, _enzyme.mount)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {
      expect(output.props().isDefaultChecked).toEqual(checkbox.props.isDefaultChecked);
    });
    it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
      expect(output.props().isChecked).toEqual(checkbox.props.isChecked);
    });
    it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
      expect(output.props().isDisabled).toEqual(checkbox.props.isDisabled);
    });
    it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
      expect(output.props().isPartiallyChecked).toEqual(checkbox.props.isPartiallyChecked);
    });
    it(`Should have position: ${checkbox.props.position}`, () => {
      expect(output.props().position).toEqual(checkbox.props.position);
    });
    it(`Should have children: ${checkbox.props.children}`, () => {
      expect(output.props().children).toEqual(checkbox.props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LmpzeCJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJpc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzUGFydGlhbGx5Q2hlY2tlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJvdXRwdXQiLCJ0ZXN0cyIsImNoZWNrYm94IiwiZGVmYXVsdFZhbHVlcyIsImRlc2NyaWJlIiwiaXQiLCJwcm9wcyIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQ3ZCQyxTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGNBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBRUwsU0FEYjtBQUVFLElBQUEsa0JBQWtCLEVBQUVHLGtCQUZ0QjtBQUdFLElBQUEsZ0JBQWdCLEVBQUVGLGdCQUhwQjtBQUlFLElBQUEsVUFBVSxFQUFFQyxVQUpkO0FBS0UsSUFBQSxRQUFRLEVBQUVFLFFBTFo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FPR0MsUUFQSCxDQURGO0FBV0QsQ0FuQk07OztBQXFCUCxJQUFJQyxNQUFKOztBQUVPLE1BQU1DLEtBQUssR0FBRyxDQUNuQkMsUUFBUSxHQUFHVCxTQUFTLENBQ2xCVSw2QkFBY1QsU0FESSxFQUVsQlMsNkJBQWNSLGdCQUZJLEVBR2xCUSw2QkFBY1AsVUFISSxFQUlsQk8sNkJBQWNOLGtCQUpJLEVBS2xCTSw2QkFBY0wsUUFMSSxFQU1sQkssNkJBQWNKLFFBTkksQ0FERCxLQVNoQjtBQUNIQyxFQUFBQSxNQUFNLEdBQUcsbUJBQU1FLFFBQU4sQ0FBVDtBQUVBLFNBQU9FLFFBQVEsQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUNoQ0MsSUFBQUEsRUFBRSxDQUFFLGlDQUFnQ0gsUUFBUSxDQUFDSSxLQUFULENBQWVYLGdCQUFpQixFQUFsRSxFQUFxRSxNQUFNO0FBQzNFWSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlWCxnQkFBaEIsQ0FBTixDQUF3Q2EsT0FBeEMsQ0FDRU4sUUFBUSxDQUFDSSxLQUFULENBQWVYLGdCQURqQjtBQUdELEtBSkMsQ0FBRjtBQUtBVSxJQUFBQSxFQUFFLENBQUUsMEJBQXlCSCxRQUFRLENBQUNJLEtBQVQsQ0FBZVosU0FBVSxFQUFwRCxFQUF1RCxNQUFNO0FBQzdEYSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlWixTQUFoQixDQUFOLENBQWlDYyxPQUFqQyxDQUF5Q04sUUFBUSxDQUFDSSxLQUFULENBQWVaLFNBQXhEO0FBQ0QsS0FGQyxDQUFGO0FBR0FXLElBQUFBLEVBQUUsQ0FBRSwyQkFBMEJILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlVixVQUFXLEVBQXRELEVBQXlELE1BQU07QUFDL0RXLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVWLFVBQWhCLENBQU4sQ0FBa0NZLE9BQWxDLENBQTBDTixRQUFRLENBQUNJLEtBQVQsQ0FBZVYsVUFBekQ7QUFDRCxLQUZDLENBQUY7QUFHQVMsSUFBQUEsRUFBRSxDQUFFLG1DQUFrQ0gsUUFBUSxDQUFDSSxLQUFULENBQWVULGtCQUFtQixFQUF0RSxFQUF5RSxNQUFNO0FBQy9FVSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlVCxrQkFBaEIsQ0FBTixDQUEwQ1csT0FBMUMsQ0FDRU4sUUFBUSxDQUFDSSxLQUFULENBQWVULGtCQURqQjtBQUdELEtBSkMsQ0FBRjtBQUtBUSxJQUFBQSxFQUFFLENBQUUseUJBQXdCSCxRQUFRLENBQUNJLEtBQVQsQ0FBZVIsUUFBUyxFQUFsRCxFQUFxRCxNQUFNO0FBQzNEUyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlUixRQUFoQixDQUFOLENBQWdDVSxPQUFoQyxDQUF3Q04sUUFBUSxDQUFDSSxLQUFULENBQWVSLFFBQXZEO0FBQ0QsS0FGQyxDQUFGO0FBR0FPLElBQUFBLEVBQUUsQ0FBRSx5QkFBd0JILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlUCxRQUFTLEVBQWxELEVBQXFELE1BQU07QUFDM0RRLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVQLFFBQWhCLENBQU4sQ0FBZ0NTLE9BQWhDLENBQXdDTixRQUFRLENBQUNJLEtBQVQsQ0FBZVAsUUFBdkQ7QUFDRCxLQUZDLENBQUY7QUFHRCxHQXZCYyxDQUFmO0FBd0JELENBcENNOzs7QUFzQ1BFLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9CdXR0b24nO1xuaW1wb3J0IHsgZGVmYXVsdFZhbHVlcyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9kZWZhdWx0VmFsdWVzJztcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uLFxuICBjaGlsZHJlblxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgaXNDaGVja2VkPXtpc0NoZWNrZWR9XG4gICAgICBpc1BhcnRpYWxseUNoZWNrZWQ9e2lzUGFydGlhbGx5Q2hlY2tlZH1cbiAgICAgIGlzRGVmYXVsdENoZWNrZWQ9e2lzRGVmYXVsdENoZWNrZWR9XG4gICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0J1dHRvbj5cbiAgKTtcbn07XG5cbmxldCBvdXRwdXQ7XG5cbmV4cG9ydCBjb25zdCB0ZXN0cyA9IChcbiAgY2hlY2tib3ggPSBDb21wb25lbnQoXG4gICAgZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5pc0RlZmF1bHRDaGVja2VkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgICBkZWZhdWx0VmFsdWVzLmlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgICBkZWZhdWx0VmFsdWVzLnBvc2l0aW9uLFxuICAgIGRlZmF1bHRWYWx1ZXMuY2hpbGRyZW5cbiAgKVxuKSA9PiB7XG4gIG91dHB1dCA9IG1vdW50KGNoZWNrYm94KTtcblxuICByZXR1cm4gZGVzY3JpYmUoJ0NoZWNrYm94JywgKCkgPT4ge1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2NoZWNrYm94LnByb3BzLmlzRGVmYXVsdENoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmlzRGVmYXVsdENoZWNrZWQpLnRvRXF1YWwoXG4gICAgICAgIGNoZWNrYm94LnByb3BzLmlzRGVmYXVsdENoZWNrZWRcbiAgICAgICk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmlzQ2hlY2tlZCkudG9FcXVhbChjaGVja2JveC5wcm9wcy5pc0NoZWNrZWQpO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2NoZWNrYm94LnByb3BzLmlzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmlzRGlzYWJsZWQpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmlzUGFydGlhbGx5Q2hlY2tlZCkudG9FcXVhbChcbiAgICAgICAgY2hlY2tib3gucHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkXG4gICAgICApO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBwb3NpdGlvbjogJHtjaGVja2JveC5wcm9wcy5wb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkucG9zaXRpb24pLnRvRXF1YWwoY2hlY2tib3gucHJvcHMucG9zaXRpb24pO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtjaGVja2JveC5wcm9wcy5jaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuY2hpbGRyZW4pLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=