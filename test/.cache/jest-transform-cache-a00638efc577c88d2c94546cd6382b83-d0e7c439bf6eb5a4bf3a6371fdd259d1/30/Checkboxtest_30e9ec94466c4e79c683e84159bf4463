21b9ab8e0501a271d4555410df877c84
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _defaultValues = require("./defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component()
/*props = {
  isChecked: defaultValues.isChecked,
  isDefaultChecked: defaultValues.isDefaultChecked,
  isDisabled: defaultValues.isDisabled,
  isPartiallyChecked: defaultValues.isPartiallyChecked,
  position: defaultValues.position,
  children: defaultValues.children
}*/
) => {
  output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', () => {
    if (checkbox.props.isChecked) {
      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
      });
    } else it(`Should have isChecked: ${_defaultValues.defaultValues.isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(_defaultValues.defaultValues.isChecked);
    });

    if (checkbox.props.isDefaultChecked) {
      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {
        expect(output.prop('isDefaultChecked')).toEqual(checkbox.props.isDefaultChecked);
      });
    } else it(`Should have isChecked: ${_defaultValues.defaultValues.isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(_defaultValues.defaultValues.isDefaultChecked);
    });

    if (checkbox.props.isDisabled) {
      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
      });
    } else it(`Should have isDisabled: ${_defaultValues.defaultValues.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(_defaultValues.defaultValues.isDisabled);
    });

    if (checkbox.props.isPartiallyChecked) {
      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(checkbox.props.isPartiallyChecked);
      });
    } else it(`Should have isPartiallyChecked: ${_defaultValues.defaultValues.isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(_defaultValues.defaultValues.isPartiallyChecked);
    });

    if (checkbox.props.position) {
      it(`Should have position: ${checkbox.props.position}`, () => {
        expect(output.prop('position')).toEqual(checkbox.props.position);
      });
    } else it(`Should have position: ${_defaultValues.defaultValues.position}`, () => {
      expect(output.prop('position')).toEqual(_defaultValues.defaultValues.position);
    });

    if (checkbox.props.children) {
      it(`Should have children: ${checkbox.props.children}`, () => {
        expect(output.prop('children')).toEqual(checkbox.props.children);
      });
    } else it(`Should have children: ${_defaultValues.defaultValues.children}`, () => {
      expect(output.prop('children')).toEqual(_defaultValues.defaultValues.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,