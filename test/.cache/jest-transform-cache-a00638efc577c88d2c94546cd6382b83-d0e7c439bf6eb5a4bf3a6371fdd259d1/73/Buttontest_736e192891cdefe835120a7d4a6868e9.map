{"version":3,"sources":["Button.test.jsx"],"names":["Component","isDisabled","isFullWidth","isRound","size","type","value","onClick","output","tests","button","defaultValues","props","toEqual"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,UADuB,EAEvBC,WAFuB,EAGvBC,OAHuB,EAIvBC,IAJuB,EAKvBC,IALuB,EAMvBC,KANuB,EAOvBC,OAPuB,KAQpB;AACH,SACE,6BAAC,cAAD;AACE,IAAA,UAAU,EAAEN,UADd;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,IAAI,EAAEC,IALR;AAME,IAAA,OAAO,EAAEE,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGD,KARH,CADF;AAYD,CArBM;;;AAuBP,IAAIE,MAAJ;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDO,MAAMC,KAAK,GAAGC,MAAM,IAAI;AAC7BF,EAAAA,MAAM,GAAG,mBACPR,SAAS,CACPW,6BAAcV,UADP,EAEPU,6BAAcT,WAFP,EAGPS,6BAAcR,OAHP,EAIPQ,6BAAcP,IAJP,EAKPO,6BAAcN,IALP,EAMPM,6BAAcL,KANP,CADF,CAAT;AAWA,SAAO,4CAAS,UAAT,EAAqB,MAAM;AAChC,0CAAI,iCAAgCI,MAAM,CAACE,KAAP,CAAaN,KAAM,EAAvD,EAA0D,MAAM;AAC9D,2BAAOE,MAAM,CAACI,KAAP,GAAeN,KAAtB,EAA6BO,OAA7B,CAAqCH,MAAM,CAACE,KAAP,CAAaN,KAAlD;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CAjBM;;;AAmBPG,KAAK","sourcesContent":["import { mount, shallow } from 'enzyme';\nimport React from 'react';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { Button } from './Button';\nimport { describe, it } from 'storybook-addon-specifications';\nimport expect from 'expect';\n\nexport const Component = (\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value,\n  onClick\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={onClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nlet output;\n/*export const tests = (\n  button = Component(\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.value\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have the right text: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual(button.props.value);\n    });\n\n    /!* it(`onClick should have been called if Button is not disabled: `, () => {\n      const mockClick = jest.fn();\n      output.setProps({\n        onClick: mockClick\n      });\n      output.simulate('click');\n\n      if (!button.props.isDisabled) {\n        expect(output.props().onClick).toHaveBeenCalled();\n      } else {\n        expect(output.props().onClick).not.toHaveBeenCalled();\n      }\n    });\n\n    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {\n      expect(output.prop('isDisabled')).toEqual(button.props.isDisabled);\n    });\n\n    it(`Should have isRound: ${button.props.isRound}`, () => {\n      expect(output.prop('isRound')).toEqual(button.props.isRound);\n    });\n\n    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {\n      expect(output.prop('isFullWidth')).toEqual(button.props.isFullWidth);\n    });\n\n    it(`Should have type: ${button.props.type}`, () => {\n      expect(output.prop('type')).toEqual(button.props.type);\n    });\n\n    it(`Should have size: ${button.props.size}`, () => {\n      expect(output.prop('size')).toEqual(button.props.size);\n    });*!/\n  });\n};\n\ntests();*/\n\nexport const tests = button => {\n  output = mount(\n    Component(\n      defaultValues.isDisabled,\n      defaultValues.isFullWidth,\n      defaultValues.isRound,\n      defaultValues.size,\n      defaultValues.type,\n      defaultValues.value\n    )\n  );\n\n  return describe('Checkbox', () => {\n    it(`Should have isDefaultChecked: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual(button.props.value);\n    });\n  });\n};\n\ntests();\n"]}