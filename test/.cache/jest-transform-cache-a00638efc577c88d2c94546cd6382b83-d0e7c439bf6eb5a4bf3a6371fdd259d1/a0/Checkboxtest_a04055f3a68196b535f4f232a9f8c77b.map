{"version":3,"sources":["Checkbox.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isPartiallyChecked","position","children","output","tests","checkbox","describe","props","it","expect","prop","toEqual","defaultValues"],"mappings":"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","sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nimport { defaultValues } from './defaultValues';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      isPartiallyChecked={isPartiallyChecked}\n      isDefaultChecked={isDefaultChecked}\n      isDisabled={isDisabled}\n      position={position}\n    >\n      {children}\n    </Checkbox>\n  );\n};\n\nlet output = shallow(Component());\n\nexport const tests = (\n  checkbox = Component()\n  /*props = {\n    isChecked: defaultValues.isChecked,\n    isDefaultChecked: defaultValues.isDefaultChecked,\n    isDisabled: defaultValues.isDisabled,\n    isPartiallyChecked: defaultValues.isPartiallyChecked,\n    position: defaultValues.position,\n    children: defaultValues.children\n  }*/\n) => {\n  output = shallow(checkbox);\n\n  return describe('Checkbox', () => {\n    if (checkbox.props.isChecked) {\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n    } else\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });\n    if (checkbox.props.isDefaultChecked) {\n      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(\n          checkbox.props.isDefaultChecked\n        );\n      });\n    } else\n      it(`Should have isChecked: ${defaultValues.isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n\n    if (checkbox.props.isDisabled) {\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n    } else\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n\n    if (checkbox.props.isPartiallyChecked) {\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n    } else\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n\n    if (checkbox.props.position) {\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n    } else\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n\n    it(`Should have children: ${props.children}`, () => {\n      expect(output.prop('children')).toEqual(props.children);\n    });\n  });\n};\n\ntests();\n"]}