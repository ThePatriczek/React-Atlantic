deab7c8afd365726368656d245d3ae85
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _defaultValues = require("./defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  if (isDefaultChecked) {
    output = (0, _enzyme.shallow)(Component(isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children));
  } else output = (0, _enzyme.shallow)(Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children));

  console.log(Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children));
  return describe('Checkbox', () => {
    if (isDefaultChecked !== undefined) {
      it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
        expect(output.props().isDefaultChecked).toEqual(isDefaultChecked);
      });
    } else {
      it(`Should have isDefaultChecked: ${_defaultValues.defaultValues.isDefaultChecked}`, () => {
        console.log(output.props());
        expect(output.props().isDefaultChecked).toEqual(_defaultValues.defaultValues.isDefaultChecked);
      });
    }
    /* if (checkbox.props.isChecked) {
      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
      });
    } else
      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);
      });
     if (checkbox.props.isDisabled) {
      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
      });
    } else
      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);
      });
     if (checkbox.props.isPartiallyChecked) {
      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(
          checkbox.props.isPartiallyChecked
        );
      });
    } else
      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(
          defaultValues.isPartiallyChecked
        );
      });
     if (checkbox.props.position) {
      it(`Should have position: ${checkbox.props.position}`, () => {
        expect(output.prop('position')).toEqual(checkbox.props.position);
      });
    } else
      it(`Should have position: ${defaultValues.position}`, () => {
        expect(output.prop('position')).toEqual(defaultValues.position);
      });
     if (checkbox.props.children) {
      it(`Should have children: ${checkbox.props.children}`, () => {
        expect(output.prop('children')).toEqual(checkbox.props.children);
      });
    } else
      it(`Should have children: ${defaultValues.children}`, () => {
        expect(output.prop('children')).toEqual(defaultValues.children);
      });*/

  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsInRlc3RzIiwiZGVmYXVsdFZhbHVlcyIsImNvbnNvbGUiLCJsb2ciLCJkZXNjcmliZSIsInVuZGVmaW5lZCIsIml0IiwiZXhwZWN0IiwicHJvcHMiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLFNBQVMsR0FBRyxDQUN2QkMsU0FEdUIsRUFFdkJDLGdCQUZ1QixFQUd2QkMsVUFIdUIsRUFJdkJDLGtCQUp1QixFQUt2QkMsUUFMdUIsRUFNdkJDLFFBTnVCLEtBT3BCO0FBQ0gsU0FDRSw2QkFBQyxrQkFBRDtBQUNFLElBQUEsU0FBUyxFQUFFTCxTQURiO0FBRUUsSUFBQSxrQkFBa0IsRUFBRUcsa0JBRnRCO0FBR0UsSUFBQSxnQkFBZ0IsRUFBRUYsZ0JBSHBCO0FBSUUsSUFBQSxVQUFVLEVBQUVDLFVBSmQ7QUFLRSxJQUFBLFFBQVEsRUFBRUUsUUFMWjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQU9HQyxRQVBILENBREY7QUFXRCxDQW5CTTs7O0FBcUJQLElBQUlDLE1BQUo7O0FBQ08sTUFBTUMsS0FBSyxHQUFHLENBQ25CUCxTQURtQixFQUVuQkMsZ0JBRm1CLEVBR25CQyxVQUhtQixFQUluQkMsa0JBSm1CLEVBS25CQyxRQUxtQixFQU1uQkMsUUFObUIsS0FPaEI7QUFDSCxNQUFJSixnQkFBSixFQUFzQjtBQUNwQkssSUFBQUEsTUFBTSxHQUFHLHFCQUNQUCxTQUFTLENBQ1BDLFNBRE8sRUFFUEMsZ0JBRk8sRUFHUEMsVUFITyxFQUlQQyxrQkFKTyxFQUtQQyxRQUxPLEVBTVBDLFFBTk8sQ0FERixDQUFUO0FBVUQsR0FYRCxNQVlFQyxNQUFNLEdBQUcscUJBQ1BQLFNBQVMsQ0FDUFMsNkJBQWNSLFNBRFAsRUFFUFEsNkJBQWNQLGdCQUZQLEVBR1BPLDZCQUFjTixVQUhQLEVBSVBNLDZCQUFjTCxrQkFKUCxFQUtQSyw2QkFBY0osUUFMUCxFQU1QSSw2QkFBY0gsUUFOUCxDQURGLENBQVQ7O0FBVUZJLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNFWCxTQUFTLENBQ1BTLDZCQUFjUixTQURQLEVBRVBRLDZCQUFjUCxnQkFGUCxFQUdQTyw2QkFBY04sVUFIUCxFQUlQTSw2QkFBY0wsa0JBSlAsRUFLUEssNkJBQWNKLFFBTFAsRUFNUEksNkJBQWNILFFBTlAsQ0FEWDtBQVdBLFNBQU9NLFFBQVEsQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUNoQyxRQUFJVixnQkFBZ0IsS0FBS1csU0FBekIsRUFBb0M7QUFDbENDLE1BQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NaLGdCQUFpQixFQUFuRCxFQUFzRCxNQUFNO0FBQzVEYSxRQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1MsS0FBUCxHQUFlZCxnQkFBaEIsQ0FBTixDQUF3Q2UsT0FBeEMsQ0FBZ0RmLGdCQUFoRDtBQUNELE9BRkMsQ0FBRjtBQUdELEtBSkQsTUFJTztBQUNMWSxNQUFBQSxFQUFFLENBQUUsaUNBQWdDTCw2QkFBY1AsZ0JBQWlCLEVBQWpFLEVBQW9FLE1BQU07QUFDMUVRLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSixNQUFNLENBQUNTLEtBQVAsRUFBWjtBQUNBRCxRQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1MsS0FBUCxHQUFlZCxnQkFBaEIsQ0FBTixDQUF3Q2UsT0FBeEMsQ0FDRVIsNkJBQWNQLGdCQURoQjtBQUdELE9BTEMsQ0FBRjtBQU1EO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdERCxHQTdEYyxDQUFmO0FBOERELENBdkdNOzs7QUF5R1BNLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuaW1wb3J0IHsgZGVmYXVsdFZhbHVlcyB9IGZyb20gJy4vZGVmYXVsdFZhbHVlcyc7XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoXG4gIGlzQ2hlY2tlZCxcbiAgaXNEZWZhdWx0Q2hlY2tlZCxcbiAgaXNEaXNhYmxlZCxcbiAgaXNQYXJ0aWFsbHlDaGVja2VkLFxuICBwb3NpdGlvbixcbiAgY2hpbGRyZW5cbikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxDaGVja2JveFxuICAgICAgaXNDaGVja2VkPXtpc0NoZWNrZWR9XG4gICAgICBpc1BhcnRpYWxseUNoZWNrZWQ9e2lzUGFydGlhbGx5Q2hlY2tlZH1cbiAgICAgIGlzRGVmYXVsdENoZWNrZWQ9e2lzRGVmYXVsdENoZWNrZWR9XG4gICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0NoZWNrYm94PlxuICApO1xufTtcblxubGV0IG91dHB1dDtcbmV4cG9ydCBjb25zdCB0ZXN0cyA9IChcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uLFxuICBjaGlsZHJlblxuKSA9PiB7XG4gIGlmIChpc0RlZmF1bHRDaGVja2VkKSB7XG4gICAgb3V0cHV0ID0gc2hhbGxvdyhcbiAgICAgIENvbXBvbmVudChcbiAgICAgICAgaXNDaGVja2VkLFxuICAgICAgICBpc0RlZmF1bHRDaGVja2VkLFxuICAgICAgICBpc0Rpc2FibGVkLFxuICAgICAgICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH0gZWxzZVxuICAgIG91dHB1dCA9IHNoYWxsb3coXG4gICAgICBDb21wb25lbnQoXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMuaXNDaGVja2VkLFxuICAgICAgICBkZWZhdWx0VmFsdWVzLmlzRGVmYXVsdENoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgICAgICAgZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMucG9zaXRpb24sXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICBjb25zb2xlLmxvZyhcbiAgICBDb21wb25lbnQoXG4gICAgICBkZWZhdWx0VmFsdWVzLmlzQ2hlY2tlZCxcbiAgICAgIGRlZmF1bHRWYWx1ZXMuaXNEZWZhdWx0Q2hlY2tlZCxcbiAgICAgIGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgICAgIGRlZmF1bHRWYWx1ZXMuaXNQYXJ0aWFsbHlDaGVja2VkLFxuICAgICAgZGVmYXVsdFZhbHVlcy5wb3NpdGlvbixcbiAgICAgIGRlZmF1bHRWYWx1ZXMuY2hpbGRyZW5cbiAgICApXG4gICk7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsICgpID0+IHtcbiAgICBpZiAoaXNEZWZhdWx0Q2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtpc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmlzRGVmYXVsdENoZWNrZWQpLnRvRXF1YWwoaXNEZWZhdWx0Q2hlY2tlZCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzRGVmYXVsdENoZWNrZWQ6ICR7ZGVmYXVsdFZhbHVlcy5pc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cob3V0cHV0LnByb3BzKCkpO1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNEZWZhdWx0Q2hlY2tlZCkudG9FcXVhbChcbiAgICAgICAgICBkZWZhdWx0VmFsdWVzLmlzRGVmYXVsdENoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKiBpZiAoY2hlY2tib3gucHJvcHMuaXNDaGVja2VkKSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNDaGVja2VkOiAke2NoZWNrYm94LnByb3BzLmlzQ2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNDaGVja2VkJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuaXNDaGVja2VkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZVxuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtkZWZhdWx0VmFsdWVzLmlzQ2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNDaGVja2VkJykpLnRvRXF1YWwoZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWQpO1xuICAgICAgfSk7XG5cbiAgICBpZiAoY2hlY2tib3gucHJvcHMuaXNEaXNhYmxlZCkge1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzRGlzYWJsZWQ6ICR7Y2hlY2tib3gucHJvcHMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEaXNhYmxlZCcpKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLmlzRGlzYWJsZWQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlXG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWQpO1xuICAgICAgfSk7XG5cbiAgICBpZiAoY2hlY2tib3gucHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkKSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNQYXJ0aWFsbHlDaGVja2VkOiAke2NoZWNrYm94LnByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoXG4gICAgICAgICAgY2hlY2tib3gucHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9IGVsc2VcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc1BhcnRpYWxseUNoZWNrZWQ6ICR7ZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZXMuaXNQYXJ0aWFsbHlDaGVja2VkXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgIGlmIChjaGVja2JveC5wcm9wcy5wb3NpdGlvbikge1xuICAgICAgaXQoYFNob3VsZCBoYXZlIHBvc2l0aW9uOiAke2NoZWNrYm94LnByb3BzLnBvc2l0aW9ufWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdwb3NpdGlvbicpKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLnBvc2l0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZVxuICAgICAgaXQoYFNob3VsZCBoYXZlIHBvc2l0aW9uOiAke2RlZmF1bHRWYWx1ZXMucG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwoZGVmYXVsdFZhbHVlcy5wb3NpdGlvbik7XG4gICAgICB9KTtcblxuICAgIGlmIChjaGVja2JveC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGNoaWxkcmVuOiAke2NoZWNrYm94LnByb3BzLmNoaWxkcmVufWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdjaGlsZHJlbicpKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZVxuICAgICAgaXQoYFNob3VsZCBoYXZlIGNoaWxkcmVuOiAke2RlZmF1bHRWYWx1ZXMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoZGVmYXVsdFZhbHVlcy5jaGlsZHJlbik7XG4gICAgICB9KTsqL1xuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=