{"version":3,"sources":["Checkbox.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isPartiallyChecked","position","children","output","tests","checkbox","describe","console","log","props","undefined","it","expect","prop","toEqual","defaultValues"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,kBAJuB,EAKvBC,QALuB,EAMvBC,QANuB,KAOpB;AACH,SACE,6BAAC,kBAAD;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,kBAAkB,EAAEG,kBAFtB;AAGE,IAAA,gBAAgB,EAAEF,gBAHpB;AAIE,IAAA,UAAU,EAAEC,UAJd;AAKE,IAAA,QAAQ,EAAEE,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGC,QAPH,CADF;AAWD,CAnBM;;;AAqBP,IAAIC,MAAM,GAAG,qBAAQP,SAAS,EAAjB,CAAb;;AAEO,MAAMQ,KAAK,GAAG,CAACC,QAAQ,GAAGT,SAAS,EAArB,KAA4B;AAC/CO,EAAAA,MAAM,GAAG,qBAAQE,QAAR,CAAT;AAEA,SAAOC,QAAQ,CAAC,UAAD,EAAa,MAAM;AAChC;;;;;;;;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,KAArB;;AACA,QAAIJ,QAAQ,CAACI,KAAT,CAAeX,gBAAf,KAAoCY,SAAxC,EAAmD;AACjDH,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAG,MAAAA,EAAE,CAAE,iCAAgCN,QAAQ,CAACI,KAAT,CAAeX,gBAAiB,EAAlE,EAAqE,MAAM;AAC3Ec,QAAAA,MAAM,CAACT,MAAM,CAACU,IAAP,CAAY,kBAAZ,CAAD,CAAN,CAAwCC,OAAxC,CACET,QAAQ,CAACI,KAAT,CAAeX,gBADjB;AAGD,OAJC,CAAF;AAKAS,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,KAAT,CAAeX,gBAA3B;AACD,KARD,MASEa,EAAE,CAAE,iCAAgCI,6BAAcjB,gBAAiB,EAAjE,EAAoE,MAAM;AAC1Ec,MAAAA,MAAM,CAACT,MAAM,CAACU,IAAP,CAAY,kBAAZ,CAAD,CAAN,CAAwCC,OAAxC,CACEC,6BAAcjB,gBADhB;AAGD,KAJC,CAAF;AAMF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCD,GAhEc,CAAf;AAiED,CApEM;;;AAsEPM,KAAK","sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nimport { defaultValues } from './defaultValues';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      isPartiallyChecked={isPartiallyChecked}\n      isDefaultChecked={isDefaultChecked}\n      isDisabled={isDisabled}\n      position={position}\n    >\n      {children}\n    </Checkbox>\n  );\n};\n\nlet output = shallow(Component());\n\nexport const tests = (checkbox = Component()) => {\n  output = shallow(checkbox);\n\n  return describe('Checkbox', () => {\n    /* if (checkbox.props.isChecked) {\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n    } else\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });*/\n    console.log(checkbox.props);\n    if (checkbox.props.isDefaultChecked !== undefined) {\n      console.log('zmrd');\n      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(\n          checkbox.props.isDefaultChecked\n        );\n      });\n      console.log(checkbox.props.isDefaultChecked);\n    } else\n      it(`Should have isDefaultChecked: ${defaultValues.isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n\n    /*if (checkbox.props.isDisabled) {\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n    } else\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n\n    if (checkbox.props.isPartiallyChecked) {\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n    } else\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n\n    if (checkbox.props.position) {\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n    } else\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n\n    if (checkbox.props.children) {\n      it(`Should have children: ${checkbox.props.children}`, () => {\n        expect(output.prop('children')).toEqual(checkbox.props.children);\n      });\n    } else\n      it(`Should have children: ${defaultValues.children}`, () => {\n        expect(output.prop('children')).toEqual(defaultValues.children);\n      });*/\n  });\n};\n\ntests();\n"]}