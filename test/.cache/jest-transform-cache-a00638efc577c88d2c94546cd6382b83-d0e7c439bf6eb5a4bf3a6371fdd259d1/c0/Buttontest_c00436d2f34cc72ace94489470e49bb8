320e8d1dddd26f2206483ebbc6e403ab
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _defaultValues = require("../../constants/defaultValues");

var _Button = require("./Button");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Button/Button.test.jsx";
const mockClick = jest.fn();

const Component = (isChecked, isDefaultChecked, isDisabled, isFullWidth, isRound, size, type, value) => {
  return _react.default.createElement(_Button.Button, {
    isDisabled: isDisabled,
    isFullWidth: isFullWidth,
    isRound: isRound,
    size: size,
    type: type,
    onClick: mockClick,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18
    },
    __self: void 0
  }, value);
};

exports.Component = Component;
let output;

const tests = button => {
  if (button) {
    output = (0, _enzyme.mount)(button);
  } else {
    output = (0, _enzyme.mount)(Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isFullWidth, _defaultValues.defaultValues.isRound, _defaultValues.defaultValues.size, _defaultValues.defaultValues.type, _defaultValues.defaultValues.value));
  }

  return describe('Checkbox', () => {
    if (checkbox) {
      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {
        expect(output.props().isDefaultChecked).toEqual(checkbox.props.isDefaultChecked);
      });
      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
      });
      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
      });
      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(checkbox.props.isPartiallyChecked);
      });
      it(`Should have position: ${checkbox.props.position}`, () => {
        expect(output.prop('position')).toEqual(checkbox.props.position);
      });
      it(`Should have children: ${checkbox.props.children}`, () => {
        expect(output.prop('children')).toEqual(checkbox.props.children);
      });
    } else {
      it(`Should have isDefaultChecked: ${_defaultValues.defaultValues.isDefaultChecked}`, () => {
        expect(output.props().isDefaultChecked).toEqual(_defaultValues.defaultValues.isDefaultChecked);
      });
      it(`Should have isChecked: ${_defaultValues.defaultValues.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(_defaultValues.defaultValues.isChecked);
      });
      it(`Should have isDisabled: ${_defaultValues.defaultValues.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(_defaultValues.defaultValues.isDisabled);
      });
      it(`Should have isPartiallyChecked: ${_defaultValues.defaultValues.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(_defaultValues.defaultValues.isPartiallyChecked);
      });
      it(`Should have position: ${_defaultValues.defaultValues.position}`, () => {
        expect(output.prop('position')).toEqual(_defaultValues.defaultValues.position);
      });
      it(`Should have children: ${_defaultValues.defaultValues.children}`, () => {
        expect(output.prop('children')).toEqual(_defaultValues.defaultValues.children);
      });
    }
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,