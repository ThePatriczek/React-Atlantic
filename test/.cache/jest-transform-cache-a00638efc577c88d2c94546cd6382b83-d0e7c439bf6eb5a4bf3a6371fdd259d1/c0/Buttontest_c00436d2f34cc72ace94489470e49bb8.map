{"version":3,"sources":["Button.test.jsx"],"names":["mockClick","jest","fn","Component","isChecked","isDefaultChecked","isDisabled","isFullWidth","isRound","size","type","value","output","tests","button","defaultValues","describe","checkbox","it","props","expect","toEqual","prop","isPartiallyChecked","position","children"],"mappings":"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","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { Button } from './Button';\n\nconst mockClick = jest.fn();\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={mockClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nlet output;\n\nexport const tests = button => {\n  if (button) {\n    output = mount(button);\n  } else {\n    output = mount(\n      Component(\n        defaultValues.isChecked,\n        defaultValues.isDefaultChecked,\n        defaultValues.isDisabled,\n        defaultValues.isFullWidth,\n        defaultValues.isRound,\n        defaultValues.size,\n        defaultValues.type,\n        defaultValues.value\n      )\n    );\n  }\n\n  return describe('Checkbox', () => {\n    if (checkbox) {\n      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {\n        expect(output.props().isDefaultChecked).toEqual(\n          checkbox.props.isDefaultChecked\n        );\n      });\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n      it(`Should have children: ${checkbox.props.children}`, () => {\n        expect(output.prop('children')).toEqual(checkbox.props.children);\n      });\n    } else {\n      it(`Should have isDefaultChecked: ${defaultValues.isDefaultChecked}`, () => {\n        expect(output.props().isDefaultChecked).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });\n\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n      it(`Should have children: ${defaultValues.children}`, () => {\n        expect(output.prop('children')).toEqual(defaultValues.children);\n      });\n    }\n  });\n};\n\ntests();\n"]}