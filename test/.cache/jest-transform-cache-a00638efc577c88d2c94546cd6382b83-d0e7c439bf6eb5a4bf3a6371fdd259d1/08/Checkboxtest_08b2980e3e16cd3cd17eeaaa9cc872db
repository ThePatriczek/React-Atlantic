c9bec3304efd5a4c40cc6b3e7ebd5478
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _defaultValues = require("./defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (checkbox, isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  output = (0, _enzyme.mount)(Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children));

  if (isDefaultChecked !== undefined) {
    output = (0, _enzyme.mount)(checkbox);
  }

  return describe('Checkbox', () => {
    if (checkbox) {
      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {
        expect(output.props().isDefaultChecked).toEqual(checkbox.props.isDefaultChecked);
      });
      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
      });
      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
      });
      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(checkbox.props.isPartiallyChecked);
      });
      it(`Should have position: ${checkbox.props.position}`, () => {
        expect(output.prop('position')).toEqual(checkbox.props.position);
      });
      it(`Should have children: ${checkbox.props.children}`, () => {
        expect(output.prop('children')).toEqual(checkbox.props.children);
      });
    } else {
      it(`Should have isDefaultChecked: ${_defaultValues.defaultValues.isDefaultChecked}`, () => {
        expect(output.props().isDefaultChecked).toEqual(_defaultValues.defaultValues.isDefaultChecked);
      });
      it(`Should have isChecked: ${_defaultValues.defaultValues.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(_defaultValues.defaultValues.isChecked);
      });
      it(`Should have isDisabled: ${_defaultValues.defaultValues.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(_defaultValues.defaultValues.isDisabled);
      });
      it(`Should have isPartiallyChecked: ${_defaultValues.defaultValues.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(_defaultValues.defaultValues.isPartiallyChecked);
      });
      it(`Should have position: ${_defaultValues.defaultValues.position}`, () => {
        expect(output.prop('position')).toEqual(_defaultValues.defaultValues.position);
      });
      it(`Should have children: ${_defaultValues.defaultValues.children}`, () => {
        expect(output.prop('children')).toEqual(_defaultValues.defaultValues.children);
      });
    }
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsInRlc3RzIiwiY2hlY2tib3giLCJkZWZhdWx0VmFsdWVzIiwidW5kZWZpbmVkIiwiZGVzY3JpYmUiLCJpdCIsInByb3BzIiwiZXhwZWN0IiwidG9FcXVhbCIsInByb3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQ3ZCQyxTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVMLFNBRGI7QUFFRSxJQUFBLGtCQUFrQixFQUFFRyxrQkFGdEI7QUFHRSxJQUFBLGdCQUFnQixFQUFFRixnQkFIcEI7QUFJRSxJQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT0dDLFFBUEgsQ0FERjtBQVdELENBbkJNOzs7QUFxQlAsSUFBSUMsTUFBSjs7QUFFTyxNQUFNQyxLQUFLLEdBQUcsQ0FDbkJDLFFBRG1CLEVBRW5CUixTQUZtQixFQUduQkMsZ0JBSG1CLEVBSW5CQyxVQUptQixFQUtuQkMsa0JBTG1CLEVBTW5CQyxRQU5tQixFQU9uQkMsUUFQbUIsS0FRaEI7QUFDSEMsRUFBQUEsTUFBTSxHQUFHLG1CQUNQUCxTQUFTLENBQ1BVLDZCQUFjVCxTQURQLEVBRVBTLDZCQUFjUixnQkFGUCxFQUdQUSw2QkFBY1AsVUFIUCxFQUlQTyw2QkFBY04sa0JBSlAsRUFLUE0sNkJBQWNMLFFBTFAsRUFN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LENBQVksWUFBWixDQUFELENBQU4sQ0FBa0NELE9BQWxDLENBQTBDTiw2QkFBY1AsVUFBeEQ7QUFDRCxPQUZDLENBQUY7QUFHQVUsTUFBQUEsRUFBRSxDQUFFLG1DQUFrQ0gsNkJBQWNOLGtCQUFtQixFQUFyRSxFQUF3RSxNQUFNO0FBQzlFVyxRQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLG9CQUFaLENBQUQsQ0FBTixDQUEwQ0QsT0FBMUMsQ0FDRU4sNkJBQWNOLGtCQURoQjtBQUdELE9BSkMsQ0FBRjtBQUtBUyxNQUFBQSxFQUFFLENBQUUseUJBQXdCSCw2QkFBY0wsUUFBUyxFQUFqRCxFQUFvRCxNQUFNO0FBQzFEVSxRQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDRCxPQUFoQyxDQUF3Q04sNkJBQWNMLFFBQXREO0FBQ0QsT0FGQyxDQUFGO0FBR0FRLE1BQUFBLEVBQUUsQ0FBRSx5QkFBd0JILDZCQUFjSixRQUFTLEVBQWpELEVBQW9ELE1BQU07QUFDMURTLFFBQUFBLE1BQU0sQ0FBQ1IsTUFBTSxDQUFDVSxJQUFQLENBQVksVUFBWixDQUFELENBQU4sQ0FBZ0NELE9BQWhDLENBQXdDTiw2QkFBY0osUUFBdEQ7QUFDRCxPQUZDLENBQUY7QUFHRDtBQUNGLEdBakRjLENBQWY7QUFrREQsQ0F4RU07OztBQTBFUEUsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vdW50LCBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuaW1wb3J0IHsgZGVmYXVsdFZhbHVlcyB9IGZyb20gJy4vZGVmYXVsdFZhbHVlcyc7XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoXG4gIGlzQ2hlY2tlZCxcbiAgaXNEZWZhdWx0Q2hlY2tlZCxcbiAgaXNEaXNhYmxlZCxcbiAgaXNQYXJ0aWFsbHlDaGVja2VkLFxuICBwb3NpdGlvbixcbiAgY2hpbGRyZW5cbikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxDaGVja2JveFxuICAgICAgaXNDaGVja2VkPXtpc0NoZWNrZWR9XG4gICAgICBpc1BhcnRpYWxseUNoZWNrZWQ9e2lzUGFydGlhbGx5Q2hlY2tlZH1cbiAgICAgIGlzRGVmYXVsdENoZWNrZWQ9e2lzRGVmYXVsdENoZWNrZWR9XG4gICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0NoZWNrYm94PlxuICApO1xufTtcblxubGV0IG91dHB1dDtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBjaGVja2JveCxcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uLFxuICBjaGlsZHJlblxuKSA9PiB7XG4gIG91dHB1dCA9IG1vdW50KFxuICAgIENvbXBvbmVudChcbiAgICAgIGRlZmF1bHRWYWx1ZXMuaXNDaGVja2VkLFxuICAgICAgZGVmYXVsdFZhbHVlcy5pc0RlZmF1bHRDaGVja2VkLFxuICAgICAgZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkLFxuICAgICAgZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgICBkZWZhdWx0VmFsdWVzLnBvc2l0aW9uLFxuICAgICAgZGVmYXVsdFZhbHVlcy5jaGlsZHJlblxuICAgIClcbiAgKTtcbiAgaWYgKGlzRGVmYXVsdENoZWNrZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIG91dHB1dCA9IG1vdW50KGNoZWNrYm94KTtcbiAgfVxuICByZXR1cm4gZGVzY3JpYmUoJ0NoZWNrYm94JywgKCkgPT4ge1xuICAgIGlmIChjaGVja2JveCkge1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzRGVmYXVsdENoZWNrZWQ6ICR7Y2hlY2tib3gucHJvcHMuaXNEZWZhdWx0Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0RlZmF1bHRDaGVja2VkKS50b0VxdWFsKFxuICAgICAgICAgIGNoZWNrYm94LnByb3BzLmlzRGVmYXVsdENoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLmlzQ2hlY2tlZCk7XG4gICAgICB9KTtcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2NoZWNrYm94LnByb3BzLmlzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChjaGVja2JveC5wcm9wcy5pc0Rpc2FibGVkKTtcbiAgICAgIH0pO1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKFxuICAgICAgICAgIGNoZWNrYm94LnByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7Y2hlY2tib3gucHJvcHMucG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMucG9zaXRpb24pO1xuICAgICAgfSk7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgY2hpbGRyZW46ICR7Y2hlY2tib3gucHJvcHMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2RlZmF1bHRWYWx1ZXMuaXNEZWZhdWx0Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0RlZmF1bHRDaGVja2VkKS50b0VxdWFsKFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZXMuaXNEZWZhdWx0Q2hlY2tlZFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNDaGVja2VkOiAke2RlZmF1bHRWYWx1ZXMuaXNDaGVja2VkfWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0NoZWNrZWQnKSkudG9FcXVhbChkZWZhdWx0VmFsdWVzLmlzQ2hlY2tlZCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzRGlzYWJsZWQ6ICR7ZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkfWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkKTtcbiAgICAgIH0pO1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtkZWZhdWx0VmFsdWVzLmlzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoXG4gICAgICAgICAgZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgaXQoYFNob3VsZCBoYXZlIHBvc2l0aW9uOiAke2RlZmF1bHRWYWx1ZXMucG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwoZGVmYXVsdFZhbHVlcy5wb3NpdGlvbik7XG4gICAgICB9KTtcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtkZWZhdWx0VmFsdWVzLmNoaWxkcmVufWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdjaGlsZHJlbicpKS50b0VxdWFsKGRlZmF1bHRWYWx1ZXMuY2hpbGRyZW4pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=