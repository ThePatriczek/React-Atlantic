{"version":3,"sources":["Button.test.jsx"],"names":["onClick","jest","fn","Component","isDisabled","isFullWidth","isRound","size","type","value","tests","button","defaultValues","output","props","text","toEqual","mockClick","setProps","simulate","toHaveBeenCalled","not","prop"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMA,OAAO,GAAGC,IAAI,CAACC,EAAL,EAAhB;;AACO,MAAMC,SAAS,GAAG,CACvBC,UADuB,EAEvBC,WAFuB,EAGvBC,OAHuB,EAIvBC,IAJuB,EAKvBC,IALuB,EAMvBC,KANuB,KAOpB;AACH,SACE,6BAAC,cAAD;AACE,IAAA,UAAU,EAAEL,UADd;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,IAAI,EAAEC,IALR;AAME,IAAA,OAAO,EAAER,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGS,KARH,CADF;AAYD,CApBM;;;;AAsBA,MAAMC,KAAK,GAAG,CACnBC,MAAM,GAAGR,SAAS,CAChBS,6BAAcR,UADE,EAEhBQ,6BAAcP,WAFE,EAGhBO,6BAAcN,OAHE,EAIhBM,6BAAcL,IAJE,EAKhBK,6BAAcJ,IALE,EAMhBI,6BAAcH,KANE,CADC,KAShB;AACH,MAAII,MAAM,GAAG,mBAAMF,MAAN,CAAb;AAEA,SAAO,4CAAS,QAAT,EAAmB,MAAM;AAC9B,0CAAI,+BAA8BA,MAAM,CAACG,KAAP,CAAaL,KAAM,EAArD,EAAwD,MACtD,qBAAOI,MAAM,CAACE,IAAP,EAAP,EAAsBC,OAAtB,CAA8BL,MAAM,CAACG,KAAP,CAAaL,KAA3C,CADF;AAGA,0CAAI,6DAAJ,EAAkE,MAAM;AACtE,YAAMQ,SAAS,GAAGhB,IAAI,CAACC,EAAL,EAAlB;AAEAW,MAAAA,MAAM,CAACK,QAAP,CAAgB;AACdlB,QAAAA,OAAO,EAAEiB;AADK,OAAhB;AAIAJ,MAAAA,MAAM,CAACM,QAAP,CAAgB,OAAhB;;AAEA,UAAI,CAACR,MAAM,CAACG,KAAP,CAAaV,UAAlB,EAA8B;AAC5B,6BAAOO,MAAM,CAACG,KAAP,CAAad,OAApB,EAA6BoB,gBAA7B;AACD,OAFD,MAEO;AACL,6BAAOT,MAAM,CAACG,KAAP,CAAad,OAApB,EAA6BqB,GAA7B,CAAiCD,gBAAjC;AACD;AACF,KAdD;AAgBA,0CAAI,2BAA0BT,MAAM,CAACG,KAAP,CAAaV,UAAW,EAAtD,EAAyD,MAAM;AAC7D,2BAAOS,MAAM,CAACS,IAAP,CAAY,YAAZ,CAAP,EAAkCN,OAAlC,CAA0CL,MAAM,CAACG,KAAP,CAAaV,UAAvD;AACD,KAFD;AAIA,0CAAI,wBAAuBO,MAAM,CAACG,KAAP,CAAaR,OAAQ,EAAhD,EAAmD,MAAM;AACvD,2BAAOO,MAAM,CAACS,IAAP,CAAY,SAAZ,CAAP,EAA+BN,OAA/B,CAAuCL,MAAM,CAACG,KAAP,CAAaR,OAApD;AACD,KAFD;AAIA,0CAAI,4BAA2BK,MAAM,CAACG,KAAP,CAAaT,WAAY,EAAxD,EAA2D,MAAM;AAC/D,2BAAOQ,MAAM,CAACS,IAAP,CAAY,aAAZ,CAAP,EAAmCN,OAAnC,CAA2CL,MAAM,CAACG,KAAP,CAAaT,WAAxD;AACD,KAFD;AAIA,0CAAI,qBAAoBM,MAAM,CAACG,KAAP,CAAaN,IAAK,EAA1C,EAA6C,MAAM;AACjD,2BAAOK,MAAM,CAACS,IAAP,CAAY,MAAZ,CAAP,EAA4BN,OAA5B,CAAoCL,MAAM,CAACG,KAAP,CAAaN,IAAjD;AACD,KAFD;AAIA,0CAAI,qBAAoBG,MAAM,CAACG,KAAP,CAAaP,IAAK,EAA1C,EAA6C,MAAM;AACjD,2BAAOM,MAAM,CAACS,IAAP,CAAY,MAAZ,CAAP,EAA4BN,OAA5B,CAAoCL,MAAM,CAACG,KAAP,CAAaP,IAAjD;AACD,KAFD;AAGD,GAvCM,CAAP;AAwCD,CApDM;;;AAsDPG,KAAK","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { Button } from './Button';\nimport { describe, it } from 'storybook-addon-specifications';\nimport expect from 'expect';\n\nconst onClick = jest.fn();\nexport const Component = (\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={onClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nexport const tests = (\n  button = Component(\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.value\n  )\n) => {\n  let output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have the right text: ${button.props.value}`, () =>\n      expect(output.text()).toEqual(button.props.value));\n\n    it(`onClick should have been called if Button is not disabled: `, () => {\n      const mockClick = jest.fn();\n\n      output.setProps({\n        onClick: mockClick\n      });\n\n      output.simulate('click');\n\n      if (!button.props.isDisabled) {\n        expect(button.props.onClick).toHaveBeenCalled();\n      } else {\n        expect(button.props.onClick).not.toHaveBeenCalled();\n      }\n    });\n\n    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {\n      expect(output.prop('isDisabled')).toEqual(button.props.isDisabled);\n    });\n\n    it(`Should have isRound: ${button.props.isRound}`, () => {\n      expect(output.prop('isRound')).toEqual(button.props.isRound);\n    });\n\n    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {\n      expect(output.prop('isFullWidth')).toEqual(button.props.isFullWidth);\n    });\n\n    it(`Should have type: ${button.props.type}`, () => {\n      expect(output.prop('type')).toEqual(button.props.type);\n    });\n\n    it(`Should have size: ${button.props.size}`, () => {\n      expect(output.prop('size')).toEqual(button.props.size);\n    });\n  });\n};\n\ntests();\n"]}