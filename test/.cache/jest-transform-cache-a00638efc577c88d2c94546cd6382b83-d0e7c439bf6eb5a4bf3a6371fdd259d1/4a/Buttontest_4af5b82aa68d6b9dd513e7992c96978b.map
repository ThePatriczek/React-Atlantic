{"version":3,"sources":["Button.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isFullWidth","isRound","size","type","value","onClick","output","tests","button","defaultValues","props","text","toEqual","mockClick","jest","fn","setProps","simulate","toHaveBeenCalled","not","prop"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,WAJuB,EAKvBC,OALuB,EAMvBC,IANuB,EAOvBC,IAPuB,EAQvBC,KARuB,EASvBC,OATuB,KAUpB;AACH,SACE,6BAAC,cAAD;AACE,IAAA,UAAU,EAAEN,UADd;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,IAAI,EAAEC,IALR;AAME,IAAA,OAAO,EAAEE,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGD,KARH,CADF;AAYD,CAvBM;;;AAyBP,IAAIE,MAAJ;;AAEO,MAAMC,KAAK,GAAG,CACnBC,MAAM,GAAGZ,SAAS,CAChBa,6BAAcZ,SADE,EAEhBY,6BAAcX,gBAFE,EAGhBW,6BAAcV,UAHE,EAIhBU,6BAAcT,WAJE,EAKhBS,6BAAcR,OALE,EAMhBQ,6BAAcP,IANE,EAOhBO,6BAAcN,IAPE,EAQhBM,6BAAcL,KARE,CADC,KAWhB;AACHE,EAAAA,MAAM,GAAG,mBAAME,MAAN,CAAT;AAEA,SAAO,4CAAS,QAAT,EAAmB,MAAM;AAC9B,0CAAI,+BAA8BA,MAAM,CAACE,KAAP,CAAaN,KAAM,EAArD,EAAwD,MACtD,qBAAOE,MAAM,CAACK,IAAP,EAAP,EAAsBC,OAAtB,CAA8BJ,MAAM,CAACE,KAAP,CAAaN,KAA3C,CADF;AAGA,0CAAI,2DAAJ,EAAgE,MAAM;AACpE,YAAMS,SAAS,GAAGC,IAAI,CAACC,EAAL,EAAlB;AAEAT,MAAAA,MAAM,CAACU,QAAP,CAAgB;AACdX,QAAAA,OAAO,EAAEQ;AADK,OAAhB;AAIAP,MAAAA,MAAM,CAACW,QAAP,CAAgB,OAAhB;;AAEA,UAAI,CAAClB,UAAL,EAAiB;AACf,6BAAOc,SAAP,EAAkBK,gBAAlB;AACD,OAFD,MAEO;AACL,6BAAOL,SAAP,EAAkBM,GAAlB,CAAsBD,gBAAtB;AACD;AACF,KAdD;AAgBA,0CAAI,2BAA0BnB,UAAW,EAAzC,EAA4C,MAAM;AAChD,2BAAOO,MAAM,CAACc,IAAP,CAAY,YAAZ,CAAP,EAAkCR,OAAlC,CAA0Cb,UAA1C;AACD,KAFD;AAIA,0CAAI,wBAAuBE,OAAQ,EAAnC,EAAsC,MAAM;AAC1C,2BAAOK,MAAM,CAACc,IAAP,CAAY,SAAZ,CAAP,EAA+BR,OAA/B,CAAuCX,OAAvC;AACD,KAFD;AAIA,0CAAI,4BAA2BD,WAAY,EAA3C,EAA8C,MAAM;AAClD,2BAAOM,MAAM,CAACc,IAAP,CAAY,aAAZ,CAAP,EAAmCR,OAAnC,CAA2CZ,WAA3C;AACD,KAFD;AAIA,0CAAI,qBAAoBG,IAAK,EAA7B,EAAgC,MAAM;AACpC,2BAAOG,MAAM,CAACc,IAAP,CAAY,MAAZ,CAAP,EAA4BR,OAA5B,CAAoCT,IAApC;AACD,KAFD;AAIA,0CAAI,qBAAoBD,IAAK,EAA7B,EAAgC,MAAM;AACpC,2BAAOI,MAAM,CAACc,IAAP,CAAY,MAAZ,CAAP,EAA4BR,OAA5B,CAAoCV,IAApC;AACD,KAFD;AAGD,GAvCM,CAAP;AAwCD,CAtDM;;;AAwDPK,KAAK","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { Button } from './Button';\nimport { describe, it } from 'storybook-addon-specifications';\nimport expect from 'expect';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value,\n  onClick\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={onClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nlet output;\n\nexport const tests = (\n  button = Component(\n    defaultValues.isChecked,\n    defaultValues.isDefaultChecked,\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.value\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have the right text: ${button.props.value}`, () =>\n      expect(output.text()).toEqual(button.props.value));\n\n    it(`onClick should have been called if Button is not disabled`, () => {\n      const mockClick = jest.fn();\n\n      output.setProps({\n        onClick: mockClick\n      });\n\n      output.simulate('click');\n\n      if (!isDisabled) {\n        expect(mockClick).toHaveBeenCalled();\n      } else {\n        expect(mockClick).not.toHaveBeenCalled();\n      }\n    });\n\n    it(`Should have isDisabled: ${isDisabled}`, () => {\n      expect(output.prop('isDisabled')).toEqual(isDisabled);\n    });\n\n    it(`Should have isRound: ${isRound}`, () => {\n      expect(output.prop('isRound')).toEqual(isRound);\n    });\n\n    it(`Should have isFullWidth: ${isFullWidth}`, () => {\n      expect(output.prop('isFullWidth')).toEqual(isFullWidth);\n    });\n\n    it(`Should have type: ${type}`, () => {\n      expect(output.prop('type')).toEqual(type);\n    });\n\n    it(`Should have size: ${size}`, () => {\n      expect(output.prop('size')).toEqual(size);\n    });\n  });\n};\n\ntests();\n"]}