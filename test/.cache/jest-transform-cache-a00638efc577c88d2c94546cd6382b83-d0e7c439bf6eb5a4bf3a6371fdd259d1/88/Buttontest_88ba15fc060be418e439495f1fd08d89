25a4e6de13faa5d46aa26c3dd6ccb2ed
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _defaultValues = require("../../constants/defaultValues");

var _Button = require("./Button");

var _storybookAddonSpecifications = require("storybook-addon-specifications");

var _expect = _interopRequireDefault(require("expect"));

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Button/Button.test.jsx";

const Component = (isDisabled, isFullWidth, isRound, size, type, value, onClick) => {
  return _react.default.createElement(_Button.Button, {
    isDisabled: isDisabled,
    isFullWidth: isFullWidth,
    isRound: isRound,
    size: size,
    type: type,
    onClick: onClick,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18
    },
    __self: void 0
  }, value);
};

exports.Component = Component;
let output;
/*export const tests = (
  button = Component(
    defaultValues.isDisabled,
    defaultValues.isFullWidth,
    defaultValues.isRound,
    defaultValues.size,
    defaultValues.type,
    defaultValues.value
  )
) => {
  output = mount(button);

  return describe('Button', () => {
    it(`Should have the right text: ${button.props.value}`, () => {
      expect(output.props().value).toEqual(button.props.value);
    });

    /!* it(`onClick should have been called if Button is not disabled: `, () => {
      const mockClick = jest.fn();
      output.setProps({
        onClick: mockClick
      });
      output.simulate('click');

      if (!button.props.isDisabled) {
        expect(output.props().onClick).toHaveBeenCalled();
      } else {
        expect(output.props().onClick).not.toHaveBeenCalled();
      }
    });

    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(button.props.isDisabled);
    });

    it(`Should have isRound: ${button.props.isRound}`, () => {
      expect(output.prop('isRound')).toEqual(button.props.isRound);
    });

    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {
      expect(output.prop('isFullWidth')).toEqual(button.props.isFullWidth);
    });

    it(`Should have type: ${button.props.type}`, () => {
      expect(output.prop('type')).toEqual(button.props.type);
    });

    it(`Should have size: ${button.props.size}`, () => {
      expect(output.prop('size')).toEqual(button.props.size);
    });*!/
  });
};

tests();*/

const tests = (button = Component(_defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isFullWidth, _defaultValues.defaultValues.isRound, _defaultValues.defaultValues.size, _defaultValues.defaultValues.type, _defaultValues.defaultValues.value)) => {
  output = (0, _enzyme.mount)(button);
  return (0, _storybookAddonSpecifications.describe)('Checkbox', () => {
    (0, _storybookAddonSpecifications.it)(`Should have isDefaultChecked: ${button.props.value}`, () => {
      (0, _expect.default)(output.props().value).toEqual(button.props.value);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LmpzeCJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJpc0Rpc2FibGVkIiwiaXNGdWxsV2lkdGgiLCJpc1JvdW5kIiwic2l6ZSIsInR5cGUiLCJ2YWx1ZSIsIm9uQ2xpY2siLCJvdXRwdXQiLCJ0ZXN0cyIsImJ1dHRvbiIsImRlZmF1bHRWYWx1ZXMiLCJwcm9wcyIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQ3ZCQyxVQUR1QixFQUV2QkMsV0FGdUIsRUFHdkJDLE9BSHVCLEVBSXZCQyxJQUp1QixFQUt2QkMsSUFMdUIsRUFNdkJDLEtBTnVCLEVBT3ZCQyxPQVB1QixLQVFwQjtBQUNILFNBQ0UsNkJBQUMsY0FBRDtBQUNFLElBQUEsVUFBVSxFQUFFTixVQURkO0FBRUUsSUFBQSxXQUFXLEVBQUVDLFdBRmY7QUFHRSxJQUFBLE9BQU8sRUFBRUMsT0FIWDtBQUlFLElBQUEsSUFBSSxFQUFFQyxJQUpSO0FBS0UsSUFBQSxJQUFJLEVBQUVDLElBTFI7QUFNRSxJQUFBLE9BQU8sRUFBRUUsT0FOWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQVFHRCxLQVJILENBREY7QUFZRCxDQXJCTTs7O0FBdUJQLElBQUlFLE1BQUo7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVETyxNQUFNQyxLQUFLLEdBQUcsQ0FDbkJDLE1BQU0sR0FBR1YsU0FBUyxDQUNoQlcsNkJBQWNWLFVBREUsRUFFaEJVLDZCQUFjVCxXQUZFLEVBR2hCUyw2QkFBY1IsT0FIRSxFQUloQlEsNkJBQWNQLElBSkUsRUFLaEJPLDZCQUFjTixJQUxFLEVBTWhCTSw2QkFBY0wsS0FORSxDQURDLEtBU2hCO0FBQ0hFLEVBQUFBLE1BQU0sR0FBRyxtQkFBTUUsTUFBTixDQUFUO0FBRUEsU0FBTyw0Q0FBUyxVQUFULEVBQXFCLE1BQU07QUFDaEMsMENBQUksaUNBQWdDQSxNQUFNLENBQUNFLEtBQVAsQ0FBYU4sS0FBTSxFQUF2RCxFQUEwRCxNQUFNO0FBQzlELDJCQUFPRSxNQUFNLENBQUNJLEtBQVAsR0FBZU4sS0FBdEIsRUFBNkJPLE9BQTdCLENBQXFDSCxNQUFNLENBQUNFLEtBQVAsQ0FBYU4sS0FBbEQ7QUFDRCxLQUZEO0FBR0QsR0FKTSxDQUFQO0FBS0QsQ0FqQk07OztBQW1CUEcsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vdW50LCBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZhdWx0VmFsdWVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2RlZmF1bHRWYWx1ZXMnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9CdXR0b24nO1xuaW1wb3J0IHsgZGVzY3JpYmUsIGl0IH0gZnJvbSAnc3Rvcnlib29rLWFkZG9uLXNwZWNpZmljYXRpb25zJztcbmltcG9ydCBleHBlY3QgZnJvbSAnZXhwZWN0JztcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChcbiAgaXNEaXNhYmxlZCxcbiAgaXNGdWxsV2lkdGgsXG4gIGlzUm91bmQsXG4gIHNpemUsXG4gIHR5cGUsXG4gIHZhbHVlLFxuICBvbkNsaWNrXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgaXNGdWxsV2lkdGg9e2lzRnVsbFdpZHRofVxuICAgICAgaXNSb3VuZD17aXNSb3VuZH1cbiAgICAgIHNpemU9e3NpemV9XG4gICAgICB0eXBlPXt0eXBlfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICA+XG4gICAgICB7dmFsdWV9XG4gICAgPC9CdXR0b24+XG4gICk7XG59O1xuXG5sZXQgb3V0cHV0O1xuLypleHBvcnQgY29uc3QgdGVzdHMgPSAoXG4gIGJ1dHRvbiA9IENvbXBvbmVudChcbiAgICBkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5pc0Z1bGxXaWR0aCxcbiAgICBkZWZhdWx0VmFsdWVzLmlzUm91bmQsXG4gICAgZGVmYXVsdFZhbHVlcy5zaXplLFxuICAgIGRlZmF1bHRWYWx1ZXMudHlwZSxcbiAgICBkZWZhdWx0VmFsdWVzLnZhbHVlXG4gIClcbikgPT4ge1xuICBvdXRwdXQgPSBtb3VudChidXR0b24pO1xuXG4gIHJldHVybiBkZXNjcmliZSgnQnV0dG9uJywgKCkgPT4ge1xuICAgIGl0KGBTaG91bGQgaGF2ZSB0aGUgcmlnaHQgdGV4dDogJHtidXR0b24ucHJvcHMudmFsdWV9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLnZhbHVlKS50b0VxdWFsKGJ1dHRvbi5wcm9wcy52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvISogaXQoYG9uQ2xpY2sgc2hvdWxkIGhhdmUgYmVlbiBjYWxsZWQgaWYgQnV0dG9uIGlzIG5vdCBkaXNhYmxlZDogYCwgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0NsaWNrID0gamVzdC5mbigpO1xuICAgICAgb3V0cHV0LnNldFByb3BzKHtcbiAgICAgICAgb25DbGljazogbW9ja0NsaWNrXG4gICAgICB9KTtcbiAgICAgIG91dHB1dC5zaW11bGF0ZSgnY2xpY2snKTtcblxuICAgICAgaWYgKCFidXR0b24ucHJvcHMuaXNEaXNhYmxlZCkge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkub25DbGljaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLm9uQ2xpY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtidXR0b24ucHJvcHMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChidXR0b24ucHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNSb3VuZDogJHtidXR0b24ucHJvcHMuaXNSb3VuZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUm91bmQnKSkudG9FcXVhbChidXR0b24ucHJvcHMuaXNSb3VuZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNGdWxsV2lkdGg6ICR7YnV0dG9uLnByb3BzLmlzRnVsbFdpZHRofWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNGdWxsV2lkdGgnKSkudG9FcXVhbChidXR0b24ucHJvcHMuaXNGdWxsV2lkdGgpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIHR5cGU6ICR7YnV0dG9uLnByb3BzLnR5cGV9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCd0eXBlJykpLnRvRXF1YWwoYnV0dG9uLnByb3BzLnR5cGUpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIHNpemU6ICR7YnV0dG9uLnByb3BzLnNpemV9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdzaXplJykpLnRvRXF1YWwoYnV0dG9uLnByb3BzLnNpemUpO1xuICAgIH0pOyohL1xuICB9KTtcbn07XG5cbnRlc3RzKCk7Ki9cblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBidXR0b24gPSBDb21wb25lbnQoXG4gICAgZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNGdWxsV2lkdGgsXG4gICAgZGVmYXVsdFZhbHVlcy5pc1JvdW5kLFxuICAgIGRlZmF1bHRWYWx1ZXMuc2l6ZSxcbiAgICBkZWZhdWx0VmFsdWVzLnR5cGUsXG4gICAgZGVmYXVsdFZhbHVlcy52YWx1ZVxuICApXG4pID0+IHtcbiAgb3V0cHV0ID0gbW91bnQoYnV0dG9uKTtcblxuICByZXR1cm4gZGVzY3JpYmUoJ0NoZWNrYm94JywgKCkgPT4ge1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2J1dHRvbi5wcm9wcy52YWx1ZX1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkudmFsdWUpLnRvRXF1YWwoYnV0dG9uLnByb3BzLnZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19