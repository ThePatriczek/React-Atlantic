{"version":3,"sources":["Button.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isFullWidth","isRound","size","type","value","onClick","output","tests","button","defaultValues","props","text","toEqual","simulate","toHaveBeenCalled","not","prop"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,WAJuB,EAKvBC,OALuB,EAMvBC,IANuB,EAOvBC,IAPuB,EAQvBC,KARuB,EASvBC,OATuB,KAUpB;AACH,SACE,6BAAC,cAAD;AACE,IAAA,UAAU,EAAEN,UADd;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,IAAI,EAAEC,IALR;AAME,IAAA,OAAO,EAAEE,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGD,KARH,CADF;AAYD,CAvBM;;;AAyBP,IAAIE,MAAJ;;AAEO,MAAMC,KAAK,GAAG,CACnBC,MAAM,GAAGZ,SAAS,CAChBa,6BAAcZ,SADE,EAEhBY,6BAAcX,gBAFE,EAGhBW,6BAAcV,UAHE,EAIhBU,6BAAcT,WAJE,EAKhBS,6BAAcR,OALE,EAMhBQ,6BAAcP,IANE,EAOhBO,6BAAcN,IAPE,EAQhBM,6BAAcL,KARE,CADC,KAWhB;AACHE,EAAAA,MAAM,GAAG,mBAAME,MAAN,CAAT;AAEA,SAAO,4CAAS,QAAT,EAAmB,MAAM;AAC9B,0CAAI,+BAA8BA,MAAM,CAACE,KAAP,CAAaN,KAAM,EAArD,EAAwD,MACtD,qBAAOE,MAAM,CAACK,IAAP,EAAP,EAAsBC,OAAtB,CAA8BJ,MAAM,CAACE,KAAP,CAAaN,KAA3C,CADF;AAGA,0CAAI,2DAAJ,EAAgE,MAAM;AACpEE,MAAAA,MAAM,CAACO,QAAP,CAAgB,OAAhB;;AAEA,UAAI,CAACd,UAAL,EAAiB;AACf,6BAAOS,MAAM,CAACE,KAAP,CAAaL,OAApB,EAA6BS,gBAA7B;AACD,OAFD,MAEO;AACL,6BAAON,MAAM,CAACE,KAAP,CAAaL,OAApB,EAA6BU,GAA7B,CAAiCD,gBAAjC;AACD;AACF,KARD;AAUA,0CAAI,2BAA0BN,MAAM,CAACE,KAAP,CAAaX,UAAW,EAAtD,EAAyD,MAAM;AAC7D,2BAAOO,MAAM,CAACU,IAAP,CAAY,YAAZ,CAAP,EAAkCJ,OAAlC,CAA0CJ,MAAM,CAACE,KAAP,CAAaX,UAAvD;AACD,KAFD;AAIA,0CAAI,wBAAuBS,MAAM,CAACE,KAAP,CAAaT,OAAQ,EAAhD,EAAmD,MAAM;AACvD,2BAAOK,MAAM,CAACU,IAAP,CAAY,SAAZ,CAAP,EAA+BJ,OAA/B,CAAuCJ,MAAM,CAACE,KAAP,CAAaT,OAApD;AACD,KAFD;AAIA,0CAAI,4BAA2BO,MAAM,CAACE,KAAP,CAAaV,WAAY,EAAxD,EAA2D,MAAM;AAC/D,2BAAOM,MAAM,CAACU,IAAP,CAAY,aAAZ,CAAP,EAAmCJ,OAAnC,CAA2CJ,MAAM,CAACE,KAAP,CAAaV,WAAxD;AACD,KAFD;AAIA,0CAAI,qBAAoBQ,MAAM,CAACE,KAAP,CAAaP,IAAK,EAA1C,EAA6C,MAAM;AACjD,2BAAOG,MAAM,CAACU,IAAP,CAAY,MAAZ,CAAP,EAA4BJ,OAA5B,CAAoCJ,MAAM,CAACE,KAAP,CAAaP,IAAjD;AACD,KAFD;AAIA,0CAAI,qBAAoBK,MAAM,CAACE,KAAP,CAAaR,IAAK,EAA1C,EAA6C,MAAM;AACjD,2BAAOI,MAAM,CAACU,IAAP,CAAY,MAAZ,CAAP,EAA4BJ,OAA5B,CAAoCJ,MAAM,CAACE,KAAP,CAAaR,IAAjD;AACD,KAFD;AAGD,GAjCM,CAAP;AAkCD,CAhDM;;;AAkDPK,KAAK","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { Button } from './Button';\nimport { describe, it } from 'storybook-addon-specifications';\nimport expect from 'expect';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value,\n  onClick\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={onClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nlet output;\n\nexport const tests = (\n  button = Component(\n    defaultValues.isChecked,\n    defaultValues.isDefaultChecked,\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.value\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have the right text: ${button.props.value}`, () =>\n      expect(output.text()).toEqual(button.props.value));\n\n    it(`onClick should have been called if Button is not disabled`, () => {\n      output.simulate('click');\n\n      if (!isDisabled) {\n        expect(button.props.onClick).toHaveBeenCalled();\n      } else {\n        expect(button.props.onClick).not.toHaveBeenCalled();\n      }\n    });\n\n    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {\n      expect(output.prop('isDisabled')).toEqual(button.props.isDisabled);\n    });\n\n    it(`Should have isRound: ${button.props.isRound}`, () => {\n      expect(output.prop('isRound')).toEqual(button.props.isRound);\n    });\n\n    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {\n      expect(output.prop('isFullWidth')).toEqual(button.props.isFullWidth);\n    });\n\n    it(`Should have type: ${button.props.type}`, () => {\n      expect(output.prop('type')).toEqual(button.props.type);\n    });\n\n    it(`Should have size: ${button.props.size}`, () => {\n      expect(output.prop('size')).toEqual(button.props.size);\n    });\n  });\n};\n\ntests();\n"]}