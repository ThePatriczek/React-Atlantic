941502b880e57e2a94f46b430d32d696
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = exports.defaultValues = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";
const defaultValues = {
  isChecked: false,
  isDefaultChecked: false,
  isDisabled: false,
  isPartiallyChecked: false,
  position: 'left',
  children: 'Change me, please ðŸ¥º'
};
exports.defaultValues = defaultValues;

const Component = isChecked => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  });
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component(), isChecked = defaultValues.isChecked, isDefaultChecked = defaultValues.isDefaultChecked, isDisabled = defaultValues.isDisabled, isPartiallyChecked = defaultValues.isPartiallyChecked, position = defaultValues.position, children = defaultValues.children) => {
  output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(isChecked);
    });
    it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);
    });
    it(`Should have isDisabled: ${isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(isDisabled);
    });
    it(`Should have isPartiallyChecked: ${isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(isPartiallyChecked);
    });
    it(`Should have position: ${position}`, () => {
      expect(output.prop('position')).toEqual(position);
    });
    it(`Should have children: ${children}`, () => {
      expect(output.prop('children')).toEqual(children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbImRlZmF1bHRWYWx1ZXMiLCJpc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzUGFydGlhbGx5Q2hlY2tlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJvdXRwdXQiLCJ0ZXN0cyIsImNoZWNrYm94IiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInByb3AiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7O0FBRU8sTUFBTUEsYUFBYSxHQUFHO0FBQzNCQyxFQUFBQSxTQUFTLEVBQUUsS0FEZ0I7QUFFM0JDLEVBQUFBLGdCQUFnQixFQUFFLEtBRlM7QUFHM0JDLEVBQUFBLFVBQVUsRUFBRSxLQUhlO0FBSTNCQyxFQUFBQSxrQkFBa0IsRUFBRSxLQUpPO0FBSzNCQyxFQUFBQSxRQUFRLEVBQUUsTUFMaUI7QUFNM0JDLEVBQUFBLFFBQVEsRUFBRTtBQU5pQixDQUF0Qjs7O0FBU0EsTUFBTUMsU0FBUyxHQUFHTixTQUFTLElBQUk7QUFDcEMsU0FBTyw2QkFBQyxrQkFBRDtBQUFVLElBQUEsU0FBUyxFQUFFQSxTQUFyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFQO0FBQ0QsQ0FGTTs7O0FBSVAsSUFBSU8sTUFBTSxHQUFHLHFCQUFRRCxTQUFTLEVBQWpCLENBQWI7O0FBRU8sTUFBTUUsS0FBSyxHQUFHLENBQ25CQyxRQUFRLEdBQUdILFNBQVMsRUFERCxFQUVuQk4sU0FBUyxHQUFHRCxhQUFhLENBQUNDLFNBRlAsRUFHbkJDLGdCQUFnQixHQUFHRixhQUFhLENBQUNFLGdCQUhkLEVBSW5CQyxVQUFVLEdBQUdILGFBQWEsQ0FBQ0csVUFKUixFQUtuQkMsa0JBQWtCLEdBQUdKLGFBQWEsQ0FBQ0ksa0JBTGhCLEVBTW5CQyxRQUFRLEdBQUdMLGFBQWEsQ0FBQ0ssUUFOTixFQU9uQkMsUUFBUSxHQUFHTixhQUFhLENBQUNNLFFBUE4sS0FRaEI7QUFDSEUsRUFBQUEsTUFBTSxHQUFHLHFCQUFRRSxRQUFSLENBQVQ7QUFFQSxTQUFPQyxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDaENDLElBQUFBLEVBQUUsQ0FBRSwwQkFBeUJYLFNBQVUsRUFBckMsRUFBd0MsTUFBTTtBQUM5Q1ksTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxXQUFaLENBQUQsQ0FBTixDQUFpQ0MsT0FBakMsQ0FBeUNkLFNBQXpDO0FBQ0QsS0FGQyxDQUFGO0FBSUFXLElBQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NWLGdCQUFpQixFQUFuRCxFQUFzRCxNQUFNO0FBQzVEVyxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLGtCQUFaLENBQUQsQ0FBTixDQUF3Q0MsT0FBeEMsQ0FBZ0RiLGdCQUFoRDtBQUNELEtBRkMsQ0FBRjtBQUlBVSxJQUFBQSxFQUFFLENBQUUsMkJBQTBCVCxVQUFXLEVBQXZDLEVBQTBDLE1BQU07QUFDaERVLE1BQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDTSxJQUFQLENBQVksWUFBWixDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDWixVQUExQztBQUNELEtBRkMsQ0FBRjtBQUlBUyxJQUFBQSxFQUFFLENBQUUsbUNBQWtDUixrQkFBbUIsRUFBdkQsRUFBMEQsTUFBTTtBQUNoRVMsTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxvQkFBWixDQUFELENBQU4sQ0FBMENDLE9BQTFDLENBQWtEWCxrQkFBbEQ7QUFDRCxLQUZDLENBQUY7QUFJQVEsSUFBQUEsRUFBRSxDQUFFLHlCQUF3QlAsUUFBUyxFQUFuQyxFQUFzQyxNQUFNO0FBQzVDUSxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDQyxPQUFoQyxDQUF3Q1YsUUFBeEM7QUFDRCxLQUZDLENBQUY7QUFJQU8sSUFBQUEsRUFBRSxDQUFFLHlCQUF3Qk4sUUFBUyxFQUFuQyxFQUFzQyxNQUFNO0FBQzVDTyxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDQyxPQUFoQyxDQUF3Q1QsUUFBeEM7QUFDRCxLQUZDLENBQUY7QUFHRCxHQXhCYyxDQUFmO0FBeUJELENBcENNOzs7QUFzQ1BHLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFZhbHVlcyA9IHtcbiAgaXNDaGVja2VkOiBmYWxzZSxcbiAgaXNEZWZhdWx0Q2hlY2tlZDogZmFsc2UsXG4gIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICBpc1BhcnRpYWxseUNoZWNrZWQ6IGZhbHNlLFxuICBwb3NpdGlvbjogJ2xlZnQnLFxuICBjaGlsZHJlbjogJ0NoYW5nZSBtZSwgcGxlYXNlIPCfpbonXG59O1xuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gaXNDaGVja2VkID0+IHtcbiAgcmV0dXJuIDxDaGVja2JveCBpc0NoZWNrZWQ9e2lzQ2hlY2tlZH0gLz47XG59O1xuXG5sZXQgb3V0cHV0ID0gc2hhbGxvdyhDb21wb25lbnQoKSk7XG5cbmV4cG9ydCBjb25zdCB0ZXN0cyA9IChcbiAgY2hlY2tib3ggPSBDb21wb25lbnQoKSxcbiAgaXNDaGVja2VkID0gZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQgPSBkZWZhdWx0VmFsdWVzLmlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQgPSBkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCA9IGRlZmF1bHRWYWx1ZXMuaXNQYXJ0aWFsbHlDaGVja2VkLFxuICBwb3NpdGlvbiA9IGRlZmF1bHRWYWx1ZXMucG9zaXRpb24sXG4gIGNoaWxkcmVuID0gZGVmYXVsdFZhbHVlcy5jaGlsZHJlblxuKSA9PiB7XG4gIG91dHB1dCA9IHNoYWxsb3coY2hlY2tib3gpO1xuXG4gIHJldHVybiBkZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtpc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0NoZWNrZWQnKSkudG9FcXVhbChpc0NoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRGVmYXVsdENoZWNrZWQ6ICR7aXNEZWZhdWx0Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGVmYXVsdENoZWNrZWQnKSkudG9FcXVhbChpc0RlZmF1bHRDaGVja2VkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2lzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoaXNEaXNhYmxlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNQYXJ0aWFsbHlDaGVja2VkOiAke2lzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKGlzUGFydGlhbGx5Q2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7cG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdwb3NpdGlvbicpKS50b0VxdWFsKHBvc2l0aW9uKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtjaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=