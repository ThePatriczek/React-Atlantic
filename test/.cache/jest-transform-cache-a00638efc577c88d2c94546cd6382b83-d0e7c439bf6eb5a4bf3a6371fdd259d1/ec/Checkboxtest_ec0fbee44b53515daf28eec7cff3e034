8411921f7db71b66cf1f1f4772617f89
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = exports.defaultValues = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";
const defaultValues = {
  isChecked: false,
  isDefaultChecked: false,
  isDisabled: false,
  isPartiallyChecked: false,
  position: 'left',
  children: 'Change me, please ðŸ¥º'
};
exports.defaultValues = defaultValues;

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component(), isChecked, isDefaultChecked, isDisabled = defaultValues.isDisabled, isPartiallyChecked = defaultValues.isPartiallyChecked, position = defaultValues.position, children = defaultValues.children) => {
  output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(isChecked);
    });
    it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);
    });
    it(`Should have isDisabled: ${isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(isDisabled);
    });
    it(`Should have isPartiallyChecked: ${isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(isPartiallyChecked);
    });
    it(`Should have position: ${position}`, () => {
      expect(output.prop('position')).toEqual(position);
    });
    it(`Should have children: ${children}`, () => {
      expect(output.prop('children')).toEqual(children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbImRlZmF1bHRWYWx1ZXMiLCJpc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiaXNEaXNhYmxlZCIsImlzUGFydGlhbGx5Q2hlY2tlZCIsInBvc2l0aW9uIiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJvdXRwdXQiLCJ0ZXN0cyIsImNoZWNrYm94IiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInByb3AiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7O0FBRU8sTUFBTUEsYUFBYSxHQUFHO0FBQzNCQyxFQUFBQSxTQUFTLEVBQUUsS0FEZ0I7QUFFM0JDLEVBQUFBLGdCQUFnQixFQUFFLEtBRlM7QUFHM0JDLEVBQUFBLFVBQVUsRUFBRSxLQUhlO0FBSTNCQyxFQUFBQSxrQkFBa0IsRUFBRSxLQUpPO0FBSzNCQyxFQUFBQSxRQUFRLEVBQUUsTUFMaUI7QUFNM0JDLEVBQUFBLFFBQVEsRUFBRTtBQU5pQixDQUF0Qjs7O0FBU0EsTUFBTUMsU0FBUyxHQUFHLENBQ3ZCTixTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVMLFNBRGI7QUFFRSxJQUFBLGtCQUFrQixFQUFFRyxrQkFGdEI7QUFHRSxJQUFBLGdCQUFnQixFQUFFRixnQkFIcEI7QUFJRSxJQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT0dDLFFBUEgsQ0FERjtBQVdELENBbkJNOzs7QUFxQlAsSUFBSUUsTUFBTSxHQUFHLHFCQUFRRCxTQUFTLEVBQWpCLENBQWI7O0FBRU8sTUFBTUUsS0FBSyxHQUFHLENBQ25CQyxRQUFRLEdBQUdILFNBQVMsRUFERCxFQUVuQk4sU0FGbUIsRUFHbkJDLGdCQUhtQixFQUluQkMsVUFBVSxHQUFHSCxhQUFhLENBQUNHLFVBSlIsRUFLbkJDLGtCQUFrQixHQUFHSixhQUFhLENBQUNJLGtCQUxoQixFQU1uQkMsUUFBUSxHQUFHTCxhQUFhLENBQUNLLFFBTk4sRUFPbkJDLFFBQVEsR0FBR04sYUFBYSxDQUFDTSxRQVBOLEtBUWhCO0FBQ0hFLEVBQUFBLE1BQU0sR0FBRyxxQkFBUUUsUUFBUixDQUFUO0FBRUEsU0FBT0MsUUFBUSxDQUFDLFVBQUQsRUFBYSxNQUFNO0FBQ2hDQyxJQUFBQSxFQUFFLENBQUUsMEJBQXlCWCxTQUFVLEVBQXJDLEVBQXdDLE1BQU07QUFDOUNZLE1BQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDTSxJQUFQLENBQVksV0FBWixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDZCxTQUF6QztBQUNELEtBRkMsQ0FBRjtBQUlBVyxJQUFBQSxFQUFFLENBQUUsaUNBQWdDVixnQkFBaUIsRUFBbkQsRUFBc0QsTUFBTTtBQUM1RFcsTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxrQkFBWixDQUFELENBQU4sQ0FBd0NDLE9BQXhDLENBQWdEYixnQkFBaEQ7QUFDRCxLQUZDLENBQUY7QUFJQVUsSUFBQUEsRUFBRSxDQUFFLDJCQUEwQlQsVUFBVyxFQUF2QyxFQUEwQyxNQUFNO0FBQ2hEVSxNQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLFlBQVosQ0FBRCxDQUFOLENBQWtDQyxPQUFsQyxDQUEwQ1osVUFBMUM7QUFDRCxLQUZDLENBQUY7QUFJQVMsSUFBQUEsRUFBRSxDQUFFLG1DQUFrQ1Isa0JBQW1CLEVBQXZELEVBQTBELE1BQU07QUFDaEVTLE1BQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDTSxJQUFQLENBQVksb0JBQVosQ0FBRCxDQUFOLENBQTBDQyxPQUExQyxDQUFrRFgsa0JBQWxEO0FBQ0QsS0FGQyxDQUFGO0FBSUFRLElBQUFBLEVBQUUsQ0FBRSx5QkFBd0JQLFFBQVMsRUFBbkMsRUFBc0MsTUFBTTtBQUM1Q1EsTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0NWLFFBQXhDO0FBQ0QsS0FGQyxDQUFGO0FBSUFPLElBQUFBLEVBQUUsQ0FBRSx5QkFBd0JOLFFBQVMsRUFBbkMsRUFBc0MsTUFBTTtBQUM1Q08sTUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0NULFFBQXhDO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0F4QmMsQ0FBZjtBQXlCRCxDQXBDTTs7O0FBc0NQRyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tICcuL0NoZWNrYm94JztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRWYWx1ZXMgPSB7XG4gIGlzQ2hlY2tlZDogZmFsc2UsXG4gIGlzRGVmYXVsdENoZWNrZWQ6IGZhbHNlLFxuICBpc0Rpc2FibGVkOiBmYWxzZSxcbiAgaXNQYXJ0aWFsbHlDaGVja2VkOiBmYWxzZSxcbiAgcG9zaXRpb246ICdsZWZ0JyxcbiAgY2hpbGRyZW46ICdDaGFuZ2UgbWUsIHBsZWFzZSDwn6W6J1xufTtcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uLFxuICBjaGlsZHJlblxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPENoZWNrYm94XG4gICAgICBpc0NoZWNrZWQ9e2lzQ2hlY2tlZH1cbiAgICAgIGlzUGFydGlhbGx5Q2hlY2tlZD17aXNQYXJ0aWFsbHlDaGVja2VkfVxuICAgICAgaXNEZWZhdWx0Q2hlY2tlZD17aXNEZWZhdWx0Q2hlY2tlZH1cbiAgICAgIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICBwb3NpdGlvbj17cG9zaXRpb259XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ2hlY2tib3g+XG4gICk7XG59O1xuXG5sZXQgb3V0cHV0ID0gc2hhbGxvdyhDb21wb25lbnQoKSk7XG5cbmV4cG9ydCBjb25zdCB0ZXN0cyA9IChcbiAgY2hlY2tib3ggPSBDb21wb25lbnQoKSxcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkICxcbiAgaXNEaXNhYmxlZCA9IGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgaXNQYXJ0aWFsbHlDaGVja2VkID0gZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uID0gZGVmYXVsdFZhbHVlcy5wb3NpdGlvbixcbiAgY2hpbGRyZW4gPSBkZWZhdWx0VmFsdWVzLmNoaWxkcmVuXG4pID0+IHtcbiAgb3V0cHV0ID0gc2hhbGxvdyhjaGVja2JveCk7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNDaGVja2VkOiAke2lzQ2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKGlzQ2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtpc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEZWZhdWx0Q2hlY2tlZCcpKS50b0VxdWFsKGlzRGVmYXVsdENoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRGlzYWJsZWQ6ICR7aXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChpc0Rpc2FibGVkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc1BhcnRpYWxseUNoZWNrZWQ6ICR7aXNQYXJ0aWFsbHlDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoaXNQYXJ0aWFsbHlDaGVja2VkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBwb3NpdGlvbjogJHtwb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwocG9zaXRpb24pO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGNoaWxkcmVuOiAke2NoaWxkcmVufWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnY2hpbGRyZW4nKSkudG9FcXVhbChjaGlsZHJlbik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudGVzdHMoKTtcbiJdfQ==