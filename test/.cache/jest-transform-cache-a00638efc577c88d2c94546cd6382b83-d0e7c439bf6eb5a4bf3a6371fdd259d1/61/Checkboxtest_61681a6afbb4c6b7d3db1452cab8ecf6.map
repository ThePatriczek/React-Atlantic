{"version":3,"sources":["Checkbox.test.jsx"],"names":["defaultValues","isChecked","isDefaultChecked","isDisabled","isPartiallyChecked","position","children","Component","output","tests","describe","undefined","it","expect","props","toEqual","console","log"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;AACO,MAAMA,aAAa,GAAG;AAC3BC,EAAAA,SAAS,EAAE,KADgB;AAE3BC,EAAAA,gBAAgB,EAAE,KAFS;AAG3BC,EAAAA,UAAU,EAAE,KAHe;AAI3BC,EAAAA,kBAAkB,EAAE,KAJO;AAK3BC,EAAAA,QAAQ,EAAE,MALiB;AAM3BC,EAAAA,QAAQ,EAAE;AANiB,CAAtB;;;AAQA,MAAMC,SAAS,GAAG,CACvBN,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,kBAJuB,EAKvBC,QALuB,EAMvBC,QANuB,KAOpB;AACH,SACE,6BAAC,kBAAD;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,kBAAkB,EAAEG,kBAFtB;AAGE,IAAA,gBAAgB,EAAEF,gBAHpB;AAIE,IAAA,UAAU,EAAEC,UAJd;AAKE,IAAA,QAAQ,EAAEE,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGC,QAPH,CADF;AAWD,CAnBM;;;AAqBP,IAAIE,MAAJ;;AACO,MAAMC,KAAK,GAAG,CACnBR,SADmB,EAEnBC,gBAFmB,EAGnBC,UAHmB,EAInBC,kBAJmB,EAKnBC,QALmB,EAMnBC,QANmB,KAOhB;AACH,MAAIJ,gBAAJ,EAAsB;AACpBM,IAAAA,MAAM,GAAG,qBACPD,SAAS,CACPN,SADO,EAEPC,gBAFO,EAGPC,UAHO,EAIPC,kBAJO,EAKPC,QALO,EAMPC,QANO,CADF,CAAT;AAUD,GAXD,MAYEE,MAAM,GAAG,qBACPD,SAAS,CACPP,aAAa,CAACC,SADP,EAEPD,aAAa,CAACE,gBAFP,EAGPF,aAAa,CAACG,UAHP,EAIPH,aAAa,CAACI,kBAJP,EAKPJ,aAAa,CAACK,QALP,EAMPL,aAAa,CAACM,QANP,CADF,CAAT;;AAWF,SAAOI,QAAQ,CAAC,UAAD,EAAa,MAAM;AAChC,QAAIR,gBAAgB,KAAKS,SAAzB,EAAoC;AAClCC,MAAAA,EAAE,CAAE,iCAAgCV,gBAAiB,EAAnD,EAAsD,MAAM;AAC5DW,QAAAA,MAAM,CAACL,MAAM,CAACM,KAAP,GAAeZ,gBAAhB,CAAN,CAAwCa,OAAxC,CAAgDb,gBAAhD;AACD,OAFC,CAAF;AAGD,KAJD,MAIO;AACLU,MAAAA,EAAE,CAAE,iCAAgCZ,aAAa,CAACE,gBAAiB,EAAjE,EAAoE,MAAM;AAC1Ec,QAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACM,KAAP,EAAZ;AACAD,QAAAA,MAAM,CAACL,MAAM,CAACM,KAAP,GAAeZ,gBAAhB,CAAN,CAAwCa,OAAxC,CACEf,aAAa,CAACE,gBADhB;AAGD,OALC,CAAF;AAMD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDD,GA7Dc,CAAf;AA8DD,CA7FM;;;AA+FPO,KAAK","sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nexport const defaultValues = {\n  isChecked: false,\n  isDefaultChecked: false,\n  isDisabled: false,\n  isPartiallyChecked: false,\n  position: 'left',\n  children: 'Change me, please ðŸ¥º'\n};\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      isPartiallyChecked={isPartiallyChecked}\n      isDefaultChecked={isDefaultChecked}\n      isDisabled={isDisabled}\n      position={position}\n    >\n      {children}\n    </Checkbox>\n  );\n};\n\nlet output;\nexport const tests = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  if (isDefaultChecked) {\n    output = shallow(\n      Component(\n        isChecked,\n        isDefaultChecked,\n        isDisabled,\n        isPartiallyChecked,\n        position,\n        children\n      )\n    );\n  } else\n    output = shallow(\n      Component(\n        defaultValues.isChecked,\n        defaultValues.isDefaultChecked,\n        defaultValues.isDisabled,\n        defaultValues.isPartiallyChecked,\n        defaultValues.position,\n        defaultValues.children\n      )\n    );\n\n  return describe('Checkbox', () => {\n    if (isDefaultChecked !== undefined) {\n      it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {\n        expect(output.props().isDefaultChecked).toEqual(isDefaultChecked);\n      });\n    } else {\n      it(`Should have isDefaultChecked: ${defaultValues.isDefaultChecked}`, () => {\n        console.log(output.props());\n        expect(output.props().isDefaultChecked).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n    }\n    /* if (checkbox.props.isChecked) {\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n    } else\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });\n\n    if (checkbox.props.isDisabled) {\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n    } else\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n\n    if (checkbox.props.isPartiallyChecked) {\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n    } else\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n\n    if (checkbox.props.position) {\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n    } else\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n\n    if (checkbox.props.children) {\n      it(`Should have children: ${checkbox.props.children}`, () => {\n        expect(output.prop('children')).toEqual(checkbox.props.children);\n      });\n    } else\n      it(`Should have children: ${defaultValues.children}`, () => {\n        expect(output.prop('children')).toEqual(defaultValues.children);\n      });*/\n  });\n};\n\ntests();\n"]}