28173d9f5ce4b1ca0da3ae88ebfa21a7
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0;

var _slicedToArray2 = _interopRequireDefault(require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _Icons = require("../../Icons");

var _Checkbox = require("./Checkbox.style");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.tsx";

const Checkbox = props => {
  const isPartiallyChecked = props.isPartiallyChecked,
        isDefaultChecked = props.isDefaultChecked,
        position = props.position,
        isDisabled = props.isDisabled,
        className = props.className,
        children = props.children;

  const _React$useState = React.useState(!!isDefaultChecked),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        isChecked = _React$useState2[0],
        setChecked = _React$useState2[1];

  const onChange = e => {
    if (!isDisabled) {
      if (props.isChecked === undefined) {
        if (!isPartiallyChecked) {
          setChecked(e.target.checked);
        }

        if (props.onChange) {
          props.onChange(!isChecked);
        }
      } else {
        if (props.onChange) {
          props.onChange(!props.isChecked);
        }
      }
    }
  };

  return React.createElement(_Checkbox.StyledCheckboxLabel, {
    isChecked: props.isChecked || isChecked,
    isDisabled: isDisabled,
    className: className,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55
    },
    __self: void 0
  }, position === 'right' && React.createElement(_Checkbox.StyledCheckboxSpan, {
    isDisabled: isDisabled,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 61
    },
    __self: void 0
  }, children), React.createElement(_Checkbox.StyledCheckboxInputShown, {
    isDisabled: isDisabled,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 66
    },
    __self: void 0
  }, React.createElement(_Checkbox.StyledCheckboxMark, {
    isDisabled: isDisabled,
    isChecked: props.isChecked || isChecked,
    isPartiallyChecked: isPartiallyChecked,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 67
    },
    __self: void 0
  }, React.createElement(_Checkbox.HiddenCheckbox, {
    onChange: onChange,
    checked: props.isChecked || isChecked,
    disabled: isDisabled,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 72
    },
    __self: void 0
  }), (props.isChecked || isChecked) && React.createElement(_Checkbox.StyledCheckboxIcon, {
    isDisabled: isDisabled,
    isChecked: props.isChecked || isChecked,
    isPartiallyChecked: isPartiallyChecked,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 78
    },
    __self: void 0
  }, React.createElement(_Icons.Check, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 83
    },
    __self: void 0
  })))), position === 'left' && React.createElement(_Checkbox.StyledCheckboxSpan, {
    isDisabled: isDisabled,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90
    },
    __self: void 0
  }, children));
};

exports.Checkbox = Checkbox;
Checkbox.defaultProps = {
  position: 'left'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRzeCJdLCJuYW1lcyI6WyJDaGVja2JveCIsInByb3BzIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwiaXNEZWZhdWx0Q2hlY2tlZCIsInBvc2l0aW9uIiwiaXNEaXNhYmxlZCIsImNsYXNzTmFtZSIsImNoaWxkcmVuIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsImlzQ2hlY2tlZCIsInNldENoZWNrZWQiLCJvbkNoYW5nZSIsImUiLCJ1bmRlZmluZWQiLCJ0YXJnZXQiLCJjaGVja2VkIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFvQk8sTUFBTUEsUUFBMEQsR0FDckVDLEtBRHdFLElBRWpEO0FBQUEsUUFFckJDLGtCQUZxQixHQVFuQkQsS0FSbUIsQ0FFckJDLGtCQUZxQjtBQUFBLFFBR3JCQyxnQkFIcUIsR0FRbkJGLEtBUm1CLENBR3JCRSxnQkFIcUI7QUFBQSxRQUlyQkMsUUFKcUIsR0FRbkJILEtBUm1CLENBSXJCRyxRQUpxQjtBQUFBLFFBS3JCQyxVQUxxQixHQVFuQkosS0FSbUIsQ0FLckJJLFVBTHFCO0FBQUEsUUFNckJDLFNBTnFCLEdBUW5CTCxLQVJtQixDQU1yQkssU0FOcUI7QUFBQSxRQU9yQkMsUUFQcUIsR0FRbkJOLEtBUm1CLENBT3JCTSxRQVBxQjs7QUFBQSwwQkFTU0MsS0FBSyxDQUFDQyxRQUFOLENBQXdCLENBQUMsQ0FBQ04sZ0JBQTFCLENBVFQ7QUFBQTtBQUFBLFFBU2hCTyxTQVRnQjtBQUFBLFFBU0xDLFVBVEs7O0FBV3ZCLFFBQU1DLFFBQVEsR0FBSUMsQ0FBRCxJQUE0QztBQUMzRCxRQUFJLENBQUNSLFVBQUwsRUFBaUI7QUFDZixVQUFJSixLQUFLLENBQUNTLFNBQU4sS0FBb0JJLFNBQXhCLEVBQW1DO0FBQ2pDLFlBQUksQ0FBQ1osa0JBQUwsRUFBeUI7QUFDdkJTLFVBQUFBLFVBQVUsQ0FBQ0UsQ0FBQyxDQUFDRSxNQUFGLENBQVNDLE9BQVYsQ0FBVjtBQUNEOztBQUNELFlBQUlmLEtBQUssQ0FBQ1csUUFBVixFQUFvQjtBQUNsQlgsVUFBQUEsS0FBSyxDQUFDVyxRQUFOLENBQWUsQ0FBQ0YsU0FBaEI7QUFDRDtBQUNGLE9BUEQsTUFPTztBQUNMLFlBQUlULEtBQUssQ0FBQ1csUUFBVixFQUFvQjtBQUNsQlgsVUFBQUEsS0FBSyxDQUFDVyxRQUFOLENBQWUsQ0FBQ1gsS0FBSyxDQUFDUyxTQUF0QjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLEdBZkQ7O0FBaUJBLFNBQ0Usb0JBQUMsNkJBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBRVQsS0FBSyxDQUFDUyxTQUFOLElBQW1CQSxTQURoQztBQUVFLElBQUEsVUFBVSxFQUFFTCxVQUZkO0FBR0UsSUFBQSxTQUFTLEVBQUVDLFNBSGI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FLR0YsUUFBUSxLQUFLLE9BQWIsSUFDQyxvQkFBQyw0QkFBRDtBQUFvQixJQUFBLFVBQVUsRUFBRUMsVUFBaEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDR0UsUUFESCxDQU5KLEVBV0Usb0JBQUMsa0NBQUQ7QUFBMEIsSUFBQSxVQUFVLEVBQUVGLFVBQXRDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0Usb0JBQUMsNEJBQUQ7QUFDRSxJQUFBLFVBQVUsRUFBRUEsVUFEZDtBQUVFLElBQUEsU0FBUyxFQUFFSixLQUFLLENBQUNTLFNBQU4sSUFBbUJBLFNBRmhDO0FBR0UsSUFBQSxrQkFBa0IsRUFBRVIsa0JBSHRCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBS0Usb0JBQUMsd0JBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRVUsUUFEWjtBQUVFLElBQUEsT0FBTyxFQUFFWCxLQUFLLENBQUNTLFNBQU4sSUFBbUJBLFNBRjlCO0FBR0UsSUFBQSxRQUFRLEVBQUVMLFVBSFo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFMRixFQVVHLENBQUNKLEtBQUssQ0FBQ1MsU0FBTixJQUFtQkEsU0FBcEIsS0FDQyxvQkFBQyw0QkFBRDtBQUNFLElBQUEsVUFBVSxFQUFFTCxVQURkO0FBRUUsSUFBQSxTQUFTLEVBQUVKLEtBQUssQ0FBQ1MsU0FBTixJQUFtQkEsU0FGaEM7QUFHRSxJQUFBLGtCQUFrQixFQUFFUixrQkFIdEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FLRSxvQkFBQyxZQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTEYsQ0FYSixDQURGLENBWEYsRUFrQ0dFLFFBQVEsS0FBSyxNQUFiLElBQ0Msb0JBQUMsNEJBQUQ7QUFBb0IsSUFBQSxVQUFVLEVBQUVDLFVBQWhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dFLFFBREgsQ0FuQ0osQ0FERjtBQTBDRCxDQXhFTTs7O0FBMEVQUCxRQUFRLENBQUNpQixZQUFULEdBQXdCO0FBQ3RCYixFQUFBQSxRQUFRLEVBQUU7QUFEWSxDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoZWNrIH0gZnJvbSAnLi4vLi4vSWNvbnMnO1xuaW1wb3J0IHsgSG9yaXpvbnRhbFBvc2l0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgSGlkZGVuQ2hlY2tib3gsXG4gIFN0eWxlZENoZWNrYm94SWNvbixcbiAgU3R5bGVkQ2hlY2tib3hJbnB1dFNob3duLFxuICBTdHlsZWRDaGVja2JveExhYmVsLFxuICBTdHlsZWRDaGVja2JveE1hcmssXG4gIFN0eWxlZENoZWNrYm94U3BhblxufSBmcm9tICcuL0NoZWNrYm94LnN0eWxlJztcblxuZXhwb3J0IGludGVyZmFjZSBDaGVja2JveFByb3BzIHtcbiAgaXNDaGVja2VkPzogYm9vbGVhbjtcbiAgaXNEZWZhdWx0Q2hlY2tlZD86IGJvb2xlYW47XG4gIGlzUGFydGlhbGx5Q2hlY2tlZD86IGJvb2xlYW47XG4gIGlzRGlzYWJsZWQ/OiBib29sZWFuO1xuICBvbkNoYW5nZT86IChpc0NoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHBvc2l0aW9uPzogSG9yaXpvbnRhbFBvc2l0aW9uO1xuICAvKiogY3VzdG9tIGNsYXNzTmFtZSAqL1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveDogUmVhY3QuRkM8UmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48Q2hlY2tib3hQcm9wcz4+ID0gKFxuICBwcm9wczogUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48Q2hlY2tib3hQcm9wcz5cbik6IFJlYWN0LlJlYWN0RWxlbWVudCA9PiB7XG4gIGNvbnN0IHtcbiAgICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgaXNEZWZhdWx0Q2hlY2tlZCxcbiAgICBwb3NpdGlvbixcbiAgICBpc0Rpc2FibGVkLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjaGlsZHJlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtpc0NoZWNrZWQsIHNldENoZWNrZWRdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oISFpc0RlZmF1bHRDaGVja2VkKTtcblxuICBjb25zdCBvbkNoYW5nZSA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmICghaXNEaXNhYmxlZCkge1xuICAgICAgaWYgKHByb3BzLmlzQ2hlY2tlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghaXNQYXJ0aWFsbHlDaGVja2VkKSB7XG4gICAgICAgICAgc2V0Q2hlY2tlZChlLnRhcmdldC5jaGVja2VkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgICBwcm9wcy5vbkNoYW5nZSghaXNDaGVja2VkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgcHJvcHMub25DaGFuZ2UoIXByb3BzLmlzQ2hlY2tlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQ2hlY2tib3hMYWJlbFxuICAgICAgaXNDaGVja2VkPXtwcm9wcy5pc0NoZWNrZWQgfHwgaXNDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgID5cbiAgICAgIHtwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAoXG4gICAgICAgIDxTdHlsZWRDaGVja2JveFNwYW4gaXNEaXNhYmxlZD17aXNEaXNhYmxlZH0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1N0eWxlZENoZWNrYm94U3Bhbj5cbiAgICAgICl9XG5cbiAgICAgIDxTdHlsZWRDaGVja2JveElucHV0U2hvd24gaXNEaXNhYmxlZD17aXNEaXNhYmxlZH0+XG4gICAgICAgIDxTdHlsZWRDaGVja2JveE1hcmtcbiAgICAgICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgIGlzQ2hlY2tlZD17cHJvcHMuaXNDaGVja2VkIHx8IGlzQ2hlY2tlZH1cbiAgICAgICAgICBpc1BhcnRpYWxseUNoZWNrZWQ9e2lzUGFydGlhbGx5Q2hlY2tlZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxIaWRkZW5DaGVja2JveFxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgY2hlY2tlZD17cHJvcHMuaXNDaGVja2VkIHx8IGlzQ2hlY2tlZH1cbiAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgeyhwcm9wcy5pc0NoZWNrZWQgfHwgaXNDaGVja2VkKSAmJiAoXG4gICAgICAgICAgICA8U3R5bGVkQ2hlY2tib3hJY29uXG4gICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICAgICAgICAgIGlzQ2hlY2tlZD17cHJvcHMuaXNDaGVja2VkIHx8IGlzQ2hlY2tlZH1cbiAgICAgICAgICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxDaGVjayAvPlxuICAgICAgICAgICAgPC9TdHlsZWRDaGVja2JveEljb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TdHlsZWRDaGVja2JveE1hcms+XG4gICAgICA8L1N0eWxlZENoZWNrYm94SW5wdXRTaG93bj5cblxuICAgICAge3Bvc2l0aW9uID09PSAnbGVmdCcgJiYgKFxuICAgICAgICA8U3R5bGVkQ2hlY2tib3hTcGFuIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9PlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9TdHlsZWRDaGVja2JveFNwYW4+XG4gICAgICApfVxuICAgIDwvU3R5bGVkQ2hlY2tib3hMYWJlbD5cbiAgKTtcbn07XG5cbkNoZWNrYm94LmRlZmF1bHRQcm9wcyA9IHtcbiAgcG9zaXRpb246ICdsZWZ0J1xufTtcbiJdfQ==