7fa5946a8eb0bdeddea9704bd3856732
"use strict";

var _interopRequireWildcard = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _addonKnobs = require("@storybook/addon-knobs");

var _react = require("@storybook/react");

var React = _interopRequireWildcard(require("react"));

var _storybookAddonSpecifications = require("storybook-addon-specifications");

var _Checkbox = require("./Checkbox");

var _addonActions = require("@storybook/addon-actions");

var _constants = require("../../constants");

var _Checkbox2 = require("./Checkbox.test");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.story.jsx";
const stories = (0, _react.storiesOf)('Checkbox', module);
stories.addDecorator(_addonKnobs.withKnobs);
stories.add('Playground', () => {
  const isChecked = (0, _addonKnobs.boolean)(`isChecked:`, false);
  const isDefaultChecked = (0, _addonKnobs.boolean)(`isDefaultChecked:`, false);
  const isDisabled = (0, _addonKnobs.boolean)(`isDisabled:`, false);
  const isPartiallyChecked = (0, _addonKnobs.boolean)(`isPartiallyChecked:`, false);
  const position = (0, _addonKnobs.select)(`Position:`, ['left', `right`], 'left');
  const children = (0, _addonKnobs.text)(`children:`, `Change me, please ðŸ¥º`);
  const checkbox = React.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    isPartiallyChecked: isPartiallyChecked,
    position: position,
    onChange: (0, _addonActions.action)(`onChange`),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 32
    },
    __self: void 0
  }, children);
  (0, _storybookAddonSpecifications.specs)(() => _Checkbox2.tests);
  return checkbox;
}, {
  info: {
    inline: true
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnN0b3J5LmpzeCJdLCJuYW1lcyI6WyJzdG9yaWVzIiwibW9kdWxlIiwiYWRkRGVjb3JhdG9yIiwid2l0aEtub2JzIiwiYWRkIiwiaXNDaGVja2VkIiwiaXNEZWZhdWx0Q2hlY2tlZCIsImlzRGlzYWJsZWQiLCJpc1BhcnRpYWxseUNoZWNrZWQiLCJwb3NpdGlvbiIsImNoaWxkcmVuIiwiY2hlY2tib3giLCJ0ZXN0cyIsImluZm8iLCJpbmxpbmUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFRQTs7O0FBRUEsTUFBTUEsT0FBTyxHQUFHLHNCQUFVLFVBQVYsRUFBc0JDLE1BQXRCLENBQWhCO0FBRUFELE9BQU8sQ0FBQ0UsWUFBUixDQUFxQkMscUJBQXJCO0FBRUFILE9BQU8sQ0FBQ0ksR0FBUixDQUNFLFlBREYsRUFFRSxNQUFNO0FBQ0gsUUFBTUMsU0FBUyxHQUFHLHlCQUFTLFlBQVQsRUFBc0IsS0FBdEIsQ0FBbEI7QUFDQSxRQUFNQyxnQkFBZ0IsR0FBRyx5QkFBUyxtQkFBVCxFQUE2QixLQUE3QixDQUF6QjtBQUNBLFFBQU1DLFVBQVUsR0FBRyx5QkFBUyxhQUFULEVBQXVCLEtBQXZCLENBQW5CO0FBQ0EsUUFBTUMsa0JBQWtCLEdBQUcseUJBQVMscUJBQVQsRUFBK0IsS0FBL0IsQ0FBM0I7QUFDQSxRQUFNQyxRQUFRLEdBQUcsd0JBQVEsV0FBUixFQUFvQixDQUFDLE1BQUQsRUFBVSxPQUFWLENBQXBCLEVBQXVDLE1BQXZDLENBQWpCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLHNCQUFNLFdBQU4sRUFBbUIsc0JBQW5CLENBQWpCO0FBRUQsUUFBTUMsUUFBUSxHQUNaLG9CQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVOLFNBRGI7QUFFRSxJQUFBLGdCQUFnQixFQUFFQyxnQkFGcEI7QUFHRSxJQUFBLFVBQVUsRUFBRUMsVUFIZDtBQUlFLElBQUEsa0JBQWtCLEVBQUVDLGtCQUp0QjtBQUtFLElBQUEsUUFBUSxFQUFFQyxRQUxaO0FBTUUsSUFBQSxRQUFRLEVBQUUsMEJBQVEsVUFBUixDQU5aO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBUUdDLFFBUkgsQ0FERjtBQWFBLDJDQUFNLE1BQU1FLGdCQUFaO0FBRUEsU0FBT0QsUUFBUDtBQUNELENBMUJILEVBMkJFO0FBQ0VFLEVBQUFBLElBQUksRUFBRTtBQUFFQyxJQUFBQSxNQUFNLEVBQUU7QUFBVjtBQURSLENBM0JGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbiwgc2VsZWN0LCB0ZXh0LCB3aXRoS25vYnMgfSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWtub2JzJztcbmltcG9ydCB7IHN0b3JpZXNPZiB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3BlY3MgfSBmcm9tICdzdG9yeWJvb2stYWRkb24tc3BlY2lmaWNhdGlvbnMnO1xuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tICcuL0NoZWNrYm94JztcbmltcG9ydCB7IGFjdGlvbiB9IGZyb20gJ0BzdG9yeWJvb2svYWRkb24tYWN0aW9ucyc7XG5pbXBvcnQge1xuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIGlzQ2hlY2tlZCxcbiAgaXNEaXNhYmxlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG59IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB0ZXN0cyB9IGZyb20gJy4vQ2hlY2tib3gudGVzdCc7XG5cbmNvbnN0IHN0b3JpZXMgPSBzdG9yaWVzT2YoJ0NoZWNrYm94JywgbW9kdWxlKTtcblxuc3Rvcmllcy5hZGREZWNvcmF0b3Iod2l0aEtub2JzKTtcblxuc3Rvcmllcy5hZGQoXG4gICdQbGF5Z3JvdW5kJyxcbiAgKCkgPT4ge1xuICAgICBjb25zdCBpc0NoZWNrZWQgPSBib29sZWFuKGBpc0NoZWNrZWQ6YCwgZmFsc2UpO1xuICAgICBjb25zdCBpc0RlZmF1bHRDaGVja2VkID0gYm9vbGVhbihgaXNEZWZhdWx0Q2hlY2tlZDpgLCBmYWxzZSk7XG4gICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBib29sZWFuKGBpc0Rpc2FibGVkOmAsIGZhbHNlKTtcbiAgICAgY29uc3QgaXNQYXJ0aWFsbHlDaGVja2VkID0gYm9vbGVhbihgaXNQYXJ0aWFsbHlDaGVja2VkOmAsIGZhbHNlKTtcbiAgICAgY29uc3QgcG9zaXRpb24gPSBzZWxlY3QoYFBvc2l0aW9uOmAsIFsnbGVmdCcsIGByaWdodGBdLCAnbGVmdCcpO1xuICAgICBjb25zdCBjaGlsZHJlbiA9IHRleHQoYGNoaWxkcmVuOmAsIGBDaGFuZ2UgbWUsIHBsZWFzZSDwn6W6YCk7XG5cbiAgICBjb25zdCBjaGVja2JveCA9IChcbiAgICAgIDxDaGVja2JveFxuICAgICAgICBpc0NoZWNrZWQ9e2lzQ2hlY2tlZH1cbiAgICAgICAgaXNEZWZhdWx0Q2hlY2tlZD17aXNEZWZhdWx0Q2hlY2tlZH1cbiAgICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICAgICAgb25DaGFuZ2U9e2FjdGlvbihgb25DaGFuZ2VgKX1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9DaGVja2JveD5cbiAgICApO1xuXG4gICAgc3BlY3MoKCkgPT4gdGVzdHMpO1xuXG4gICAgcmV0dXJuIGNoZWNrYm94O1xuICB9LFxuICB7XG4gICAgaW5mbzogeyBpbmxpbmU6IHRydWUgfVxuICB9XG4pO1xuIl19