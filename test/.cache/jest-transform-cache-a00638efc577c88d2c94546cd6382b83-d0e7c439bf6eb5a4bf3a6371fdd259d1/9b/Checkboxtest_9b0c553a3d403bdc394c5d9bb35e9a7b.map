{"version":3,"sources":["Checkbox.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isPartiallyChecked","position","children","output","tests","checkbox","defaultValues","describe","it","props","expect","toEqual","prop"],"mappings":"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","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nimport { defaultValues } from '../../constants/defaultValues';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      isPartiallyChecked={isPartiallyChecked}\n      isDefaultChecked={isDefaultChecked}\n      isDisabled={isDisabled}\n      position={position}\n    >\n      {children}\n    </Checkbox>\n  );\n};\n\nlet output;\n\nexport const tests = checkbox => {\n  if (checkbox) {\n    output = mount(checkbox);\n  } else {\n    output = mount(\n      Component(\n        defaultValues.isChecked,\n        defaultValues.isDefaultChecked,\n        defaultValues.isDisabled,\n        defaultValues.isPartiallyChecked,\n        defaultValues.position,\n        defaultValues.children\n      )\n    );\n  }\n\n  return describe('Checkbox', () => {\n    if (checkbox) {\n      it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {\n        expect(output.props().isDefaultChecked).toEqual(\n          checkbox.props.isDefaultChecked\n        );\n      });\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n      it(`Should have children: ${checkbox.props.children}`, () => {\n        expect(output.prop('children')).toEqual(checkbox.props.children);\n      });\n    } else {\n      it(`Should have isDefaultChecked: ${defaultValues.isDefaultChecked}`, () => {\n        expect(output.props().isDefaultChecked).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });\n\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n      it(`Should have children: ${defaultValues.children}`, () => {\n        expect(output.prop('children')).toEqual(defaultValues.children);\n      });\n    }\n  });\n};\n\ntests();\n"]}