b583b72b285d309db575ffa91a4bd0e3
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _defaultValues = require("./defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  if (children) {
    output = (0, _enzyme.shallow)(Component(isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children));
  } else output = (0, _enzyme.shallow)(Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children));

  return describe('Checkbox', () => {
    /* if (checkbox.props.isChecked) {
      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
      });
    } else
      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);
      });*/
    if (isDefaultChecked) {
      it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
        expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);
      });
    } else {
      it(`Should have isDefaultChecked: ${_defaultValues.defaultValues.isDefaultChecked}`, () => {
        expect(output.prop('isDefaultChecked')).toEqual(_defaultValues.defaultValues.isDefaultChecked);
      });
      console.log(output);
    }
    /*if (checkbox.props.isDisabled) {
      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
      });
    } else
      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);
      });
     if (checkbox.props.isPartiallyChecked) {
      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(
          checkbox.props.isPartiallyChecked
        );
      });
    } else
      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(
          defaultValues.isPartiallyChecked
        );
      });
     if (checkbox.props.position) {
      it(`Should have position: ${checkbox.props.position}`, () => {
        expect(output.prop('position')).toEqual(checkbox.props.position);
      });
    } else
      it(`Should have position: ${defaultValues.position}`, () => {
        expect(output.prop('position')).toEqual(defaultValues.position);
      });
     if (checkbox.props.children) {
      it(`Should have children: ${checkbox.props.children}`, () => {
        expect(output.prop('children')).toEqual(checkbox.props.children);
      });
    } else
      it(`Should have children: ${defaultValues.children}`, () => {
        expect(output.prop('children')).toEqual(defaultValues.children);
      });*/

  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsInRlc3RzIiwiZGVmYXVsdFZhbHVlcyIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJwcm9wIiwidG9FcXVhbCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQ3ZCQyxTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVMLFNBRGI7QUFFRSxJQUFBLGtCQUFrQixFQUFFRyxrQkFGdEI7QUFHRSxJQUFBLGdCQUFnQixFQUFFRixnQkFIcEI7QUFJRSxJQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT0dDLFFBUEgsQ0FERjtBQVdELENBbkJNOzs7QUFxQlAsSUFBSUMsTUFBTSxHQUFHLHFCQUFRUCxTQUFTLEVBQWpCLENBQWI7O0FBRU8sTUFBTVEsS0FBSyxHQUFHLENBQ25CUCxTQURtQixFQUVuQkMsZ0JBRm1CLEVBR25CQyxVQUhtQixFQUluQkMsa0JBSm1CLEVBS25CQyxRQUxtQixFQU1uQkMsUUFObUIsS0FPaEI7QUFDSCxNQUFJQSxRQUFKLEVBQWM7QUFDWkMsSUFBQUEsTUFBTSxHQUFHLHFCQUNQUCxTQUFTLENBQ1BDLFNBRE8sRUFFUEMsZ0JBRk8sRUFHUEMsVUFITyxFQUlQQyxrQkFKTyxFQUtQQyxRQUxPLEVBTVBDLFFBTk8sQ0FERixDQUFUO0FBVUQsR0FYRCxNQVlFQyxNQUFNLEdBQUcscUJBQ1BQLFNBQVMsQ0FDUFMsNkJBQWNSLFNBRFAsRUFFUFEsNkJBQWNQLGdCQUZQLEVBR1BPLDZCQUFjTixVQUhQLEVBSVBNLDZCQUFjTCxrQkFKUCxFQUtQSyw2QkFBY0osUUFMUCxFQU1QSSw2QkFBY0gsUUFOUCxDQURGLENBQVQ7O0FBV0YsU0FBT0ksUUFBUSxDQUFDLFVBQUQsRUFBYSxNQUFNO0FBQ2hDOzs7Ozs7OztBQVFBLFFBQUlSLGdCQUFKLEVBQXNCO0FBQ3BCUyxNQUFBQSxFQUFFLENBQUUsaUNBQWdDVCxnQkFBaUIsRUFBbkQsRUFBc0QsTUFBTTtBQUM1RFUsUUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNNLElBQVAsQ0FBWSxrQkFBWixDQUFELENBQU4sQ0FBd0NDLE9BQXhDLENBQWdEWixnQkFBaEQ7QUFDRCxPQUZDLENBQUY7QUFHRCxLQUpELE1BSU87QUFDTFMsTUFBQUEsRUFBRSxDQUFFLGlDQUFnQ0YsNkJBQWNQLGdCQUFpQixFQUFqRSxFQUFvRSxNQUFNO0FBQzFFVSxRQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZLGtCQUFaLENBQUQsQ0FBTixDQUF3Q0MsT0FBeEMsQ0FDRUwsNkJBQWNQLGdCQURoQjtBQUdELE9BSkMsQ0FBRjtBQUtBYSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVQsTUFBWjtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Q0QsR0E3RGMsQ0FBZjtBQThERCxDQTdGTTs7O0FBK0ZQQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tICcuL0NoZWNrYm94JztcbmltcG9ydCB7IGRlZmF1bHRWYWx1ZXMgfSBmcm9tICcuL2RlZmF1bHRWYWx1ZXMnO1xuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2hlY2tib3hcbiAgICAgIGlzQ2hlY2tlZD17aXNDaGVja2VkfVxuICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbn07XG5cbmxldCBvdXRwdXQgPSBzaGFsbG93KENvbXBvbmVudCgpKTtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgb3V0cHV0ID0gc2hhbGxvdyhcbiAgICAgIENvbXBvbmVudChcbiAgICAgICAgaXNDaGVja2VkLFxuICAgICAgICBpc0RlZmF1bHRDaGVja2VkLFxuICAgICAgICBpc0Rpc2FibGVkLFxuICAgICAgICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH0gZWxzZVxuICAgIG91dHB1dCA9IHNoYWxsb3coXG4gICAgICBDb21wb25lbnQoXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMuaXNDaGVja2VkLFxuICAgICAgICBkZWZhdWx0VmFsdWVzLmlzRGVmYXVsdENoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgICAgICAgZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMucG9zaXRpb24sXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuXG4gIHJldHVybiBkZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gICAgLyogaWYgKGNoZWNrYm94LnByb3BzLmlzQ2hlY2tlZCkge1xuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKGNoZWNrYm94LnByb3BzLmlzQ2hlY2tlZCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2VcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc0NoZWNrZWQ6ICR7ZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKGRlZmF1bHRWYWx1ZXMuaXNDaGVja2VkKTtcbiAgICAgIH0pOyovXG4gICAgaWYgKGlzRGVmYXVsdENoZWNrZWQpIHtcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2lzRGVmYXVsdENoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGVmYXVsdENoZWNrZWQnKSkudG9FcXVhbChpc0RlZmF1bHRDaGVja2VkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtkZWZhdWx0VmFsdWVzLmlzRGVmYXVsdENoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGVmYXVsdENoZWNrZWQnKSkudG9FcXVhbChcbiAgICAgICAgICBkZWZhdWx0VmFsdWVzLmlzRGVmYXVsdENoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2cob3V0cHV0KTtcbiAgICB9XG5cbiAgICAvKmlmIChjaGVja2JveC5wcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtjaGVja2JveC5wcm9wcy5pc0Rpc2FibGVkfWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2VcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2RlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEaXNhYmxlZCcpKS50b0VxdWFsKGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCk7XG4gICAgICB9KTtcblxuICAgIGlmIChjaGVja2JveC5wcm9wcy5pc1BhcnRpYWxseUNoZWNrZWQpIHtcbiAgICAgIGl0KGBTaG91bGQgaGF2ZSBpc1BhcnRpYWxseUNoZWNrZWQ6ICR7Y2hlY2tib3gucHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkfWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc1BhcnRpYWxseUNoZWNrZWQnKSkudG9FcXVhbChcbiAgICAgICAgICBjaGVja2JveC5wcm9wcy5pc1BhcnRpYWxseUNoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZVxuICAgICAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtkZWZhdWx0VmFsdWVzLmlzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoXG4gICAgICAgICAgZGVmYXVsdFZhbHVlcy5pc1BhcnRpYWxseUNoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrYm94LnByb3BzLnBvc2l0aW9uKSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7Y2hlY2tib3gucHJvcHMucG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMucG9zaXRpb24pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlXG4gICAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7ZGVmYXVsdFZhbHVlcy5wb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgncG9zaXRpb24nKSkudG9FcXVhbChkZWZhdWx0VmFsdWVzLnBvc2l0aW9uKTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrYm94LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICBpdChgU2hvdWxkIGhhdmUgY2hpbGRyZW46ICR7Y2hlY2tib3gucHJvcHMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlXG4gICAgICBpdChgU2hvdWxkIGhhdmUgY2hpbGRyZW46ICR7ZGVmYXVsdFZhbHVlcy5jaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnY2hpbGRyZW4nKSkudG9FcXVhbChkZWZhdWx0VmFsdWVzLmNoaWxkcmVuKTtcbiAgICAgIH0pOyovXG4gIH0pO1xufTtcblxudGVzdHMoKTtcbiJdfQ==