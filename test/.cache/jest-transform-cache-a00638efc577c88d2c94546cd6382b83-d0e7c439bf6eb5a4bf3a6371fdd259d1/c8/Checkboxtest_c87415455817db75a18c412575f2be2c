f4867cd4fc2dfc81d86a794d336c506c
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component(), props = {
  isChecked: true,
  isDefaultChecked: true,
  isDisabled: true,
  isPartiallyChecked: true,
  position,
  children: 'Text'
}) => {
  output = (0, _enzyme.shallow)(checkbox);
  console.log(position);
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${props.isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(props.isChecked);
    });
    it(`Should have isDefaultChecked: ${props.isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(props.isDefaultChecked);
    });
    it(`Should have isDisabled: ${props.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(props.isDisabled);
    });
    it(`Should have isPartiallyChecked: ${props.isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(props.isPartiallyChecked);
    });
    it(`Should have position: ${props.position}`, () => {
      expect(output.prop('position')).toEqual(props.position);
    });
    it(`Should have children: ${props.children}`, () => {
      expect(output.prop('children')).toEqual(props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsInRlc3RzIiwiY2hlY2tib3giLCJwcm9wcyIsImNvbnNvbGUiLCJsb2ciLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwicHJvcCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQ3ZCQyxTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVMLFNBRGI7QUFFRSxJQUFBLGtCQUFrQixFQUFFRyxrQkFGdEI7QUFHRSxJQUFBLGdCQUFnQixFQUFFRixnQkFIcEI7QUFJRSxJQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT0dDLFFBUEgsQ0FERjtBQVdELENBbkJNOzs7QUFxQlAsSUFBSUMsTUFBTSxHQUFHLHFCQUFRUCxTQUFTLEVBQWpCLENBQWI7O0FBRU8sTUFBTVEsS0FBSyxHQUFHLENBQ25CQyxRQUFRLEdBQUdULFNBQVMsRUFERCxFQUVuQlUsS0FBSyxHQUFHO0FBQ05ULEVBQUFBLFNBQVMsRUFBRSxJQURMO0FBRU5DLEVBQUFBLGdCQUFnQixFQUFFLElBRlo7QUFHTkMsRUFBQUEsVUFBVSxFQUFFLElBSE47QUFJTkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFKZDtBQUtOQyxFQUFBQSxRQUxNO0FBTU5DLEVBQUFBLFFBQVEsRUFBRTtBQU5KLENBRlcsS0FVaEI7QUFDSEMsRUFBQUEsTUFBTSxHQUFHLHFCQUFRRSxRQUFSLENBQVQ7QUFDQUUsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlQLFFBQVo7QUFDQSxTQUFPUSxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDaENDLElBQUFBLEVBQUUsQ0FBRSwwQkFBeUJKLEtBQUssQ0FBQ1QsU0FBVSxFQUEzQyxFQUE4QyxNQUFNO0FBQ3BEYyxNQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLFdBQVosQ0FBRCxDQUFOLENBQWlDQyxPQUFqQyxDQUF5Q1AsS0FBSyxDQUFDVCxTQUEvQztBQUNELEtBRkMsQ0FBRjtBQUlBYSxJQUFBQSxFQUFFLENBQUUsaUNBQWdDSixLQUFLLENBQUNSLGdCQUFpQixFQUF6RCxFQUE0RCxNQUFNO0FBQ2xFYSxNQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLGtCQUFaLENBQUQsQ0FBTixDQUF3Q0MsT0FBeEMsQ0FBZ0RQLEtBQUssQ0FBQ1IsZ0JBQXREO0FBQ0QsS0FGQyxDQUFGO0FBSUFZLElBQUFBLEVBQUUsQ0FBRSwyQkFBMEJKLEtBQUssQ0FBQ1AsVUFBVyxFQUE3QyxFQUFnRCxNQUFNO0FBQ3REWSxNQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLFlBQVosQ0FBRCxDQUFOLENBQWtDQyxPQUFsQyxDQUEwQ1AsS0FBSyxDQUFDUCxVQUFoRDtBQUNELEtBRkMsQ0FBRjtBQUlBVyxJQUFBQSxFQUFFLENBQUUsbUNBQWtDSixLQUFLLENBQUNOLGtCQUFtQixFQUE3RCxFQUFnRSxNQUFNO0FBQ3RFVyxNQUFBQSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLG9CQUFaLENBQUQsQ0FBTixDQUEwQ0MsT0FBMUMsQ0FDRVAsS0FBSyxDQUFDTixrQkFEUjtBQUdELEtBSkMsQ0FBRjtBQU1BVSxJQUFBQSxFQUFFLENBQUUseUJBQXdCSixLQUFLLENBQUNMLFFBQVMsRUFBekMsRUFBNEMsTUFBTTtBQUNsRFUsTUFBQUEsTUFBTSxDQUFDUixNQUFNLENBQUNTLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0NQLEtBQUssQ0FBQ0wsUUFBOUM7QUFDRCxLQUZDLENBQUY7QUFJQVMsSUFBQUEsRUFBRSxDQUFFLHlCQUF3QkosS0FBSyxDQUFDSixRQUFTLEVBQXpDLEVBQTRDLE1BQU07QUFDbERTLE1BQUFBLE1BQU0sQ0FBQ1IsTUFBTSxDQUFDUyxJQUFQLENBQVksVUFBWixDQUFELENBQU4sQ0FBZ0NDLE9BQWhDLENBQXdDUCxLQUFLLENBQUNKLFFBQTlDO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0ExQmMsQ0FBZjtBQTJCRCxDQXhDTTs7O0FBMENQRSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tICcuL0NoZWNrYm94JztcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChcbiAgaXNDaGVja2VkLFxuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uLFxuICBjaGlsZHJlblxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPENoZWNrYm94XG4gICAgICBpc0NoZWNrZWQ9e2lzQ2hlY2tlZH1cbiAgICAgIGlzUGFydGlhbGx5Q2hlY2tlZD17aXNQYXJ0aWFsbHlDaGVja2VkfVxuICAgICAgaXNEZWZhdWx0Q2hlY2tlZD17aXNEZWZhdWx0Q2hlY2tlZH1cbiAgICAgIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICBwb3NpdGlvbj17cG9zaXRpb259XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ2hlY2tib3g+XG4gICk7XG59O1xuXG5sZXQgb3V0cHV0ID0gc2hhbGxvdyhDb21wb25lbnQoKSk7XG5cbmV4cG9ydCBjb25zdCB0ZXN0cyA9IChcbiAgY2hlY2tib3ggPSBDb21wb25lbnQoKSxcbiAgcHJvcHMgPSB7XG4gICAgaXNDaGVja2VkOiB0cnVlLFxuICAgIGlzRGVmYXVsdENoZWNrZWQ6IHRydWUsXG4gICAgaXNEaXNhYmxlZDogdHJ1ZSxcbiAgICBpc1BhcnRpYWxseUNoZWNrZWQ6IHRydWUsXG4gICAgcG9zaXRpb24sXG4gICAgY2hpbGRyZW46ICdUZXh0J1xuICB9XG4pID0+IHtcbiAgb3V0cHV0ID0gc2hhbGxvdyhjaGVja2JveCk7XG4gIGNvbnNvbGUubG9nKHBvc2l0aW9uKTtcbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNDaGVja2VkOiAke3Byb3BzLmlzQ2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKHByb3BzLmlzQ2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtwcm9wcy5pc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEZWZhdWx0Q2hlY2tlZCcpKS50b0VxdWFsKHByb3BzLmlzRGVmYXVsdENoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRGlzYWJsZWQ6ICR7cHJvcHMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChwcm9wcy5pc0Rpc2FibGVkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc1BhcnRpYWxseUNoZWNrZWQ6ICR7cHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoXG4gICAgICAgIHByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBwb3NpdGlvbjogJHtwcm9wcy5wb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwocHJvcHMucG9zaXRpb24pO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGNoaWxkcmVuOiAke3Byb3BzLmNoaWxkcmVufWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcCgnY2hpbGRyZW4nKSkudG9FcXVhbChwcm9wcy5jaGlsZHJlbik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudGVzdHMoKTtcbiJdfQ==