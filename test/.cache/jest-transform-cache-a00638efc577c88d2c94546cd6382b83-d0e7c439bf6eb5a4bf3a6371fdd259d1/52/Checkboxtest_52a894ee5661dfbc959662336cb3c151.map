{"version":3,"sources":["Checkbox.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isPartiallyChecked","position","children","output","tests","describe","undefined","it","expect","prop","toEqual","defaultValues"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,kBAJuB,EAKvBC,QALuB,EAMvBC,QANuB,KAOpB;AACH,SACE,6BAAC,kBAAD;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,kBAAkB,EAAEG,kBAFtB;AAGE,IAAA,gBAAgB,EAAEF,gBAHpB;AAIE,IAAA,UAAU,EAAEC,UAJd;AAKE,IAAA,QAAQ,EAAEE,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGC,QAPH,CADF;AAWD,CAnBM;;;AAqBP,IAAIC,MAAM,GAAG,qBAAQP,SAAS,EAAjB,CAAb;;AAEO,MAAMQ,KAAK,GAAG,CACnBP,SADmB,EAEnBC,gBAFmB,EAGnBC,UAHmB,EAInBC,kBAJmB,EAKnBC,QALmB,EAMnBC,QANmB,KAOhB;AACH,MAAIJ,gBAAJ,EAAsB;AACpBK,IAAAA,MAAM,GAAG,qBACPP,SAAS,CACPC,SADO,EAEPC,gBAFO,EAGPC,UAHO,EAIPC,kBAJO,EAKPC,QALO,EAMPC,QANO,CADF,CAAT;AAUD;;AAED,SAAOG,QAAQ,CAAC,UAAD,EAAa,MAAM;AAChC,QAAIP,gBAAgB,KAAKQ,SAAzB,EAAoC;AAClCC,MAAAA,EAAE,CAAE,iCAAgCT,gBAAiB,EAAnD,EAAsD,MAAM;AAC5DU,QAAAA,MAAM,CAACL,MAAM,CAACM,IAAP,CAAY,kBAAZ,CAAD,CAAN,CAAwCC,OAAxC,CAAgDZ,gBAAhD;AACD,OAFC,CAAF;AAGD,KAJD,MAIO;AACLS,MAAAA,EAAE,CAAE,iCAAgCI,6BAAcb,gBAAiB,EAAjE,EAAoE,MAAM;AAC1EU,QAAAA,MAAM,CAACL,MAAM,CAACM,IAAP,CAAY,kBAAZ,CAAD,CAAN,CAAwCC,OAAxC,CACEC,6BAAcb,gBADhB;AAGD,OAJC,CAAF;AAKD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDD,GA5Dc,CAAf;AA6DD,CAlFM;;;AAoFPM,KAAK","sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nimport { defaultValues } from './defaultValues';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      isPartiallyChecked={isPartiallyChecked}\n      isDefaultChecked={isDefaultChecked}\n      isDisabled={isDisabled}\n      position={position}\n    >\n      {children}\n    </Checkbox>\n  );\n};\n\nlet output = shallow(Component());\n\nexport const tests = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  if (isDefaultChecked) {\n    output = shallow(\n      Component(\n        isChecked,\n        isDefaultChecked,\n        isDisabled,\n        isPartiallyChecked,\n        position,\n        children\n      )\n    );\n  }\n\n  return describe('Checkbox', () => {\n    if (isDefaultChecked !== undefined) {\n      it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);\n      });\n    } else {\n      it(`Should have isDefaultChecked: ${defaultValues.isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n    }\n    /* if (checkbox.props.isChecked) {\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n    } else\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });\n\n    if (checkbox.props.isDisabled) {\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n    } else\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n\n    if (checkbox.props.isPartiallyChecked) {\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n    } else\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n\n    if (checkbox.props.position) {\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n    } else\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n\n    if (checkbox.props.children) {\n      it(`Should have children: ${checkbox.props.children}`, () => {\n        expect(output.prop('children')).toEqual(checkbox.props.children);\n      });\n    } else\n      it(`Should have children: ${defaultValues.children}`, () => {\n        expect(output.prop('children')).toEqual(defaultValues.children);\n      });*/\n  });\n};\n\ntests();\n"]}