2bdddfd4062f5d86b379248fade6db71
"use strict";

var _interopRequireWildcard = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledCheckboxIcon = exports.StyledCheckboxSpan = exports.StyledCheckboxMark = exports.StyledCheckboxLabel = exports.StyledCheckboxInputShown = exports.HiddenCheckbox = void 0;

var _polished = require("polished");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _theme = require("../../theme");

const HiddenCheckbox = _styledComponents.default.input.attrs({
  type: 'checkbox'
})`
  opacity: 0;
  width: 0;
  height: 0;
  margin: 0;
  position: absolute;
  z-index: -1;
`;
exports.HiddenCheckbox = HiddenCheckbox;
const StyledCheckboxInputShown = _styledComponents.default.div.attrs({
  className: `atlantic--checkbox`
})`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: ${props => parseInt(props.theme.padding.xs, 0) - 1}px;
  background: white;
  border-radius: ${props => parseInt(props.theme.radius, 0) - 1}px;
  border: 1px solid ${props => (0, _polished.darken)(0.1, props.theme.color.default)};

  ${props => props.isDisabled && _styledComponents.css`
      background-color: ${props.theme.color.default};
      cursor: not-allowed;
    `}
`;
exports.StyledCheckboxInputShown = StyledCheckboxInputShown;
const StyledCheckboxLabel = _styledComponents.default.label`
  height: ${props => props.theme.height.sm};
  font-size: 14px;
  font-family: ${props => props.theme.font.family};
  display: inline-flex;
  align-items: center;
  cursor: pointer;

  ${props => !props.isDisabled && _styledComponents.css`
      :hover {
        .atlantic--checkbox {
          border: 1px solid ${props.theme.color.primary};
        }
      }
    `};

  ${props => props.isDisabled && _styledComponents.css`
      cursor: not-allowed;
    `};
`;
exports.StyledCheckboxLabel = StyledCheckboxLabel;
const StyledCheckboxMark = _styledComponents.default.div`
  display: flex;
  align-items: center;
  justify-content: center;
  width: ${props => props.theme.width.xs};
  height: ${props => props.theme.width.xs};
  border-radius: ${props => parseInt(props.theme.radius, 0) - 2}px;
  
  i{
    height: 14px;
  }

  ${props => (props.isChecked || props.isPartiallyChecked) && _styledComponents.css`
      background-color: ${props.theme.color.primary};
    `}

  ${props => props.isDisabled && (props.isChecked || props.isPartiallyChecked) && _styledComponents.css`
      background-color: ${(0, _polished.darken)(0.2, props.theme.color.default)};
    `}
  
    ${props => props.isDisabled && _styledComponents.css`
        color: transparent;
        cursor: not-allowed;
      `}
`;
exports.StyledCheckboxMark = StyledCheckboxMark;
const StyledCheckboxSpan = _styledComponents.default.span`
  padding: 0 ${props => props.theme.padding.md};
  user-select: none;
  line-height: 1;

  ${props => props.isDisabled && _styledComponents.css`
      cursor: not-allowed;
    `}
`;
exports.StyledCheckboxSpan = StyledCheckboxSpan;
const StyledCheckboxIcon = _styledComponents.default.i`
  transform: scale(0.8);
  color: white;
  ${props => (props.isPartiallyChecked || !props.isChecked && props.isDisabled) && _styledComponents.css`
      color: transparent;
    `}

  ${props => props.isDisabled && _styledComponents.css`
      cursor: not-allowed;
    `}
`;
exports.StyledCheckboxIcon = StyledCheckboxIcon;
HiddenCheckbox.defaultProps = {
  theme: _theme.theme
};
StyledCheckboxInputShown.defaultProps = {
  theme: _theme.theme
};
StyledCheckboxLabel.defaultProps = {
  theme: _theme.theme
};
StyledCheckboxMark.defaultProps = {
  theme: _theme.theme
};
StyledCheckboxSpan.defaultProps = {
  theme: _theme.theme
};
StyledCheckboxIcon.defaultProps = {
  theme: _theme.theme
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnN0eWxlLnRzIl0sIm5hbWVzIjpbIkhpZGRlbkNoZWNrYm94Iiwic3R5bGVkIiwiaW5wdXQiLCJhdHRycyIsInR5cGUiLCJTdHlsZWRDaGVja2JveElucHV0U2hvd24iLCJkaXYiLCJjbGFzc05hbWUiLCJwcm9wcyIsInBhcnNlSW50IiwidGhlbWUiLCJwYWRkaW5nIiwieHMiLCJyYWRpdXMiLCJjb2xvciIsImRlZmF1bHQiLCJpc0Rpc2FibGVkIiwiY3NzIiwiU3R5bGVkQ2hlY2tib3hMYWJlbCIsImxhYmVsIiwiaGVpZ2h0Iiwic20iLCJmb250IiwiZmFtaWx5IiwicHJpbWFyeSIsIlN0eWxlZENoZWNrYm94TWFyayIsIndpZHRoIiwiaXNDaGVja2VkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwiU3R5bGVkQ2hlY2tib3hTcGFuIiwic3BhbiIsIm1kIiwiU3R5bGVkQ2hlY2tib3hJY29uIiwiaSIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBV08sTUFBTUEsY0FBYyxHQUFHQywwQkFBT0MsS0FBUCxDQUFhQyxLQUFiLENBQW1CO0FBQy9DQyxFQUFBQSxJQUFJLEVBQUU7QUFEeUMsQ0FBbkIsQ0FFM0I7Ozs7Ozs7Q0FGSTs7QUFXQSxNQUFNQyx3QkFBd0IsR0FBR0osMEJBQU9LLEdBQVAsQ0FBV0gsS0FBWCxDQUFpQjtBQUN2REksRUFBQUEsU0FBUyxFQUFHO0FBRDJDLENBQWpCLENBRWhCOzs7O2FBSVhDLEtBQUssSUFBSUMsUUFBUSxDQUFDRCxLQUFLLENBQUNFLEtBQU4sQ0FBWUMsT0FBWixDQUFvQkMsRUFBckIsRUFBeUIsQ0FBekIsQ0FBUixHQUFzQyxDQUFFOzttQkFFM0NKLEtBQUssSUFBSUMsUUFBUSxDQUFDRCxLQUFLLENBQUNFLEtBQU4sQ0FBWUcsTUFBYixFQUFxQixDQUFyQixDQUFSLEdBQWtDLENBQUU7c0JBQzFDTCxLQUFLLElBQUksc0JBQU8sR0FBUCxFQUFZQSxL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QUFEZ0MsQ0FBbEM7QUFHQXNCLGtCQUFrQixDQUFDRSxZQUFuQixHQUFrQztBQUNoQ3hCLEVBQUFBLEtBQUssRUFBTEE7QUFEZ0MsQ0FBbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkYXJrZW4gfSBmcm9tICdwb2xpc2hlZCc7XG5pbXBvcnQgc3R5bGVkLCB7IGNzcyB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWUnO1xuXG5pbnRlcmZhY2UgU3R5bGVkQ2hlY2tib3hQcm9wcyB7XG4gIGlzQ2hlY2tlZD86IGJvb2xlYW47XG4gIGlzUGFydGlhbGx5Q2hlY2tlZD86IGJvb2xlYW47XG4gIGlzRGlzYWJsZWQ/OiBib29sZWFuO1xuICBpc1RleHREb3R0ZWQ/OiBib29sZWFuO1xuICBuYW1lPzogc3RyaW5nO1xuICB0ZXh0UG9zaXRpb24/OiAncmlnaHQnIHwgJ2xlZnQnO1xufVxuXG5leHBvcnQgY29uc3QgSGlkZGVuQ2hlY2tib3ggPSBzdHlsZWQuaW5wdXQuYXR0cnMoe1xuICB0eXBlOiAnY2hlY2tib3gnXG59KWBcbiAgb3BhY2l0eTogMDtcbiAgd2lkdGg6IDA7XG4gIGhlaWdodDogMDtcbiAgbWFyZ2luOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IC0xO1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZENoZWNrYm94SW5wdXRTaG93biA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6IGBhdGxhbnRpYy0tY2hlY2tib3hgXG59KTxTdHlsZWRDaGVja2JveFByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBhZGRpbmc6ICR7cHJvcHMgPT4gcGFyc2VJbnQocHJvcHMudGhlbWUucGFkZGluZy54cywgMCkgLSAxfXB4O1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogJHtwcm9wcyA9PiBwYXJzZUludChwcm9wcy50aGVtZS5yYWRpdXMsIDApIC0gMX1weDtcbiAgYm9yZGVyOiAxcHggc29saWQgJHtwcm9wcyA9PiBkYXJrZW4oMC4xLCBwcm9wcy50aGVtZS5jb2xvci5kZWZhdWx0KX07XG5cbiAgJHtwcm9wcyA9PlxuICAgIHByb3BzLmlzRGlzYWJsZWQgJiZcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzLnRoZW1lLmNvbG9yLmRlZmF1bHR9O1xuICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICBgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWw8U3R5bGVkQ2hlY2tib3hQcm9wcz5gXG4gIGhlaWdodDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5oZWlnaHQuc219O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtZmFtaWx5OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmZvbnQuZmFtaWx5fTtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGN1cnNvcjogcG9pbnRlcjtcblxuICAke3Byb3BzID0+XG4gICAgIXByb3BzLmlzRGlzYWJsZWQgJiZcbiAgICBjc3NgXG4gICAgICA6aG92ZXIge1xuICAgICAgICAuYXRsYW50aWMtLWNoZWNrYm94IHtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke3Byb3BzLnRoZW1lLmNvbG9yLnByaW1hcnl9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgYH07XG5cbiAgJHtwcm9wcyA9PlxuICAgIHByb3BzLmlzRGlzYWJsZWQgJiZcbiAgICBjc3NgXG4gICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgIGB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZENoZWNrYm94TWFyayA9IHN0eWxlZC5kaXY8U3R5bGVkQ2hlY2tib3hQcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS53aWR0aC54c307XG4gIGhlaWdodDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS53aWR0aC54c307XG4gIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMgPT4gcGFyc2VJbnQocHJvcHMudGhlbWUucmFkaXVzLCAwKSAtIDJ9cHg7XG4gIFxuICBpe1xuICAgIGhlaWdodDogMTRweDtcbiAgfVxuXG4gICR7cHJvcHMgPT5cbiAgICAocHJvcHMuaXNDaGVja2VkIHx8IHByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZCkgJiZcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzLnRoZW1lLmNvbG9yLnByaW1hcnl9O1xuICAgIGB9XG5cbiAgJHtwcm9wcyA9PlxuICAgIHByb3BzLmlzRGlzYWJsZWQgJiZcbiAgICAocHJvcHMuaXNDaGVja2VkIHx8IHByb3BzLmlzUGFydGlhbGx5Q2hlY2tlZCkgJiZcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2RhcmtlbigwLjIsIHByb3BzLnRoZW1lLmNvbG9yLmRlZmF1bHQpfTtcbiAgICBgfVxuICBcbiAgICAke3Byb3BzID0+XG4gICAgICBwcm9wcy5pc0Rpc2FibGVkICYmXG4gICAgICBjc3NgXG4gICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICAgIGB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkQ2hlY2tib3hTcGFuID0gc3R5bGVkLnNwYW48U3R5bGVkQ2hlY2tib3hQcm9wcz5gXG4gIHBhZGRpbmc6IDAgJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5wYWRkaW5nLm1kfTtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuXG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5pc0Rpc2FibGVkICYmXG4gICAgY3NzYFxuICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICBgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZENoZWNrYm94SWNvbiA9IHN0eWxlZC5pPFN0eWxlZENoZWNrYm94UHJvcHM+YFxuICB0cmFuc2Zvcm06IHNjYWxlKDAuOCk7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgJHtwcm9wcyA9PlxuICAgIChwcm9wcy5pc1BhcnRpYWxseUNoZWNrZWQgfHwgKCFwcm9wcy5pc0NoZWNrZWQgJiYgcHJvcHMuaXNEaXNhYmxlZCkpICYmXG4gICAgY3NzYFxuICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGB9XG5cbiAgJHtwcm9wcyA9PlxuICAgIHByb3BzLmlzRGlzYWJsZWQgJiZcbiAgICBjc3NgXG4gICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgIGB9XG5gO1xuXG5IaWRkZW5DaGVja2JveC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRoZW1lXG59O1xuXG5TdHlsZWRDaGVja2JveElucHV0U2hvd24uZGVmYXVsdFByb3BzID0ge1xuICB0aGVtZVxufTtcblxuU3R5bGVkQ2hlY2tib3hMYWJlbC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRoZW1lXG59O1xuXG5TdHlsZWRDaGVja2JveE1hcmsuZGVmYXVsdFByb3BzID0ge1xuICB0aGVtZVxufTtcblN0eWxlZENoZWNrYm94U3Bhbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHRoZW1lXG59O1xuU3R5bGVkQ2hlY2tib3hJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGhlbWVcbn07XG4iXX0=