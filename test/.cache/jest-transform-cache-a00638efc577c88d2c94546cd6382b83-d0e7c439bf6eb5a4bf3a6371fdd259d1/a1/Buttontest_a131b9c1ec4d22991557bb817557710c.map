{"version":3,"sources":["Button.test.jsx"],"names":["mockClick","jest","fn","Component","isChecked","isDefaultChecked","isDisabled","isFullWidth","isRound","size","type","value","output","tests","button","defaultValues","props","text","toEqual","setProps","onClick","simulate","toHaveBeenCalled","not","prop"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMA,SAAS,GAAGC,IAAI,CAACC,EAAL,EAAlB;;AACO,MAAMC,SAAS,GAAG,CACvBC,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,WAJuB,EAKvBC,OALuB,EAMvBC,IANuB,EAOvBC,IAPuB,EAQvBC,KARuB,KASpB;AACH,SACE,6BAAC,cAAD;AACE,IAAA,UAAU,EAAEL,UADd;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,IAAI,EAAEC,IALR;AAME,IAAA,OAAO,EAAEV,SANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGW,KARH,CADF;AAYD,CAtBM;;;AAwBP,IAAIC,MAAJ;;AAEO,MAAMC,KAAK,GAAG,CACnBC,MAAM,GAAGX,SAAS,CAChBY,6BAAcX,SADE,EAEhBW,6BAAcV,gBAFE,EAGhBU,6BAAcT,UAHE,EAIhBS,6BAAcR,WAJE,EAKhBQ,6BAAcP,OALE,EAMhBO,6BAAcN,IANE,EAOhBM,6BAAcL,IAPE,EAQhBK,6BAAcJ,KARE,CADC,KAWhB;AACHC,EAAAA,MAAM,GAAG,mBAAME,MAAN,CAAT;AAEA,SAAO,4CAAS,QAAT,EAAmB,MAAM;AAC9B,0CAAI,+BAA8BA,MAAM,CAACE,KAAP,CAAaL,KAAM,EAArD,EAAwD,MACtD,qBAAOC,MAAM,CAACK,IAAP,EAAP,EAAsBC,OAAtB,CAA8BP,KAA9B,CADF;AAGA,0CAAI,2DAAJ,EAAgE,MAAM;AACpE,YAAMX,SAAS,GAAGC,IAAI,CAACC,EAAL,EAAlB;AAEAU,MAAAA,MAAM,CAACO,QAAP,CAAgB;AACdC,QAAAA,OAAO,EAAEpB;AADK,OAAhB;AAIAY,MAAAA,MAAM,CAACS,QAAP,CAAgB,OAAhB;;AAEA,UAAI,CAACf,UAAL,EAAiB;AACf,6BAAON,SAAP,EAAkBsB,gBAAlB;AACD,OAFD,MAEO;AACL,6BAAOtB,SAAP,EAAkBuB,GAAlB,CAAsBD,gBAAtB;AACD;AACF,KAdD;AAgBA,0CAAI,2BAA0BhB,UAAW,EAAzC,EAA4C,MAAM;AAChD,2BAAOM,MAAM,CAACY,IAAP,CAAY,YAAZ,CAAP,EAAkCN,OAAlC,CAA0CZ,UAA1C;AACD,KAFD;AAIA,0CAAI,wBAAuBE,OAAQ,EAAnC,EAAsC,MAAM;AAC1C,2BAAOI,MAAM,CAACY,IAAP,CAAY,SAAZ,CAAP,EAA+BN,OAA/B,CAAuCV,OAAvC;AACD,KAFD;AAIA,0CAAI,4BAA2BD,WAAY,EAA3C,EAA8C,MAAM;AAClD,2BAAOK,MAAM,CAACY,IAAP,CAAY,aAAZ,CAAP,EAAmCN,OAAnC,CAA2CX,WAA3C;AACD,KAFD;AAIA,0CAAI,qBAAoBG,IAAK,EAA7B,EAAgC,MAAM;AACpC,2BAAOE,MAAM,CAACY,IAAP,CAAY,MAAZ,CAAP,EAA4BN,OAA5B,CAAoCR,IAApC;AACD,KAFD;AAIA,0CAAI,qBAAoBD,IAAK,EAA7B,EAAgC,MAAM;AACpC,2BAAOG,MAAM,CAACY,IAAP,CAAY,MAAZ,CAAP,EAA4BN,OAA5B,CAAoCT,IAApC;AACD,KAFD;AAGD,GAvCM,CAAP;AAwCD,CAtDM;;;AAwDPI,KAAK","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { defaultValues } from '../../constants/defaultValues';\nimport { Button } from './Button';\nimport { describe, it } from 'storybook-addon-specifications';\nimport expect from 'expect';\n\nconst mockClick = jest.fn();\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={mockClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nlet output;\n\nexport const tests = (\n  button = Component(\n    defaultValues.isChecked,\n    defaultValues.isDefaultChecked,\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.value\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have the right text: ${button.props.value}`, () =>\n      expect(output.text()).toEqual(value));\n\n    it(`onClick should have been called if Button is not disabled`, () => {\n      const mockClick = jest.fn();\n\n      output.setProps({\n        onClick: mockClick\n      });\n\n      output.simulate('click');\n\n      if (!isDisabled) {\n        expect(mockClick).toHaveBeenCalled();\n      } else {\n        expect(mockClick).not.toHaveBeenCalled();\n      }\n    });\n\n    it(`Should have isDisabled: ${isDisabled}`, () => {\n      expect(output.prop('isDisabled')).toEqual(isDisabled);\n    });\n\n    it(`Should have isRound: ${isRound}`, () => {\n      expect(output.prop('isRound')).toEqual(isRound);\n    });\n\n    it(`Should have isFullWidth: ${isFullWidth}`, () => {\n      expect(output.prop('isFullWidth')).toEqual(isFullWidth);\n    });\n\n    it(`Should have type: ${type}`, () => {\n      expect(output.prop('type')).toEqual(type);\n    });\n\n    it(`Should have size: ${size}`, () => {\n      expect(output.prop('size')).toEqual(size);\n    });\n  });\n};\n\ntests();\n"]}