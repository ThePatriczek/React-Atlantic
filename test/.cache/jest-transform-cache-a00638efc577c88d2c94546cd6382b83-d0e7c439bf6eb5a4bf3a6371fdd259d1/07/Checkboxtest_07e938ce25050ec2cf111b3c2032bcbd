f3a1e75165cafb460f3b401deb54dff3
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _defaultValues = require("./defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (checkbox, isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  output = (0, _enzyme.mount)(Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children));

  if (isDefaultChecked !== undefined) {
    output = (0, _enzyme.mount)(Component(isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children));
  }

  console.log('DefaultChecked: ', isDefaultChecked);
  return describe('Checkbox', () => {
    if (isDefaultChecked !== undefined) {
      it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
        expect(output.props().isDefaultChecked).toEqual(isDefaultChecked);
      });
    } else {
      it(`Should have isDefaultChecked: ${_defaultValues.defaultValues.isDefaultChecked}`, () => {
        console.log(output.props());
        expect(output.props().isDefaultChecked).toEqual(_defaultValues.defaultValues.isDefaultChecked);
      });
    }

    if (checkbox.props.isChecked) {
      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
      });
    } else it(`Should have isChecked: ${_defaultValues.defaultValues.isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(_defaultValues.defaultValues.isChecked);
    });

    if (checkbox.props.isDisabled) {
      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
      });
    } else it(`Should have isDisabled: ${_defaultValues.defaultValues.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(_defaultValues.defaultValues.isDisabled);
    });

    if (checkbox.props.isPartiallyChecked) {
      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
        expect(output.prop('isPartiallyChecked')).toEqual(checkbox.props.isPartiallyChecked);
      });
    } else it(`Should have isPartiallyChecked: ${_defaultValues.defaultValues.isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(_defaultValues.defaultValues.isPartiallyChecked);
    });

    if (checkbox.props.position) {
      it(`Should have position: ${checkbox.props.position}`, () => {
        expect(output.prop('position')).toEqual(checkbox.props.position);
      });
    } else it(`Should have position: ${_defaultValues.defaultValues.position}`, () => {
      expect(output.prop('position')).toEqual(_defaultValues.defaultValues.position);
    });

    if (checkbox.props.children) {
      it(`Should have children: ${checkbox.props.children}`, () => {
        expect(output.prop('children')).toEqual(checkbox.props.children);
      });
    } else it(`Should have children: ${_defaultValues.defaultValues.children}`, () => {
      expect(output.prop('children')).toEqual(_defaultValues.defaultValues.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,