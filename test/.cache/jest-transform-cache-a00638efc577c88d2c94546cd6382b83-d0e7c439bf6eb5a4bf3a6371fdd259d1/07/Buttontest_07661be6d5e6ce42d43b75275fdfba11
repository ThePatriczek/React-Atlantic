67517bdb2406c39ceea330bdb10ea074
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Button = require("./Button");

var _defaultValues = require("../../constants/defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Button/Button.test.jsx";

const Component = (isDisabled, isFullWidth, isRound, size, type, children, onClick) => {
  return _react.default.createElement(_Button.Button, {
    isDisabled: isDisabled,
    isFullWidth: isFullWidth,
    isRound: isRound,
    size: size,
    type: type,
    onClick: onClick,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (button = Component(_defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isFullWidth, _defaultValues.defaultValues.isRound, _defaultValues.defaultValues.size, _defaultValues.defaultValues.type, _defaultValues.defaultValues.children)) => {
  output = (0, _enzyme.mount)(button);
  return describe('Button', () => {
    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {
      expect(output.props().isDisabled).toEqual(button.props.isDisabled);
    });
    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {
      expect(output.props().isFullWidth).toEqual(button.props.isFullWidth);
    });
    it(`Should have isRound: ${button.props.isRound}`, () => {
      expect(output.props().isRound).toEqual(button.props.isRound);
    });
    it(`Should have size: ${button.props.size}`, () => {
      expect(output.props().size).toEqual(button.props.size);
    });
    it(`Should have type: ${button.props.type}`, () => {
      expect(output.props().type).toEqual(button.props.type);
    });
    it(`onClick should have been called if Button is not disabled`, () => {
      const mockClick = jest.fn();
      output.setProps({
        onClick: mockClick
      });
      output.simulate('click');

      if (!isDisabled) {
        expect(mockClick).toHaveBeenCalled();
      } else {
        expect(mockClick).not.toHaveBeenCalled();
      }
    });
    it(`Should have children: ${button.props.children}`, () => {
      expect(output.text()).toEqual(button.props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LmpzeCJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJpc0Rpc2FibGVkIiwiaXNGdWxsV2lkdGgiLCJpc1JvdW5kIiwic2l6ZSIsInR5cGUiLCJjaGlsZHJlbiIsIm9uQ2xpY2siLCJvdXRwdXQiLCJ0ZXN0cyIsImJ1dHRvbiIsImRlZmF1bHRWYWx1ZXMiLCJkZXNjcmliZSIsIml0IiwicHJvcHMiLCJleHBlY3QiLCJ0b0VxdWFsIiwibW9ja0NsaWNrIiwiamVzdCIsImZuIiwic2V0UHJvcHMiLCJzaW11bGF0ZSIsInRvSGF2ZUJlZW5DYWxsZWQiLCJub3QiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLFNBQVMsR0FBRyxDQUN2QkMsVUFEdUIsRUFFdkJDLFdBRnVCLEVBR3ZCQyxPQUh1QixFQUl2QkMsSUFKdUIsRUFLdkJDLElBTHVCLEVBTXZCQyxRQU51QixFQU92QkMsT0FQdUIsS0FRcEI7QUFDSCxTQUNFLDZCQUFDLGNBQUQ7QUFDRSxJQUFBLFVBQVUsRUFBRU4sVUFEZDtBQUVFLElBQUEsV0FBVyxFQUFFQyxXQUZmO0FBR0UsSUFBQSxPQUFPLEVBQUVDLE9BSFg7QUFJRSxJQUFBLElBQUksRUFBRUMsSUFKUjtBQUtFLElBQUEsSUFBSSxFQUFFQyxJQUxSO0FBTUUsSUFBQSxPQUFPLEVBQUVFLE9BTlg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FRR0QsUUFSSCxDQURGO0FBWUQsQ0FyQk07OztBQXVCUCxJQUFJRSxNQUFKOztBQUVPLE1BQU1DLEtBQUssR0FBRyxDQUNuQkMsTUFBTSxHQUFHVixTQUFTLENBQ2hCVyw2QkFBY1YsVUFERSxFQUVoQlUsNkJBQWNULFdBRkUsRUFHaEJTLDZCQUFjUixPQUhFLEVBSWhCUSw2QkFBY1AsSUFKRSxFQUtoQk8sNkJBQWNOLElBTEUsRUFNaEJNLDZCQUFjTCxRQU5FLENBREMsS0FTaEI7QUFDSEUsRUFBQUEsTUFBTSxHQUFHLG1CQUFNRSxNQUFOLENBQVQ7QUFFQSxTQUFPRSxRQUFRLENBQUMsUUFBRCxFQUFXLE1BQU07QUFDOUJDLElBQUFBLEVBQUUsQ0FBRSwyQkFBMEJILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhYixVQUFXLEVBQXBELEVBQXVELE1BQU07QUFDN0RjLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWViLFVBQWhCLENBQU4sQ0FBa0NlLE9BQWxDLENBQTBDTixNQUFNLENBQUNJLEtBQVAsQ0FBYWIsVUFBdkQ7QUFDRCxLQUZDLENBQUY7QUFHQVksSUFBQUEsRUFBRSxDQUFFLDRCQUEyQkgsTUFBTSxDQUFDSSxLQUFQLENBQWFaLFdBQVksRUFBdEQsRUFBeUQsTUFBTTtBQUMvRGEsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVosV0FBaEIsQ0FBTixDQUFtQ2MsT0FBbkMsQ0FBMkNOLE1BQU0sQ0FBQ0ksS0FBUCxDQUFhWixXQUF4RDtBQUNELEtBRkMsQ0FBRjtBQUdBVyxJQUFBQSxFQUFFLENBQUUsd0JBQXVCSCxNQUFNLENBQUNJLEtBQVAsQ0FBYVgsT0FBUSxFQUE5QyxFQUFpRCxNQUFNO0FBQ3ZEWSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlWCxPQUFoQixDQUFOLENBQStCYSxPQUEvQixDQUF1Q04sTUFBTSxDQUFDSSxLQUFQLENBQWFYLE9BQXBEO0FBQ0QsS0FGQyxDQUFGO0FBR0FVLElBQUFBLEVBQUUsQ0FBRSxxQkFBb0JILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhVixJQUFLLEVBQXhDLEVBQTJDLE1BQU07QUFDakRXLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVWLElBQWhCLENBQU4sQ0FBNEJZLE9BQTVCLENBQW9DTixNQUFNLENBQUNJLEtBQVAsQ0FBYVYsSUFBakQ7QUFDRCxLQUZDLENBQUY7QUFHQVMsSUFBQUEsRUFBRSxDQUFFLHFCQUFvQkgsTUFBTSxDQUFDSSxLQUFQLENBQWFULElBQUssRUFBeEMsRUFBMkMsTUFBTTtBQUNqRFUsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVQsSUFBaEIsQ0FBTixDQUE0QlcsT0FBNUIsQ0FBb0NOLE1BQU0sQ0FBQ0ksS0FBUCxDQUFhVCxJQUFqRDtBQUNELEtBRkMsQ0FBRjtBQUdBUSxJQUFBQSxFQUFFLENBQUUsMkRBQUYsRUFBOEQsTUFBTTtBQUNwRSxZQUFNSSxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFsQjtBQUVBWCxNQUFBQSxNQUFNLENBQUNZLFFBQVAsQ0FBZ0I7QUFDZGIsUUFBQUEsT0FBTyxFQUFFVTtBQURLLE9BQWhCO0FBSUFULE1BQUFBLE1BQU0sQ0FBQ2EsUUFBUCxDQUFnQixPQUFoQjs7QUFFQSxVQUFJLENBQUNwQixVQUFMLEVBQWlCO0FBQ2ZjLFFBQUFBLE1BQU0sQ0FBQ0UsU0FBRCxDQUFOLENBQWtCSyxnQkFBbEI7QUFDRCxPQUZELE1BRU87QUFDTFAsUUFBQUEsTUFBTSxDQUFDRSxTQUFELENBQU4sQ0FBa0JNLEdBQWxCLENBQXNCRCxnQkFBdEI7QUFDRDtBQUNGLEtBZEMsQ0FBRjtBQWVBVCxJQUFBQSxFQUFFLENBQUUseUJBQXdCSCxNQUFNLENBQUNJLEtBQVAsQ0FBYVIsUUFBUyxFQUFoRCxFQUFtRCxNQUFNO0FBQ3pEUyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ2dCLElBQVAsRUFBRCxDQUFOLENBQXNCUixPQUF0QixDQUE4Qk4sTUFBTSxDQUFDSSxLQUFQLENBQWFSLFFBQTNDO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FsQ2MsQ0FBZjtBQW1DRCxDQS9DTTs7O0FBaURQRyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4vQnV0dG9uJztcbmltcG9ydCB7IGRlZmF1bHRWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZGVmYXVsdFZhbHVlcyc7XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoXG4gIGlzRGlzYWJsZWQsXG4gIGlzRnVsbFdpZHRoLFxuICBpc1JvdW5kLFxuICBzaXplLFxuICB0eXBlLFxuICBjaGlsZHJlbixcbiAgb25DbGlja1xuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIGlzRnVsbFdpZHRoPXtpc0Z1bGxXaWR0aH1cbiAgICAgIGlzUm91bmQ9e2lzUm91bmR9XG4gICAgICBzaXplPXtzaXplfVxuICAgICAgdHlwZT17dHlwZX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQnV0dG9uPlxuICApO1xufTtcblxubGV0IG91dHB1dDtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBidXR0b24gPSBDb21wb25lbnQoXG4gICAgZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNGdWxsV2lkdGgsXG4gICAgZGVmYXVsdFZhbHVlcy5pc1JvdW5kLFxuICAgIGRlZmF1bHRWYWx1ZXMuc2l6ZSxcbiAgICBkZWZhdWx0VmFsdWVzLnR5cGUsXG4gICAgZGVmYXVsdFZhbHVlcy5jaGlsZHJlblxuICApXG4pID0+IHtcbiAgb3V0cHV0ID0gbW91bnQoYnV0dG9uKTtcblxuICByZXR1cm4gZGVzY3JpYmUoJ0J1dHRvbicsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtidXR0b24ucHJvcHMuaXNEaXNhYmxlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNEaXNhYmxlZCkudG9FcXVhbChidXR0b24ucHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRnVsbFdpZHRoOiAke2J1dHRvbi5wcm9wcy5pc0Z1bGxXaWR0aH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNGdWxsV2lkdGgpLnRvRXF1YWwoYnV0dG9uLnByb3BzLmlzRnVsbFdpZHRoKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNSb3VuZDogJHtidXR0b24ucHJvcHMuaXNSb3VuZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuaXNSb3VuZCkudG9FcXVhbChidXR0b24ucHJvcHMuaXNSb3VuZCk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIHNpemU6ICR7YnV0dG9uLnByb3BzLnNpemV9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLnNpemUpLnRvRXF1YWwoYnV0dG9uLnByb3BzLnNpemUpO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSB0eXBlOiAke2J1dHRvbi5wcm9wcy50eXBlfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS50eXBlKS50b0VxdWFsKGJ1dHRvbi5wcm9wcy50eXBlKTtcbiAgICB9KTtcbiAgICBpdChgb25DbGljayBzaG91bGQgaGF2ZSBiZWVuIGNhbGxlZCBpZiBCdXR0b24gaXMgbm90IGRpc2FibGVkYCwgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0NsaWNrID0gamVzdC5mbigpO1xuXG4gICAgICBvdXRwdXQuc2V0UHJvcHMoe1xuICAgICAgICBvbkNsaWNrOiBtb2NrQ2xpY2tcbiAgICAgIH0pO1xuXG4gICAgICBvdXRwdXQuc2ltdWxhdGUoJ2NsaWNrJyk7XG5cbiAgICAgIGlmICghaXNEaXNhYmxlZCkge1xuICAgICAgICBleHBlY3QobW9ja0NsaWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBlY3QobW9ja0NsaWNrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtidXR0b24ucHJvcHMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC50ZXh0KCkpLnRvRXF1YWwoYnV0dG9uLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19