{"version":3,"sources":["Button.test.jsx"],"names":["Component","isDisabled","isFullWidth","isRound","size","type","children","onClick","output","tests","button","defaultValues","describe","it","props","expect","toEqual","mockClick","jest","fn","setProps","simulate","toHaveBeenCalled","not","text"],"mappings":"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","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { Button } from './Button';\nimport { defaultValues } from '../../constants/defaultValues';\n\nexport const Component = (\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  children,\n  onClick\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={onClick}\n    >\n      {children}\n    </Button>\n  );\n};\n\nlet output;\n\nexport const tests = (\n  button = Component(\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.children\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {\n      expect(output.props().isDisabled).toEqual(button.props.isDisabled);\n    });\n    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {\n      expect(output.props().isFullWidth).toEqual(button.props.isFullWidth);\n    });\n    it(`Should have isRound: ${button.props.isRound}`, () => {\n      expect(output.props().isRound).toEqual(button.props.isRound);\n    });\n    it(`Should have size: ${button.props.size}`, () => {\n      expect(output.props().size).toEqual(button.props.size);\n    });\n    it(`Should have type: ${button.props.type}`, () => {\n      expect(output.props().type).toEqual(button.props.type);\n    });\n    it(`onClick should have been called if Button is not disabled`, () => {\n      const mockClick = jest.fn();\n\n      output.setProps({\n        onClick: mockClick\n      });\n\n      output.simulate('click');\n\n      if (!isDisabled) {\n        expect(mockClick).toHaveBeenCalled();\n      } else {\n        expect(mockClick).not.toHaveBeenCalled();\n      }\n    });\n    it(`Should have children: ${button.props.children}`, () => {\n      expect(output.text()).toEqual(button.props.children);\n    });\n  });\n};\n\ntests();\n"]}