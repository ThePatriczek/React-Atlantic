847a4a00a8d4a3f74b745dc4d698c09f
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _constants = require("../../constants");

var _addonActions = require("@storybook/addon-actions");

// const checkbox = (
//   <Checkbox
//     isChecked={isChecked}
//     isDefaultChecked={isDefaultChecked}
//     isDisabled={isDisabled}
//     isPartiallyChecked={isPartiallyChecked}
//     position={position}
//     onChange={action(`onChange`)}
//   >
//     {children}
//   </Checkbox>
// );
//
const tests = (checkbox, {
  isChecked
}) => {
  const output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(isChecked);
    }); // it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {
    //   expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);
    // });
    //
    // it(`Should have isDisabled: ${isDisabled}`, () => {
    //   expect(output.prop('isDisabled')).toEqual(isDisabled);
    // });
    //
    // it(`Should have isPartiallyChecked: ${isPartiallyChecked}`, () => {
    //   expect(output.prop('isPartiallyChecked')).toEqual(isPartiallyChecked);
    // });
    //
    // it(`Should have position: ${position}`, () => {
    //   expect(output.prop('position')).toEqual(position);
    // });
    //
    // it(`Should have children: ${children}`, () => {
    //   expect(output.prop('children')).toEqual(children);
    // });
  });
};

exports.tests = tests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbInRlc3RzIiwiY2hlY2tib3giLCJpc0NoZWNrZWQiLCJvdXRwdXQiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwicHJvcCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQU9BOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sTUFBTUEsS0FBSyxHQUFHLENBQUNDLFFBQUQsRUFBVztBQUFFQyxFQUFBQTtBQUFGLENBQVgsS0FBNkI7QUFDaEQsUUFBTUMsTUFBTSxHQUFHLHFCQUFRRixRQUFSLENBQWY7QUFFQSxTQUFPRyxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDaENDLElBQUFBLEVBQUUsQ0FBRSwwQkFBeUJILFNBQVUsRUFBckMsRUFBd0MsTUFBTTtBQUM5Q0ksTUFBQUEsTUFBTSxDQUFDSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxXQUFaLENBQUQsQ0FBTixDQUFpQ0MsT0FBakMsQ0FBeUNOLFNBQXpDO0FBQ0QsS0FGQyxDQUFGLENBRGdDLENBSWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsR0F2QmMsQ0FBZjtBQXdCRCxDQTNCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnLi9DaGVja2JveCc7XG5pbXBvcnQge1xuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uLFxuICBjaGlsZHJlblxufSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYWN0aW9uIH0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1hY3Rpb25zJztcblxuLy8gY29uc3QgY2hlY2tib3ggPSAoXG4vLyAgIDxDaGVja2JveFxuLy8gICAgIGlzQ2hlY2tlZD17aXNDaGVja2VkfVxuLy8gICAgIGlzRGVmYXVsdENoZWNrZWQ9e2lzRGVmYXVsdENoZWNrZWR9XG4vLyAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbi8vICAgICBpc1BhcnRpYWxseUNoZWNrZWQ9e2lzUGFydGlhbGx5Q2hlY2tlZH1cbi8vICAgICBwb3NpdGlvbj17cG9zaXRpb259XG4vLyAgICAgb25DaGFuZ2U9e2FjdGlvbihgb25DaGFuZ2VgKX1cbi8vICAgPlxuLy8gICAgIHtjaGlsZHJlbn1cbi8vICAgPC9DaGVja2JveD5cbi8vICk7XG4vL1xuXG5leHBvcnQgY29uc3QgdGVzdHMgPSAoY2hlY2tib3gsIHsgaXNDaGVja2VkIH0pID0+IHtcbiAgY29uc3Qgb3V0cHV0ID0gc2hhbGxvdyhjaGVja2JveCk7XG5cbiAgcmV0dXJuIGRlc2NyaWJlKCdDaGVja2JveCcsICgpID0+IHtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNDaGVja2VkOiAke2lzQ2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKGlzQ2hlY2tlZCk7XG4gICAgfSk7XG4gICAgLy8gaXQoYFNob3VsZCBoYXZlIGlzRGVmYXVsdENoZWNrZWQ6ICR7aXNEZWZhdWx0Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgLy8gICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGVmYXVsdENoZWNrZWQnKSkudG9FcXVhbChpc0RlZmF1bHRDaGVja2VkKTtcbiAgICAvLyB9KTtcbiAgICAvL1xuICAgIC8vIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2lzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgIC8vICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoaXNEaXNhYmxlZCk7XG4gICAgLy8gfSk7XG4gICAgLy9cbiAgICAvLyBpdChgU2hvdWxkIGhhdmUgaXNQYXJ0aWFsbHlDaGVja2VkOiAke2lzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgLy8gICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKGlzUGFydGlhbGx5Q2hlY2tlZCk7XG4gICAgLy8gfSk7XG4gICAgLy9cbiAgICAvLyBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7cG9zaXRpb259YCwgKCkgPT4ge1xuICAgIC8vICAgZXhwZWN0KG91dHB1dC5wcm9wKCdwb3NpdGlvbicpKS50b0VxdWFsKHBvc2l0aW9uKTtcbiAgICAvLyB9KTtcbiAgICAvL1xuICAgIC8vIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtjaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgLy8gICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoY2hpbGRyZW4pO1xuICAgIC8vIH0pO1xuICB9KTtcbn07XG4iXX0=