c3f4c42a5354774c89373bc668c9a98c
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _constants = require("../../constants");

var _addonActions = require("@storybook/addon-actions");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";
const tests = describe('Checkbox', () => {
  const checkbox = _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: _constants.isChecked,
    isDefaultChecked: _constants.isDefaultChecked,
    isDisabled: _constants.isDisabled,
    isPartiallyChecked: _constants.isPartiallyChecked,
    position: _constants.position,
    onChange: (0, _addonActions.action)(`onChange`),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16
    },
    __self: void 0
  }, _constants.children);

  const output = (0, _enzyme.shallow)(checkbox);
  it('Checked?', () => {
    expect(output.prop('isChecked')).toEqual(true);
  });
  it(`Should have isChecked: ${_constants.isChecked}`, () => {
    expect(output.prop('isChecked')).toEqual(_constants.isChecked);
  });
  it(`Should have isDefaultChecked: ${_constants.isDefaultChecked}`, () => {
    expect(output.prop('isDefaultChecked')).toEqual(_constants.isDefaultChecked);
  });
  it(`Should have isDisabled: ${_constants.isDisabled}`, () => {
    expect(output.prop('isDisabled')).toEqual(_constants.isDisabled);
  });
  it(`Should have isPartiallyChecked: ${_constants.isPartiallyChecked}`, () => {
    expect(output.prop('isPartiallyChecked')).toEqual(_constants.isPartiallyChecked);
  });
  it(`Should have position: ${_constants.position}`, () => {
    expect(output.prop('position')).toEqual(_constants.position);
  });
  it(`Should have children: ${_constants.children}`, () => {
    expect(output.prop('children')).toEqual(_constants.children);
  });
});
exports.tests = tests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbInRlc3RzIiwiZGVzY3JpYmUiLCJjaGVja2JveCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsIml0IiwiZXhwZWN0IiwicHJvcCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQVFBOzs7QUFFTyxNQUFNQSxLQUFLLEdBQUdDLFFBQVEsQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUM5QyxRQUFNQyxRQUFRLEdBQ1osNkJBQUMsa0JBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBRUMsb0JBRGI7QUFFRSxJQUFBLGdCQUFnQixFQUFFQywyQkFGcEI7QUFHRSxJQUFBLFVBQVUsRUFBRUMscUJBSGQ7QUFJRSxJQUFBLGtCQUFrQixFQUFFQyw2QkFKdEI7QUFLRSxJQUFBLFFBQVEsRUFBRUMsbUJBTFo7QUFNRSxJQUFBLFFBQVEsRUFBRSwwQkFBUSxVQUFSLENBTlo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FRR0MsbUJBUkgsQ0FERjs7QUFZQSxRQUFNQyxNQUFNLEdBQUcscUJBQVFQLFFBQVIsQ0FBZjtBQUVBUSxFQUFBQSxFQUFFLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDbkJDLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxJQUFQLENBQVksV0FBWixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDLElBQXpDO0FBQ0QsR0FGQyxDQUFGO0FBSUFILEVBQUFBLEVBQUUsQ0FBRSwwQkFBeUJQLG9CQUFVLEVBQXJDLEVBQXdDLE1BQU07QUFDOUNRLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxJQUFQLENBQVksV0FBWixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDVixvQkFBekM7QUFDRCxHQUZDLENBQUY7QUFJQU8sRUFBQUEsRUFBRSxDQUFFLGlDQUFnQ04sMkJBQWlCLEVBQW5ELEVBQXNELE1BQU07QUFDNURPLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxJQUFQLENBQVksa0JBQVosQ0FBRCxDQUFOLENBQXdDQyxPQUF4QyxDQUFnRFQsMkJBQWhEO0FBQ0QsR0FGQyxDQUFGO0FBSUFNLEVBQUFBLEVBQUUsQ0FBRSwyQkFBMEJMLHFCQUFXLEVBQXZDLEVBQTBDLE1BQU07QUFDaERNLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxJQUFQLENBQVksWUFBWixDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDUixxQkFBMUM7QUFDRCxHQUZDLENBQUY7QUFJQUssRUFBQUEsRUFBRSxDQUFFLG1DQUFrQ0osNkJBQW1CLEVBQXZELEVBQTBELE1BQU07QUFDaEVLLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxJQUFQLENBQVksb0JBQVosQ0FBRCxDQUFOLENBQTBDQyxPQUExQyxDQUFrRFAsNkJBQWxEO0FBQ0QsR0FGQyxDQUFGO0FBSUFJLEVBQUFBLEVBQUUsQ0FBRSx5QkFBd0JILG1CQUFTLEVBQW5DLEVBQXNDLE1BQU07QUFDNUNJLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxJQUFQLENBQVksVUFBWixDQUFELENBQU4sQ0FBZ0NDLE9BQWhDLENBQXdDTixtQkFBeEM7QUFDRCxHQUZDLENBQUY7QUFJQUcsRUFBQUEsRUFBRSxDQUFFLHlCQUF3QkYsbUJBQVMsRUFBbkMsRUFBc0MsTUFBTTtBQUM1Q0csSUFBQUEsTUFBTSxDQUFDRixNQUFNLENBQUNHLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0NMLG1CQUF4QztBQUNELEdBRkMsQ0FBRjtBQUdELENBMUM0QixDQUF0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnLi9DaGVja2JveCc7XG5pbXBvcnQge1xuICBpc0RlZmF1bHRDaGVja2VkLFxuICBpc0Rpc2FibGVkLFxuICBpc0NoZWNrZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG59IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBhY3Rpb24gfSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnMnO1xuXG5leHBvcnQgY29uc3QgdGVzdHMgPSBkZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gIGNvbnN0IGNoZWNrYm94ID0gKFxuICAgIDxDaGVja2JveFxuICAgICAgaXNDaGVja2VkPXtpc0NoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIGlzUGFydGlhbGx5Q2hlY2tlZD17aXNQYXJ0aWFsbHlDaGVja2VkfVxuICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgb25DaGFuZ2U9e2FjdGlvbihgb25DaGFuZ2VgKX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbiAgY29uc3Qgb3V0cHV0ID0gc2hhbGxvdyhjaGVja2JveCk7XG5cbiAgaXQoJ0NoZWNrZWQ/JywgKCkgPT4ge1xuICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNDaGVja2VkJykpLnRvRXF1YWwodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KGBTaG91bGQgaGF2ZSBpc0NoZWNrZWQ6ICR7aXNDaGVja2VkfWAsICgpID0+IHtcbiAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzQ2hlY2tlZCcpKS50b0VxdWFsKGlzQ2hlY2tlZCk7XG4gIH0pO1xuXG4gIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2lzRGVmYXVsdENoZWNrZWR9YCwgKCkgPT4ge1xuICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNEZWZhdWx0Q2hlY2tlZCcpKS50b0VxdWFsKGlzRGVmYXVsdENoZWNrZWQpO1xuICB9KTtcblxuICBpdChgU2hvdWxkIGhhdmUgaXNEaXNhYmxlZDogJHtpc0Rpc2FibGVkfWAsICgpID0+IHtcbiAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChpc0Rpc2FibGVkKTtcbiAgfSk7XG5cbiAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtpc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNQYXJ0aWFsbHlDaGVja2VkJykpLnRvRXF1YWwoaXNQYXJ0aWFsbHlDaGVja2VkKTtcbiAgfSk7XG5cbiAgaXQoYFNob3VsZCBoYXZlIHBvc2l0aW9uOiAke3Bvc2l0aW9ufWAsICgpID0+IHtcbiAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwocG9zaXRpb24pO1xuICB9KTtcblxuICBpdChgU2hvdWxkIGhhdmUgY2hpbGRyZW46ICR7Y2hpbGRyZW59YCwgKCkgPT4ge1xuICAgIGV4cGVjdChvdXRwdXQucHJvcCgnY2hpbGRyZW4nKSkudG9FcXVhbChjaGlsZHJlbik7XG4gIH0pO1xufSk7XG4iXX0=