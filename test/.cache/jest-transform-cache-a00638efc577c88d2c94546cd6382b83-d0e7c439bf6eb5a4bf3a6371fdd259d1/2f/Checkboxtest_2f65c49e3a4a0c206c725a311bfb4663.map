{"version":3,"sources":["Checkbox.test.jsx"],"names":["Component","isChecked","isDefaultChecked","isDisabled","isPartiallyChecked","position","children","output","tests","checkbox","undefined","defaultValues","describe","it","expect","prop","toEqual"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,SADuB,EAEvBC,gBAFuB,EAGvBC,UAHuB,EAIvBC,kBAJuB,EAKvBC,QALuB,EAMvBC,QANuB,KAOpB;AACH,SACE,6BAAC,kBAAD;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,kBAAkB,EAAEG,kBAFtB;AAGE,IAAA,gBAAgB,EAAEF,gBAHpB;AAIE,IAAA,UAAU,EAAEC,UAJd;AAKE,IAAA,QAAQ,EAAEE,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGC,QAPH,CADF;AAWD,CAnBM;;;AAqBP,IAAIC,MAAM,GAAG,qBAAQP,SAAS,EAAjB,CAAb;;AAEO,MAAMQ,KAAK,GAAG,CACnBC,QAAQ,GAAGT,SAAS,EADD,EAEnBC,SAFmB,EAGnBC,gBAHmB,EAInBC,UAJmB,EAKnBC,kBALmB,EAMnBC,QANmB,EAOnBC,QAPmB,KAQhB;AACH,MAAIJ,gBAAgB,KAAKQ,SAAzB,EAAoC;AAClCH,IAAAA,MAAM,GAAG,qBACPP,SAAS,CACPC,SADO,EAEPC,gBAFO,EAGPC,UAHO,EAIPC,kBAJO,EAKPC,QALO,EAMPC,QANO,CADF,CAAT;AAUD,GAXD,MAYEC,MAAM,GAAG,qBACPP,SAAS,CACPW,6BAAcV,SADP,EAEPU,6BAAcT,gBAFP,EAGPS,6BAAcR,UAHP,EAIPQ,6BAAcP,kBAJP,EAKPO,6BAAcN,QALP,EAMPM,6BAAcL,QANP,CADF,CAAT;;AAWF,SAAOM,QAAQ,CAAC,UAAD,EAAa,MAAM;AAChC;;;;;;;;AAQA,QAAIV,gBAAgB,KAAKQ,SAAzB,EAAoC;AAClCG,MAAAA,EAAE,CAAE,iCAAgCX,gBAAiB,EAAnD,EAAsD,MAAM;AAC5DY,QAAAA,MAAM,CAACP,MAAM,CAACQ,IAAP,CAAY,kBAAZ,CAAD,CAAN,CAAwCC,OAAxC,CAAgDd,gBAAhD;AACD,OAFC,CAAF;AAGD,KAJD,MAKEW,EAAE,CAAE,iCAAgCF,6BAAcT,gBAAiB,EAAjE,EAAoE,MAAM;AAC1EY,MAAAA,MAAM,CAACP,MAAM,CAACQ,IAAP,CAAY,kBAAZ,CAAD,CAAN,CAAwCC,OAAxC,CACEL,6BAAcT,gBADhB;AAGD,KAJC,CAAF;AAMF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCD,GA3Dc,CAAf;AA4DD,CA5FM;;;AA8FPM,KAAK","sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nimport { defaultValues } from './defaultValues';\n\nexport const Component = (\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      isPartiallyChecked={isPartiallyChecked}\n      isDefaultChecked={isDefaultChecked}\n      isDisabled={isDisabled}\n      position={position}\n    >\n      {children}\n    </Checkbox>\n  );\n};\n\nlet output = shallow(Component());\n\nexport const tests = (\n  checkbox = Component(),\n  isChecked,\n  isDefaultChecked,\n  isDisabled,\n  isPartiallyChecked,\n  position,\n  children\n) => {\n  if (isDefaultChecked !== undefined) {\n    output = shallow(\n      Component(\n        isChecked,\n        isDefaultChecked,\n        isDisabled,\n        isPartiallyChecked,\n        position,\n        children\n      )\n    );\n  } else\n    output = shallow(\n      Component(\n        defaultValues.isChecked,\n        defaultValues.isDefaultChecked,\n        defaultValues.isDisabled,\n        defaultValues.isPartiallyChecked,\n        defaultValues.position,\n        defaultValues.children\n      )\n    );\n\n  return describe('Checkbox', () => {\n    /* if (checkbox.props.isChecked) {\n      it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);\n      });\n    } else\n      it(`Should have isChecked: ${defaultValues.isChecked}`, () => {\n        expect(output.prop('isChecked')).toEqual(defaultValues.isChecked);\n      });*/\n    if (isDefaultChecked !== undefined) {\n      it(`Should have isDefaultChecked: ${isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(isDefaultChecked);\n      });\n    } else\n      it(`Should have isDefaultChecked: ${defaultValues.isDefaultChecked}`, () => {\n        expect(output.prop('isDefaultChecked')).toEqual(\n          defaultValues.isDefaultChecked\n        );\n      });\n\n    /*if (checkbox.props.isDisabled) {\n      it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);\n      });\n    } else\n      it(`Should have isDisabled: ${defaultValues.isDisabled}`, () => {\n        expect(output.prop('isDisabled')).toEqual(defaultValues.isDisabled);\n      });\n\n    if (checkbox.props.isPartiallyChecked) {\n      it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          checkbox.props.isPartiallyChecked\n        );\n      });\n    } else\n      it(`Should have isPartiallyChecked: ${defaultValues.isPartiallyChecked}`, () => {\n        expect(output.prop('isPartiallyChecked')).toEqual(\n          defaultValues.isPartiallyChecked\n        );\n      });\n\n    if (checkbox.props.position) {\n      it(`Should have position: ${checkbox.props.position}`, () => {\n        expect(output.prop('position')).toEqual(checkbox.props.position);\n      });\n    } else\n      it(`Should have position: ${defaultValues.position}`, () => {\n        expect(output.prop('position')).toEqual(defaultValues.position);\n      });\n\n    if (checkbox.props.children) {\n      it(`Should have children: ${checkbox.props.children}`, () => {\n        expect(output.prop('children')).toEqual(checkbox.props.children);\n      });\n    } else\n      it(`Should have children: ${defaultValues.children}`, () => {\n        expect(output.prop('children')).toEqual(defaultValues.children);\n      });*/\n  });\n};\n\ntests();\n"]}