b9295b6d91064133ef92776ba9139d82
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Icon = require("./Icon");

var _defaultValues = require("../../constants/defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Icon/Icon.test.jsx";

const Component = (isDisabled, isFullWidth, isRound, size, type, children, onClick) => {
  return _react.default.createElement(Button, {
    isDisabled: isDisabled,
    isFullWidth: isFullWidth,
    isRound: isRound,
    size: size,
    type: type,
    onClick: onClick,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (button = Component(_defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isFullWidth, _defaultValues.defaultValues.isRound, _defaultValues.defaultValues.size, _defaultValues.defaultValues.type, _defaultValues.defaultValues.children)) => {
  output = (0, _enzyme.mount)(button);
  return describe('Button', () => {
    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {
      expect(output.props().isDisabled).toEqual(button.props.isDisabled);
    });
    it(`Should have isFullWidth: ${button.props.isFullWidth}`, () => {
      expect(output.props().isFullWidth).toEqual(button.props.isFullWidth);
    });
    it(`Should have isRound: ${button.props.isRound}`, () => {
      expect(output.props().isRound).toEqual(button.props.isRound);
    });
    it(`Should have size: ${button.props.size}`, () => {
      expect(output.props().size).toEqual(button.props.size);
    });
    it(`Should have type: ${button.props.type}`, () => {
      expect(output.props().type).toEqual(button.props.type);
    });
    it(`onClick should have been called if Button is not disabled`, () => {
      const mockClick = jest.fn();
      output.setProps({
        onClick: mockClick
      });
      output.simulate('click');

      if (!button.props.isDisabled) {
        expect(mockClick).toHaveBeenCalled();
      } else {
        expect(mockClick).not.toHaveBeenCalled();
      }
    });
    it(`Should have children: ${button.props.children}`, () => {
      expect(output.text()).toEqual(button.props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkljb24udGVzdC5qc3giXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiaXNEaXNhYmxlZCIsImlzRnVsbFdpZHRoIiwiaXNSb3VuZCIsInNpemUiLCJ0eXBlIiwiY2hpbGRyZW4iLCJvbkNsaWNrIiwib3V0cHV0IiwidGVzdHMiLCJidXR0b24iLCJkZWZhdWx0VmFsdWVzIiwiZGVzY3JpYmUiLCJpdCIsInByb3BzIiwiZXhwZWN0IiwidG9FcXVhbCIsIm1vY2tDbGljayIsImplc3QiLCJmbiIsInNldFByb3BzIiwic2ltdWxhdGUiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibm90IiwidGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFTyxNQUFNQSxTQUFTLEdBQUcsQ0FDdkJDLFVBRHVCLEVBRXZCQyxXQUZ1QixFQUd2QkMsT0FIdUIsRUFJdkJDLElBSnVCLEVBS3ZCQyxJQUx1QixFQU12QkMsUUFOdUIsRUFPdkJDLE9BUHVCLEtBUXBCO0FBQ0gsU0FDRSw2QkFBQyxNQUFEO0FBQ0UsSUFBQSxVQUFVLEVBQUVOLFVBRGQ7QUFFRSxJQUFBLFdBQVcsRUFBRUMsV0FGZjtBQUdFLElBQUEsT0FBTyxFQUFFQyxPQUhYO0FBSUUsSUFBQSxJQUFJLEVBQUVDLElBSlI7QUFLRSxJQUFBLElBQUksRUFBRUMsSUFMUjtBQU1FLElBQUEsT0FBTyxFQUFFRSxPQU5YO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBUUdELFFBUkgsQ0FERjtBQVlELENBckJNOzs7QUF1QlAsSUFBSUUsTUFBSjs7QUFFTyxNQUFNQyxLQUFLLEdBQUcsQ0FDbkJDLE1BQU0sR0FBR1YsU0FBUyxDQUNoQlcsNkJBQWNWLFVBREUsRUFFaEJVLDZCQUFjVCxXQUZFLEVBR2hCUyw2QkFBY1IsT0FIRSxFQUloQlEsNkJBQWNQLElBSkUsRUFLaEJPLDZCQUFjTixJQUxFLEVBTWhCTSw2QkFBY0wsUUFORSxDQURDLEtBU2hCO0FBQ0hFLEVBQUFBLE1BQU0sR0FBRyxtQkFBTUUsTUFBTixDQUFUO0FBRUEsU0FBT0UsUUFBUSxDQUFDLFFBQUQsRUFBVyxNQUFNO0FBQzlCQyxJQUFBQSxFQUFFLENBQUUsMkJBQTBCSCxNQUFNLENBQUNJLEtBQVAsQ0FBYWIsVUFBVyxFQUFwRCxFQUF1RCxNQUFNO0FBQzdEYyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlYixVQUFoQixDQUFOLENBQWtDZSxPQUFsQyxDQUEwQ04sTUFBTSxDQUFDSSxLQUFQLENBQWFiLFVBQXZEO0FBQ0QsS0FGQyxDQUFGO0FBR0FZLElBQUFBLEVBQUUsQ0FBRSw0QkFBMkJILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhWixXQUFZLEVBQXRELEVBQXlELE1BQU07QUFDL0RhLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVaLFdBQWhCLENBQU4sQ0FBbUNjLE9BQW5DLENBQTJDTixNQUFNLENBQUNJLEtBQVAsQ0FBYVosV0FBeEQ7QUFDRCxLQUZDLENBQUY7QUFHQVcsSUFBQUEsRUFBRSxDQUFFLHdCQUF1QkgsTUFBTSxDQUFDSSxLQUFQLENBQWFYLE9BQVEsRUFBOUMsRUFBaUQsTUFBTTtBQUN2RFksTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVgsT0FBaEIsQ0FBTixDQUErQmEsT0FBL0IsQ0FBdUNOLE1BQU0sQ0FBQ0ksS0FBUCxDQUFhWCxPQUFwRDtBQUNELEtBRkMsQ0FBRjtBQUdBVSxJQUFBQSxFQUFFLENBQUUscUJBQW9CSCxNQUFNLENBQUNJLEtBQVAsQ0FBYVYsSUFBSyxFQUF4QyxFQUEyQyxNQUFNO0FBQ2pEVyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ00sS0FBUCxHQUFlVixJQUFoQixDQUFOLENBQTRCWSxPQUE1QixDQUFvQ04sTUFBTSxDQUFDSSxLQUFQLENBQWFWLElBQWpEO0FBQ0QsS0FGQyxDQUFGO0FBR0FTLElBQUFBLEVBQUUsQ0FBRSxxQkFBb0JILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhVCxJQUFLLEVBQXhDLEVBQTJDLE1BQU07QUFDakRVLE1BQUFBLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDTSxLQUFQLEdBQWVULElBQWhCLENBQU4sQ0FBNEJXLE9BQTVCLENBQW9DTixNQUFNLENBQUNJLEtBQVAsQ0FBYVQsSUFBakQ7QUFDRCxLQUZDLENBQUY7QUFHQVEsSUFBQUEsRUFBRSxDQUFFLDJEQUFGLEVBQThELE1BQU07QUFDcEUsWUFBTUksU0FBUyxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBbEI7QUFFQVgsTUFBQUEsTUFBTSxDQUFDWSxRQUFQLENBQWdCO0FBQ2RiLFFBQUFBLE9BQU8sRUFBRVU7QUFESyxPQUFoQjtBQUlBVCxNQUFBQSxNQUFNLENBQUNhLFFBQVAsQ0FBZ0IsT0FBaEI7O0FBRUEsVUFBSSxDQUFDWCxNQUFNLENBQUNJLEtBQVAsQ0FBYWIsVUFBbEIsRUFBOEI7QUFDNUJjLFFBQUFBLE1BQU0sQ0FBQ0UsU0FBRCxDQUFOLENBQWtCSyxnQkFBbEI7QUFDRCxPQUZELE1BRU87QUFDTFAsUUFBQUEsTUFBTSxDQUFDRSxTQUFELENBQU4sQ0FBa0JNLEdBQWxCLENBQXNCRCxnQkFBdEI7QUFDRDtBQUNGLEtBZEMsQ0FBRjtBQWVBVCxJQUFBQSxFQUFFLENBQUUseUJBQXdCSCxNQUFNLENBQUNJLEtBQVAsQ0FBYVIsUUFBUyxFQUFoRCxFQUFtRCxNQUFNO0FBQ3pEUyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ2dCLElBQVAsRUFBRCxDQUFOLENBQXNCUixPQUF0QixDQUE4Qk4sTUFBTSxDQUFDSSxLQUFQLENBQWFSLFFBQTNDO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FsQ2MsQ0FBZjtBQW1DRCxDQS9DTTs7O0FBaURQRyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuL0ljb24nO1xuaW1wb3J0IHsgZGVmYXVsdFZhbHVlcyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9kZWZhdWx0VmFsdWVzJztcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9IChcbiAgaXNEaXNhYmxlZCxcbiAgaXNGdWxsV2lkdGgsXG4gIGlzUm91bmQsXG4gIHNpemUsXG4gIHR5cGUsXG4gIGNoaWxkcmVuLFxuICBvbkNsaWNrXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgaXNGdWxsV2lkdGg9e2lzRnVsbFdpZHRofVxuICAgICAgaXNSb3VuZD17aXNSb3VuZH1cbiAgICAgIHNpemU9e3NpemV9XG4gICAgICB0eXBlPXt0eXBlfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9CdXR0b24+XG4gICk7XG59O1xuXG5sZXQgb3V0cHV0O1xuXG5leHBvcnQgY29uc3QgdGVzdHMgPSAoXG4gIGJ1dHRvbiA9IENvbXBvbmVudChcbiAgICBkZWZhdWx0VmFsdWVzLmlzRGlzYWJsZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5pc0Z1bGxXaWR0aCxcbiAgICBkZWZhdWx0VmFsdWVzLmlzUm91bmQsXG4gICAgZGVmYXVsdFZhbHVlcy5zaXplLFxuICAgIGRlZmF1bHRWYWx1ZXMudHlwZSxcbiAgICBkZWZhdWx0VmFsdWVzLmNoaWxkcmVuXG4gIClcbikgPT4ge1xuICBvdXRwdXQgPSBtb3VudChidXR0b24pO1xuXG4gIHJldHVybiBkZXNjcmliZSgnQnV0dG9uJywgKCkgPT4ge1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2J1dHRvbi5wcm9wcy5pc0Rpc2FibGVkfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0Rpc2FibGVkKS50b0VxdWFsKGJ1dHRvbi5wcm9wcy5pc0Rpc2FibGVkKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgaXNGdWxsV2lkdGg6ICR7YnV0dG9uLnByb3BzLmlzRnVsbFdpZHRofWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc0Z1bGxXaWR0aCkudG9FcXVhbChidXR0b24ucHJvcHMuaXNGdWxsV2lkdGgpO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc1JvdW5kOiAke2J1dHRvbi5wcm9wcy5pc1JvdW5kfWAsICgpID0+IHtcbiAgICAgIGV4cGVjdChvdXRwdXQucHJvcHMoKS5pc1JvdW5kKS50b0VxdWFsKGJ1dHRvbi5wcm9wcy5pc1JvdW5kKTtcbiAgICB9KTtcbiAgICBpdChgU2hvdWxkIGhhdmUgc2l6ZTogJHtidXR0b24ucHJvcHMuc2l6ZX1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3BzKCkuc2l6ZSkudG9FcXVhbChidXR0b24ucHJvcHMuc2l6ZSk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIHR5cGU6ICR7YnV0dG9uLnByb3BzLnR5cGV9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLnR5cGUpLnRvRXF1YWwoYnV0dG9uLnByb3BzLnR5cGUpO1xuICAgIH0pO1xuICAgIGl0KGBvbkNsaWNrIHNob3VsZCBoYXZlIGJlZW4gY2FsbGVkIGlmIEJ1dHRvbiBpcyBub3QgZGlzYWJsZWRgLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQ2xpY2sgPSBqZXN0LmZuKCk7XG5cbiAgICAgIG91dHB1dC5zZXRQcm9wcyh7XG4gICAgICAgIG9uQ2xpY2s6IG1vY2tDbGlja1xuICAgICAgfSk7XG5cbiAgICAgIG91dHB1dC5zaW11bGF0ZSgnY2xpY2snKTtcblxuICAgICAgaWYgKCFidXR0b24ucHJvcHMuaXNEaXNhYmxlZCkge1xuICAgICAgICBleHBlY3QobW9ja0NsaWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBlY3QobW9ja0NsaWNrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtidXR0b24ucHJvcHMuY2hpbGRyZW59YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC50ZXh0KCkpLnRvRXF1YWwoYnV0dG9uLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG50ZXN0cygpO1xuIl19