e4288c3330336f29f6403299688b84f0
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output = (0, _enzyme.shallow)(Component());

const tests = (checkbox = Component(), props = {
  isChecked: true,
  isDefaultChecked: true,
  isDisabled: true,
  isPartiallyChecked: true,
  position,
  children: 'Text'
}) => {
  output = (0, _enzyme.shallow)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isChecked: ${props.isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(props.isChecked);
    });
    it(`Should have isDefaultChecked: ${props.isDefaultChecked}`, () => {
      expect(output.prop('isDefaultChecked')).toEqual(props.isDefaultChecked);
    });
    it(`Should have isDisabled: ${props.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(props.isDisabled);
    });
    it(`Should have isPartiallyChecked: ${props.isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(props.isPartiallyChecked);
    });
    it(`Should have position: ${props.position}`, () => {
      expect(output.prop('position')).toEqual(props.position);
    });
    it(`Should have children: ${props.children}`, () => {
      expect(output.prop('children')).toEqual(props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsInRlc3RzIiwiY2hlY2tib3giLCJwcm9wcyIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJwcm9wIiwidG9FcXVhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFTyxNQUFNQSxTQUFTLEdBQUcsQ0FDdkJDLFNBRHVCLEVBRXZCQyxnQkFGdUIsRUFHdkJDLFVBSHVCLEVBSXZCQyxrQkFKdUIsRUFLdkJDLFFBTHVCLEVBTXZCQyxRQU51QixLQU9wQjtBQUNILFNBQ0UsNkJBQUMsa0JBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBRUwsU0FEYjtBQUVFLElBQUEsa0JBQWtCLEVBQUVHLGtCQUZ0QjtBQUdFLElBQUEsZ0JBQWdCLEVBQUVGLGdCQUhwQjtBQUlFLElBQUEsVUFBVSxFQUFFQyxVQUpkO0FBS0UsSUFBQSxRQUFRLEVBQUVFLFFBTFo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FPR0MsUUFQSCxDQURGO0FBV0QsQ0FuQk07OztBQXFCUCxJQUFJQyxNQUFNLEdBQUcscUJBQVFQLFNBQVMsRUFBakIsQ0FBYjs7QUFFTyxNQUFNUSxLQUFLLEdBQUcsQ0FDbkJDLFFBQVEsR0FBR1QsU0FBUyxFQURELEVBRW5CVSxLQUFLLEdBQUc7QUFDTlQsRUFBQUEsU0FBUyxFQUFFLElBREw7QUFFTkMsRUFBQUEsZ0JBQWdCLEVBQUUsSUFGWjtBQUdOQyxFQUFBQSxVQUFVLEVBQUUsSUFITjtBQUlOQyxFQUFBQSxrQkFBa0IsRUFBRSxJQUpkO0FBS05DLEVBQUFBLFFBTE07QUFNTkMsRUFBQUEsUUFBUSxFQUFFO0FBTkosQ0FGVyxLQVVoQjtBQUNIQyxFQUFBQSxNQUFNLEdBQUcscUJBQVFFLFFBQVIsQ0FBVDtBQUdBLFNBQU9FLFFBQVEsQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUNoQ0MsSUFBQUEsRUFBRSxDQUFFLDBCQUF5QkYsS0FBSyxDQUFDVCxTQUFVLEVBQTNDLEVBQThDLE1BQU07QUFDcERZLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksV0FBWixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDTCxLQUFLLENBQUNULFNBQS9DO0FBQ0QsS0FGQyxDQUFGO0FBSUFXLElBQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NGLEtBQUssQ0FBQ1IsZ0JBQWlCLEVBQXpELEVBQTRELE1BQU07QUFDbEVXLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksa0JBQVosQ0FBRCxDQUFOLENBQXdDQyxPQUF4QyxDQUFnREwsS0FBSyxDQUFDUixnQkFBdEQ7QUFDRCxLQUZDLENBQUY7QUFJQVUsSUFBQUEsRUFBRSxDQUFFLDJCQUEwQkYsS0FBSyxDQUFDUCxVQUFXLEVBQTdDLEVBQWdELE1BQU07QUFDdERVLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksWUFBWixDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDTCxLQUFLLENBQUNQLFVBQWhEO0FBQ0QsS0FGQyxDQUFGO0FBSUFTLElBQUFBLEVBQUUsQ0FBRSxtQ0FBa0NGLEtBQUssQ0FBQ04sa0JBQW1CLEVBQTdELEVBQWdFLE1BQU07QUFDdEVTLE1BQUFBLE1BQU0sQ0FBQ04sTUFBTSxDQUFDTyxJQUFQLENBQVksb0JBQVosQ0FBRCxDQUFOLENBQTBDQyxPQUExQyxDQUNFTCxLQUFLLENBQUNOLGtCQURSO0FBR0QsS0FKQyxDQUFGO0FBTUFRLElBQUFBLEVBQUUsQ0FBRSx5QkFBd0JGLEtBQUssQ0FBQ0wsUUFBUyxFQUF6QyxFQUE0QyxNQUFNO0FBQ2xEUSxNQUFBQSxNQUFNLENBQUNOLE1BQU0sQ0FBQ08sSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDQyxPQUFoQyxDQUF3Q0wsS0FBSyxDQUFDTCxRQUE5QztBQUNELEtBRkMsQ0FBRjtBQUlBTyxJQUFBQSxFQUFFLENBQUUseUJBQXdCRixLQUFLLENBQUNKLFFBQVMsRUFBekMsRUFBNEMsTUFBTTtBQUNsRE8sTUFBQUEsTUFBTSxDQUFDTixNQUFNLENBQUNPLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0NMLEtBQUssQ0FBQ0osUUFBOUM7QUFDRCxLQUZDLENBQUY7QUFHRCxHQTFCYyxDQUFmO0FBMkJELENBekNNOzs7QUEyQ1BFLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2hlY2tib3hcbiAgICAgIGlzQ2hlY2tlZD17aXNDaGVja2VkfVxuICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbn07XG5cbmxldCBvdXRwdXQgPSBzaGFsbG93KENvbXBvbmVudCgpKTtcblxuZXhwb3J0IGNvbnN0IHRlc3RzID0gKFxuICBjaGVja2JveCA9IENvbXBvbmVudCgpLFxuICBwcm9wcyA9IHtcbiAgICBpc0NoZWNrZWQ6IHRydWUsXG4gICAgaXNEZWZhdWx0Q2hlY2tlZDogdHJ1ZSxcbiAgICBpc0Rpc2FibGVkOiB0cnVlLFxuICAgIGlzUGFydGlhbGx5Q2hlY2tlZDogdHJ1ZSxcbiAgICBwb3NpdGlvbixcbiAgICBjaGlsZHJlbjogJ1RleHQnXG4gIH1cbikgPT4ge1xuICBvdXRwdXQgPSBzaGFsbG93KGNoZWNrYm94KTtcblxuXG4gIHJldHVybiBkZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtwcm9wcy5pc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0NoZWNrZWQnKSkudG9FcXVhbChwcm9wcy5pc0NoZWNrZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYFNob3VsZCBoYXZlIGlzRGVmYXVsdENoZWNrZWQ6ICR7cHJvcHMuaXNEZWZhdWx0Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzRGVmYXVsdENoZWNrZWQnKSkudG9FcXVhbChwcm9wcy5pc0RlZmF1bHRDaGVja2VkKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke3Byb3BzLmlzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwocHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgaXNQYXJ0aWFsbHlDaGVja2VkOiAke3Byb3BzLmlzUGFydGlhbGx5Q2hlY2tlZH1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKFxuICAgICAgICBwcm9wcy5pc1BhcnRpYWxseUNoZWNrZWRcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdChgU2hvdWxkIGhhdmUgcG9zaXRpb246ICR7cHJvcHMucG9zaXRpb259YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdwb3NpdGlvbicpKS50b0VxdWFsKHByb3BzLnBvc2l0aW9uKTtcbiAgICB9KTtcblxuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtwcm9wcy5jaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwocHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=