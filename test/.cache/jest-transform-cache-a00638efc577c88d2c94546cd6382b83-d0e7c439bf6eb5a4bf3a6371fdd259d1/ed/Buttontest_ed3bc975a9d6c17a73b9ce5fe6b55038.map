{"version":3,"sources":["Button.test.jsx"],"names":["Component","isDisabled","isFullWidth","isRound","size","type","value","onClick","output","tests","button","defaultValues","describe","it","props","expect","toEqual"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,SAAS,GAAG,CACvBC,UADuB,EAEvBC,WAFuB,EAGvBC,OAHuB,EAIvBC,IAJuB,EAKvBC,IALuB,EAMvBC,KANuB,EAOvBC,OAPuB,KAQpB;AACH,SACE,6BAAC,cAAD;AACE,IAAA,UAAU,EAAEN,UADd;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,IAAI,EAAEC,IALR;AAME,IAAA,OAAO,EAAEE,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGD,KARH,CADF;AAYD,CArBM;;;AAuBP,IAAIE,MAAJ;;AAEO,MAAMC,KAAK,GAAG,CACnBC,MAAM,GAAGV,SAAS,CAChBW,6BAAcV,UADE,EAEhBU,6BAAcT,WAFE,EAGhBS,6BAAcR,OAHE,EAIhBQ,6BAAcP,IAJE,EAKhBO,6BAAcN,IALE,EAMhBM,6BAAcL,KANE,CADC,KAShB;AACHE,EAAAA,MAAM,GAAG,mBAAME,MAAN,CAAT;AAEA,SAAOE,QAAQ,CAAC,QAAD,EAAW,MAAM;AAC9BC,IAAAA,EAAE,CAAE,2BAA0BH,MAAM,CAACI,KAAP,CAAab,UAAW,EAApD,EAAuD,MAAM;AAC7Dc,MAAAA,MAAM,CAACP,MAAM,CAACM,KAAP,GAAeb,UAAhB,CAAN,CAAkCe,OAAlC,CAA0CN,MAAM,CAACI,KAAP,CAAab,UAAvD;AACD,KAFC,CAAF;AAGAY,IAAAA,EAAE,CAAE,iCAAgCH,MAAM,CAACI,KAAP,CAAaR,KAAM,EAArD,EAAwD,MAAM;AAC9DS,MAAAA,MAAM,CAACP,MAAM,CAACM,KAAP,GAAeR,KAAhB,CAAN,CAA6BU,OAA7B,CAAqC,OAArC;AACD,KAFC,CAAF;AAGAH,IAAAA,EAAE,CAAE,iCAAgCH,MAAM,CAACI,KAAP,CAAaR,KAAM,EAArD,EAAwD,MAAM;AAC9DS,MAAAA,MAAM,CAACP,MAAM,CAACM,KAAP,GAAeR,KAAhB,CAAN,CAA6BU,OAA7B,CAAqCN,MAAM,CAACI,KAAP,CAAaR,KAAlD;AACD,KAFC,CAAF;AAGAO,IAAAA,EAAE,CAAE,iCAAgCH,MAAM,CAACI,KAAP,CAAaR,KAAM,EAArD,EAAwD,MAAM;AAC9DS,MAAAA,MAAM,CAACP,MAAM,CAACM,KAAP,GAAeR,KAAhB,CAAN,CAA6BU,OAA7B,CAAqCN,MAAM,CAACI,KAAP,CAAaR,KAAlD;AACD,KAFC,CAAF;AAGAO,IAAAA,EAAE,CAAE,iCAAgCH,MAAM,CAACI,KAAP,CAAaR,KAAM,EAArD,EAAwD,MAAM;AAC9DS,MAAAA,MAAM,CAACP,MAAM,CAACM,KAAP,GAAeR,KAAhB,CAAN,CAA6BU,OAA7B,CAAqCN,MAAM,CAACI,KAAP,CAAaR,KAAlD;AACD,KAFC,CAAF;AAGAO,IAAAA,EAAE,CAAE,iCAAgCH,MAAM,CAACI,KAAP,CAAaR,KAAM,EAArD,EAAwD,MAAM;AAC9DS,MAAAA,MAAM,CAACP,MAAM,CAACM,KAAP,GAAeR,KAAhB,CAAN,CAA6BU,OAA7B,CAAqCN,MAAM,CAACI,KAAP,CAAaR,KAAlD;AACD,KAFC,CAAF;AAGD,GAnBc,CAAf;AAoBD,CAhCM;;;AAkCPG,KAAK","sourcesContent":["import { mount } from 'enzyme';\nimport React from 'react';\nimport { Button } from './Button';\nimport { defaultValues } from '../../constants/defaultValues';\n\nexport const Component = (\n  isDisabled,\n  isFullWidth,\n  isRound,\n  size,\n  type,\n  value,\n  onClick\n) => {\n  return (\n    <Button\n      isDisabled={isDisabled}\n      isFullWidth={isFullWidth}\n      isRound={isRound}\n      size={size}\n      type={type}\n      onClick={onClick}\n    >\n      {value}\n    </Button>\n  );\n};\n\nlet output;\n\nexport const tests = (\n  button = Component(\n    defaultValues.isDisabled,\n    defaultValues.isFullWidth,\n    defaultValues.isRound,\n    defaultValues.size,\n    defaultValues.type,\n    defaultValues.value\n  )\n) => {\n  output = mount(button);\n\n  return describe('Button', () => {\n    it(`Should have isDisabled: ${button.props.isDisabled}`, () => {\n      expect(output.props().isDisabled).toEqual(button.props.isDisabled);\n    });\n    it(`Should have isDefaultChecked: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual('kunda');\n    });\n    it(`Should have isDefaultChecked: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual(button.props.value);\n    });\n    it(`Should have isDefaultChecked: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual(button.props.value);\n    });\n    it(`Should have isDefaultChecked: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual(button.props.value);\n    });\n    it(`Should have isDefaultChecked: ${button.props.value}`, () => {\n      expect(output.props().value).toEqual(button.props.value);\n    });\n  });\n};\n\ntests();\n"]}