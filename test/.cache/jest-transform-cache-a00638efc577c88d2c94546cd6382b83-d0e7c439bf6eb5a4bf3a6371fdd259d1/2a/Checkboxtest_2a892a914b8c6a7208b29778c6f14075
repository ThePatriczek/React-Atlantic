f370050591cfe30a46969ede7b8dd609
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _constants = require("../../constants");

var _addonActions = require("@storybook/addon-actions");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";
const tests = describe('Checkbox', () => {
  const checkbox = _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: _constants.isChecked,
    isDefaultChecked: _constants.isDefaultChecked,
    isDisabled: _constants.isDisabled,
    isPartiallyChecked: _constants.isPartiallyChecked,
    position: _constants.position,
    onChange: (0, _addonActions.action)(`onChange`),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);

  it('Checked?', () => {
    const output = (0, _enzyme.shallow)(checkbox);
    expect(output.prop('isChecked')).toEqual(true);
  });
  it(`Should have isChecked: ${_constants.isChecked}`, () => {
    expect(wrapper.prop('isChecked')).toEqual(_constants.isChecked);
  });
  it(`Should have isDefaultChecked: ${_constants.isDefaultChecked}`, () => {
    expect(wrapper.prop('isDefaultChecked')).toEqual(_constants.isDefaultChecked);
  });
  it(`Should have isDisabled: ${_constants.isDisabled}`, () => {
    expect(wrapper.prop('isDisabled')).toEqual(_constants.isDisabled);
  });
  it(`Should have isPartiallyChecked: ${_constants.isPartiallyChecked}`, () => {
    expect(wrapper.prop('isPartiallyChecked')).toEqual(_constants.isPartiallyChecked);
  });
  it(`Should have position: ${_constants.position}`, () => {
    expect(wrapper.prop('position')).toEqual(_constants.position);
  });
  it(`Should have children: ${children}`, () => {
    expect(wrapper.prop('children')).toEqual(children);
  });
});
exports.tests = tests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbInRlc3RzIiwiZGVzY3JpYmUiLCJjaGVja2JveCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIml0Iiwib3V0cHV0IiwiZXhwZWN0IiwicHJvcCIsInRvRXF1YWwiLCJ3cmFwcGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFPQTs7O0FBRU8sTUFBTUEsS0FBSyxHQUFHQyxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDOUMsUUFBTUMsUUFBUSxHQUNaLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVDLG9CQURiO0FBRUUsSUFBQSxnQkFBZ0IsRUFBRUMsMkJBRnBCO0FBR0UsSUFBQSxVQUFVLEVBQUVDLHFCQUhkO0FBSUUsSUFBQSxrQkFBa0IsRUFBRUMsNkJBSnRCO0FBS0UsSUFBQSxRQUFRLEVBQUVDLG1CQUxaO0FBTUUsSUFBQSxRQUFRLEVBQUUsMEJBQVEsVUFBUixDQU5aO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBUUdDLFFBUkgsQ0FERjs7QUFZQUMsRUFBQUEsRUFBRSxDQUFDLFVBQUQsRUFBYSxNQUFNO0FBQ25CLFVBQU1DLE1BQU0sR0FBRyxxQkFBUVIsUUFBUixDQUFmO0FBQ0FTLElBQUFBLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxJQUFQLENBQVksV0FBWixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDLElBQXpDO0FBQ0QsR0FIQyxDQUFGO0FBS0FKLEVBQUFBLEVBQUUsQ0FBRSwwQkFBeUJOLG9CQUFVLEVBQXJDLEVBQXdDLE1BQU07QUFDOUNRLElBQUFBLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRixJQUFSLENBQWEsV0FBYixDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDVixvQkFBMUM7QUFDRCxHQUZDLENBQUY7QUFJQU0sRUFBQUEsRUFBRSxDQUFFLGlDQUFnQ0wsMkJBQWlCLEVBQW5ELEVBQXNELE1BQU07QUFDNURPLElBQUFBLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRixJQUFSLENBQWEsa0JBQWIsQ0FBRCxDQUFOLENBQXlDQyxPQUF6QyxDQUFpRFQsMkJBQWpEO0FBQ0QsR0FGQyxDQUFGO0FBSUFLLEVBQUFBLEVBQUUsQ0FBRSwyQkFBMEJKLHFCQUFXLEVBQXZDLEVBQTBDLE1BQU07QUFDaERNLElBQUFBLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRixJQUFSLENBQWEsWUFBYixDQUFELENBQU4sQ0FBbUNDLE9BQW5DLENBQTJDUixxQkFBM0M7QUFDRCxHQUZDLENBQUY7QUFJQUksRUFBQUEsRUFBRSxDQUFFLG1DQUFrQ0gsNkJBQW1CLEVBQXZELEVBQTBELE1BQU07QUFDaEVLLElBQUFBLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRixJQUFSLENBQWEsb0JBQWIsQ0FBRCxDQUFOLENBQTJDQyxPQUEzQyxDQUFtRFAsNkJBQW5EO0FBQ0QsR0FGQyxDQUFGO0FBSUFHLEVBQUFBLEVBQUUsQ0FBRSx5QkFBd0JGLG1CQUFTLEVBQW5DLEVBQXNDLE1BQU07QUFDNUNJLElBQUFBLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRixJQUFSLENBQWEsVUFBYixDQUFELENBQU4sQ0FBaUNDLE9BQWpDLENBQXlDTixtQkFBekM7QUFDRCxHQUZDLENBQUY7QUFJQUUsRUFBQUEsRUFBRSxDQUFFLHlCQUF3QkQsUUFBUyxFQUFuQyxFQUFzQyxNQUFNO0FBQzVDRyxJQUFBQSxNQUFNLENBQUNHLE9BQU8sQ0FBQ0YsSUFBUixDQUFhLFVBQWIsQ0FBRCxDQUFOLENBQWlDQyxPQUFqQyxDQUF5Q0wsUUFBekM7QUFDRCxHQUZDLENBQUY7QUFHRCxDQXpDNEIsQ0FBdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4vQ2hlY2tib3gnO1xuaW1wb3J0IHtcbiAgaXNEZWZhdWx0Q2hlY2tlZCxcbiAgaXNEaXNhYmxlZCxcbiAgaXNDaGVja2VkLFxuICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gIHBvc2l0aW9uXG59IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBhY3Rpb24gfSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnMnO1xuXG5leHBvcnQgY29uc3QgdGVzdHMgPSBkZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gIGNvbnN0IGNoZWNrYm94ID0gKFxuICAgIDxDaGVja2JveFxuICAgICAgaXNDaGVja2VkPXtpc0NoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIGlzUGFydGlhbGx5Q2hlY2tlZD17aXNQYXJ0aWFsbHlDaGVja2VkfVxuICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgb25DaGFuZ2U9e2FjdGlvbihgb25DaGFuZ2VgKX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbiAgaXQoJ0NoZWNrZWQ/JywgKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IHNoYWxsb3coY2hlY2tib3gpO1xuICAgIGV4cGVjdChvdXRwdXQucHJvcCgnaXNDaGVja2VkJykpLnRvRXF1YWwodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KGBTaG91bGQgaGF2ZSBpc0NoZWNrZWQ6ICR7aXNDaGVja2VkfWAsICgpID0+IHtcbiAgICBleHBlY3Qod3JhcHBlci5wcm9wKCdpc0NoZWNrZWQnKSkudG9FcXVhbChpc0NoZWNrZWQpO1xuICB9KTtcblxuICBpdChgU2hvdWxkIGhhdmUgaXNEZWZhdWx0Q2hlY2tlZDogJHtpc0RlZmF1bHRDaGVja2VkfWAsICgpID0+IHtcbiAgICBleHBlY3Qod3JhcHBlci5wcm9wKCdpc0RlZmF1bHRDaGVja2VkJykpLnRvRXF1YWwoaXNEZWZhdWx0Q2hlY2tlZCk7XG4gIH0pO1xuXG4gIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2lzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgIGV4cGVjdCh3cmFwcGVyLnByb3AoJ2lzRGlzYWJsZWQnKSkudG9FcXVhbChpc0Rpc2FibGVkKTtcbiAgfSk7XG5cbiAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtpc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgIGV4cGVjdCh3cmFwcGVyLnByb3AoJ2lzUGFydGlhbGx5Q2hlY2tlZCcpKS50b0VxdWFsKGlzUGFydGlhbGx5Q2hlY2tlZCk7XG4gIH0pO1xuXG4gIGl0KGBTaG91bGQgaGF2ZSBwb3NpdGlvbjogJHtwb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIucHJvcCgncG9zaXRpb24nKSkudG9FcXVhbChwb3NpdGlvbik7XG4gIH0pO1xuXG4gIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtjaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIucHJvcCgnY2hpbGRyZW4nKSkudG9FcXVhbChjaGlsZHJlbik7XG4gIH0pO1xufSk7XG4iXX0=