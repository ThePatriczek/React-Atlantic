a2cda79bd8ef2d7cf24bcd05a1dc8d3e
"use strict";

var _interopRequireWildcard = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultValues = void 0;

var _addonKnobs = require("@storybook/addon-knobs");

var _react = require("@storybook/react");

var React = _interopRequireWildcard(require("react"));

var _storybookAddonSpecifications = require("storybook-addon-specifications");

var _Checkbox = require("./Checkbox.test");

const defaultValues = {
  isChecked: false,
  isDefaultChecked: false,
  isDisabled: false,
  isPartiallyChecked: false,
  position: 'left',
  children: 'Change me, please ðŸ¥º'
};
exports.defaultValues = defaultValues;
const stories = (0, _react.storiesOf)('Checkbox', module);
stories.addDecorator(_addonKnobs.withKnobs);
stories.add('Playground', () => {
  const isDefaultChecked = (0, _addonKnobs.boolean)(`isDefaultChecked:`, defaultValues.isDefaultChecked);
  const isChecked = (0, _addonKnobs.boolean)(`isChecked:`, defaultValues.isChecked);
  const isDisabled = (0, _addonKnobs.boolean)(`isDisabled:`, defaultValues.isDisabled);
  const isPartiallyChecked = (0, _addonKnobs.boolean)(`isPartiallyChecked:`, defaultValues.isPartiallyChecked);
  const position = (0, _addonKnobs.select)(`Position:`, ['left', `right`], defaultValues.position);
  const children = (0, _addonKnobs.text)(`children:`, defaultValues.children);
  const checkbox = (0, _Checkbox.Component)(isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children);
  (0, _storybookAddonSpecifications.specs)(() => (0, _Checkbox.tests)(checkbox, {
    isChecked,
    isDefaultChecked,
    isDisabled,
    isPartiallyChecked,
    position,
    children
  }));
  return checkbox;
}, {
  info: {
    inline: true
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnN0b3J5LmpzeCJdLCJuYW1lcyI6WyJkZWZhdWx0VmFsdWVzIiwiaXNDaGVja2VkIiwiaXNEZWZhdWx0Q2hlY2tlZCIsImlzRGlzYWJsZWQiLCJpc1BhcnRpYWxseUNoZWNrZWQiLCJwb3NpdGlvbiIsImNoaWxkcmVuIiwic3RvcmllcyIsIm1vZHVsZSIsImFkZERlY29yYXRvciIsIndpdGhLbm9icyIsImFkZCIsImNoZWNrYm94IiwiaW5mbyIsImlubGluZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRU8sTUFBTUEsYUFBYSxHQUFHO0FBQzNCQyxFQUFBQSxTQUFTLEVBQUUsS0FEZ0I7QUFFM0JDLEVBQUFBLGdCQUFnQixFQUFFLEtBRlM7QUFHM0JDLEVBQUFBLFVBQVUsRUFBRSxLQUhlO0FBSTNCQyxFQUFBQSxrQkFBa0IsRUFBRSxLQUpPO0FBSzNCQyxFQUFBQSxRQUFRLEVBQUUsTUFMaUI7QUFNM0JDLEVBQUFBLFFBQVEsRUFBRTtBQU5pQixDQUF0Qjs7QUFTUCxNQUFNQyxPQUFPLEdBQUcsc0JBQVUsVUFBVixFQUFzQkMsTUFBdEIsQ0FBaEI7QUFFQUQsT0FBTyxDQUFDRSxZQUFSLENBQXFCQyxxQkFBckI7QUFFQUgsT0FBTyxDQUFDSSxHQUFSLENBQ0UsWUFERixFQUVFLE1BQU07QUFDSixRQUFNVCxnQkFBZ0IsR0FBRyx5QkFDdEIsbUJBRHNCLEVBRXZCRixhQUFhLENBQUNFLGdCQUZTLENBQXpCO0FBS0EsUUFBTUQsU0FBUyxHQUFHLHlCQUFTLFlBQVQsRUFBc0JELGFBQWEsQ0FBQ0MsU0FBcEMsQ0FBbEI7QUFFQSxRQUFNRSxVQUFVLEdBQUcseUJBQVMsYUFBVCxFQUF1QkgsYUFBYSxDQUFDRyxVQUFyQyxDQUFuQjtBQUVBLFFBQU1DLGtCQUFrQixHQUFHLHlCQUN4QixxQkFEd0IsRUFFekJKLGFBQWEsQ0FBQ0ksa0JBRlcsQ0FBM0I7QUFLQSxRQUFNQyxRQUFRLEdBQUcsd0JBQ2QsV0FEYyxFQUVmLENBQUMsTUFBRCxFQUFVLE9BQVYsQ0FGZSxFQUdmTCxhQUFhLENBQUNLLFFBSEMsQ0FBakI7QUFNQSxRQUFNQyxRQUFRLEdBQUcsc0JBQU0sV0FBTixFQUFrQk4sYUFBYSxDQUFDTSxRQUFoQyxDQUFqQjtBQUVBLFFBQU1NLFFBQVEsR0FBRyx5QkFDZlgsU0FEZSxFQUVmQyxnQkFGZSxFQUdmQyxVQUhlLEVBSWZDLGtCQUplLEVBS2ZDLFFBTGUsRUFNZkMsUUFOZSxDQUFqQjtBQVNBLDJDQUFNLE1BQ0oscUJBQU1NLFFBQU4sRUFBZ0I7QUFDZFgsSUFBQUEsU0FEYztBQUVkQyxJQUFBQSxnQkFGYztBQUdkQyxJQUFBQSxVQUhjO0FBSWRDLElBQUFBLGtCQUpjO0FBS2RDLElBQUFBLFFBTGM7QUFNZEMsSUFBQUE7QUFOYyxHQUFoQixDQURGO0FBV0EsU0FBT00sUUFBUDtBQUNELENBOUNILEVBK0NFO0FBQ0VDLEVBQUFBLElBQUksRUFBRTtBQUFFQyxJQUFBQSxNQUFNLEVBQUU7QUFBVjtBQURSLENBL0NGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbiwgc2VsZWN0LCB0ZXh0LCB3aXRoS25vYnMgfSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWtub2JzJztcbmltcG9ydCB7IHN0b3JpZXNPZiB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3BlY3MgfSBmcm9tICdzdG9yeWJvb2stYWRkb24tc3BlY2lmaWNhdGlvbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCB0ZXN0cyB9IGZyb20gJy4vQ2hlY2tib3gudGVzdCc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0VmFsdWVzID0ge1xuICBpc0NoZWNrZWQ6IGZhbHNlLFxuICBpc0RlZmF1bHRDaGVja2VkOiBmYWxzZSxcbiAgaXNEaXNhYmxlZDogZmFsc2UsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZDogZmFsc2UsXG4gIHBvc2l0aW9uOiAnbGVmdCcsXG4gIGNoaWxkcmVuOiAnQ2hhbmdlIG1lLCBwbGVhc2Ug8J+luidcbn07XG5cbmNvbnN0IHN0b3JpZXMgPSBzdG9yaWVzT2YoJ0NoZWNrYm94JywgbW9kdWxlKTtcblxuc3Rvcmllcy5hZGREZWNvcmF0b3Iod2l0aEtub2JzKTtcblxuc3Rvcmllcy5hZGQoXG4gICdQbGF5Z3JvdW5kJyxcbiAgKCkgPT4ge1xuICAgIGNvbnN0IGlzRGVmYXVsdENoZWNrZWQgPSBib29sZWFuKFxuICAgICAgYGlzRGVmYXVsdENoZWNrZWQ6YCxcbiAgICAgIGRlZmF1bHRWYWx1ZXMuaXNEZWZhdWx0Q2hlY2tlZFxuICAgICk7XG5cbiAgICBjb25zdCBpc0NoZWNrZWQgPSBib29sZWFuKGBpc0NoZWNrZWQ6YCwgZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWQpO1xuXG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGJvb2xlYW4oYGlzRGlzYWJsZWQ6YCwgZGVmYXVsdFZhbHVlcy5pc0Rpc2FibGVkKTtcblxuICAgIGNvbnN0IGlzUGFydGlhbGx5Q2hlY2tlZCA9IGJvb2xlYW4oXG4gICAgICBgaXNQYXJ0aWFsbHlDaGVja2VkOmAsXG4gICAgICBkZWZhdWx0VmFsdWVzLmlzUGFydGlhbGx5Q2hlY2tlZFxuICAgICk7XG5cbiAgICBjb25zdCBwb3NpdGlvbiA9IHNlbGVjdChcbiAgICAgIGBQb3NpdGlvbjpgLFxuICAgICAgWydsZWZ0JywgYHJpZ2h0YF0sXG4gICAgICBkZWZhdWx0VmFsdWVzLnBvc2l0aW9uXG4gICAgKTtcblxuICAgIGNvbnN0IGNoaWxkcmVuID0gdGV4dChgY2hpbGRyZW46YCwgZGVmYXVsdFZhbHVlcy5jaGlsZHJlbik7XG5cbiAgICBjb25zdCBjaGVja2JveCA9IENvbXBvbmVudChcbiAgICAgIGlzQ2hlY2tlZCxcbiAgICAgIGlzRGVmYXVsdENoZWNrZWQsXG4gICAgICBpc0Rpc2FibGVkLFxuICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBjaGlsZHJlblxuICAgICk7XG5cbiAgICBzcGVjcygoKSA9PlxuICAgICAgdGVzdHMoY2hlY2tib3gsIHtcbiAgICAgICAgaXNDaGVja2VkLFxuICAgICAgICBpc0RlZmF1bHRDaGVja2VkLFxuICAgICAgICBpc0Rpc2FibGVkLFxuICAgICAgICBpc1BhcnRpYWxseUNoZWNrZWQsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIGNoZWNrYm94O1xuICB9LFxuICB7XG4gICAgaW5mbzogeyBpbmxpbmU6IHRydWUgfVxuICB9XG4pO1xuIl19