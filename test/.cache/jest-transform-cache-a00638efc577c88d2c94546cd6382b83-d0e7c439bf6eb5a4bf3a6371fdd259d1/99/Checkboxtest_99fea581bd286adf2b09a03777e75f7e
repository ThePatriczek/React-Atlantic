817a326a1611d68e6c231602195298c6
"use strict";

var _interopRequireDefault = require("/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tests = exports.Component = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Checkbox = require("./Checkbox");

var _defaultValues = require("../../constants/defaultValues");

var _jsxFileName = "/Users/patrikmeixner/WebstormProjects/ATLAS/React-Atlantic/src/components/Checkbox/Checkbox.test.jsx";

const Component = (isChecked, isDefaultChecked, isDisabled, isPartiallyChecked, position, children) => {
  return _react.default.createElement(_Checkbox.Checkbox, {
    isChecked: isChecked,
    isPartiallyChecked: isPartiallyChecked,
    isDefaultChecked: isDefaultChecked,
    isDisabled: isDisabled,
    position: position,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: void 0
  }, children);
};

exports.Component = Component;
let output;

const tests = (checkbox = Component(_defaultValues.defaultValues.isChecked, _defaultValues.defaultValues.isDefaultChecked, _defaultValues.defaultValues.isDisabled, _defaultValues.defaultValues.isPartiallyChecked, _defaultValues.defaultValues.position, _defaultValues.defaultValues.children)) => {
  output = (0, _enzyme.mount)(checkbox);
  return describe('Checkbox', () => {
    it(`Should have isDefaultChecked: ${checkbox.props.isDefaultChecked}`, () => {
      expect(output.props().isDefaultChecked).toEqual(checkbox.props.isDefaultChecked);
    });
    it(`Should have isChecked: ${checkbox.props.isChecked}`, () => {
      expect(output.prop('isChecked')).toEqual(checkbox.props.isChecked);
    });
    it(`Should have isDisabled: ${checkbox.props.isDisabled}`, () => {
      expect(output.prop('isDisabled')).toEqual(checkbox.props.isDisabled);
    });
    it(`Should have isPartiallyChecked: ${checkbox.props.isPartiallyChecked}`, () => {
      expect(output.prop('isPartiallyChecked')).toEqual(checkbox.props.isPartiallyChecked);
    });
    it(`Should have position: ${checkbox.props.position}`, () => {
      expect(output.prop('position')).toEqual(checkbox.props.position);
    });
    it(`Should have children: ${checkbox.props.children}`, () => {
      expect(output.prop('children')).toEqual(checkbox.props.children);
    });
  });
};

exports.tests = tests;
tests();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LnRlc3QuanN4Il0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImlzQ2hlY2tlZCIsImlzRGVmYXVsdENoZWNrZWQiLCJpc0Rpc2FibGVkIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwicG9zaXRpb24iLCJjaGlsZHJlbiIsIm91dHB1dCIsInRlc3RzIiwiY2hlY2tib3giLCJkZWZhdWx0VmFsdWVzIiwiZGVzY3JpYmUiLCJpdCIsInByb3BzIiwiZXhwZWN0IiwidG9FcXVhbCIsInByb3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsU0FBUyxHQUFHLENBQ3ZCQyxTQUR1QixFQUV2QkMsZ0JBRnVCLEVBR3ZCQyxVQUh1QixFQUl2QkMsa0JBSnVCLEVBS3ZCQyxRQUx1QixFQU12QkMsUUFOdUIsS0FPcEI7QUFDSCxTQUNFLDZCQUFDLGtCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVMLFNBRGI7QUFFRSxJQUFBLGtCQUFrQixFQUFFRyxrQkFGdEI7QUFHRSxJQUFBLGdCQUFnQixFQUFFRixnQkFIcEI7QUFJRSxJQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT0dDLFFBUEgsQ0FERjtBQVdELENBbkJNOzs7QUFxQlAsSUFBSUMsTUFBSjs7QUFFTyxNQUFNQyxLQUFLLEdBQUcsQ0FDbkJDLFFBQVEsR0FBR1QsU0FBUyxDQUNsQlUsNkJBQWNULFNBREksRUFFbEJTLDZCQUFjUixnQkFGSSxFQUdsQlEsNkJBQWNQLFVBSEksRUFJbEJPLDZCQUFjTixrQkFKSSxFQUtsQk0sNkJBQWNMLFFBTEksRUFNbEJLLDZCQUFjSixRQU5JLENBREQsS0FTaEI7QUFDSEMsRUFBQUEsTUFBTSxHQUFHLG1CQUFNRSxRQUFOLENBQVQ7QUFFQSxTQUFPRSxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDaENDLElBQUFBLEVBQUUsQ0FBRSxpQ0FBZ0NILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlWCxnQkFBaUIsRUFBbEUsRUFBcUUsTUFBTTtBQUMzRVksTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNNLEtBQVAsR0FBZVgsZ0JBQWhCLENBQU4sQ0FBd0NhLE9BQXhDLENBQ0VOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlWCxnQkFEakI7QUFHRCxLQUpDLENBQUY7QUFLQVUsSUFBQUEsRUFBRSxDQUFFLDBCQUF5QkgsUUFBUSxDQUFDSSxLQUFULENBQWVaLFNBQVUsRUFBcEQsRUFBdUQsTUFBTTtBQUM3RGEsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNTLElBQVAsQ0FBWSxXQUFaLENBQUQsQ0FBTixDQUFpQ0QsT0FBakMsQ0FBeUNOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlWixTQUF4RDtBQUNELEtBRkMsQ0FBRjtBQUdBVyxJQUFBQSxFQUFFLENBQUUsMkJBQTBCSCxRQUFRLENBQUNJLEtBQVQsQ0FBZVYsVUFBVyxFQUF0RCxFQUF5RCxNQUFNO0FBQy9EVyxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLFlBQVosQ0FBRCxDQUFOLENBQWtDRCxPQUFsQyxDQUEwQ04sUUFBUSxDQUFDSSxLQUFULENBQWVWLFVBQXpEO0FBQ0QsS0FGQyxDQUFGO0FBR0FTLElBQUFBLEVBQUUsQ0FBRSxtQ0FBa0NILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlVCxrQkFBbUIsRUFBdEUsRUFBeUUsTUFBTTtBQUMvRVUsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNTLElBQVAsQ0FBWSxvQkFBWixDQUFELENBQU4sQ0FBMENELE9BQTFDLENBQ0VOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlVCxrQkFEakI7QUFHRCxLQUpDLENBQUY7QUFLQVEsSUFBQUEsRUFBRSxDQUFFLHlCQUF3QkgsUUFBUSxDQUFDSSxLQUFULENBQWVSLFFBQVMsRUFBbEQsRUFBcUQsTUFBTTtBQUMzRFMsTUFBQUEsTUFBTSxDQUFDUCxNQUFNLENBQUNTLElBQVAsQ0FBWSxVQUFaLENBQUQsQ0FBTixDQUFnQ0QsT0FBaEMsQ0FBd0NOLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlUixRQUF2RDtBQUNELEtBRkMsQ0FBRjtBQUdBTyxJQUFBQSxFQUFFLENBQUUseUJBQXdCSCxRQUFRLENBQUNJLEtBQVQsQ0FBZVAsUUFBUyxFQUFsRCxFQUFxRCxNQUFNO0FBQzNEUSxNQUFBQSxNQUFNLENBQUNQLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLFVBQVosQ0FBRCxDQUFOLENBQWdDRCxPQUFoQyxDQUF3Q04sUUFBUSxDQUFDSSxLQUFULENBQWVQLFFBQXZEO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0F2QmMsQ0FBZjtBQXdCRCxDQXBDTTs7O0FBc0NQRSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnLi9DaGVja2JveCc7XG5pbXBvcnQgeyBkZWZhdWx0VmFsdWVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2RlZmF1bHRWYWx1ZXMnO1xuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKFxuICBpc0NoZWNrZWQsXG4gIGlzRGVmYXVsdENoZWNrZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgcG9zaXRpb24sXG4gIGNoaWxkcmVuXG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2hlY2tib3hcbiAgICAgIGlzQ2hlY2tlZD17aXNDaGVja2VkfVxuICAgICAgaXNQYXJ0aWFsbHlDaGVja2VkPXtpc1BhcnRpYWxseUNoZWNrZWR9XG4gICAgICBpc0RlZmF1bHRDaGVja2VkPXtpc0RlZmF1bHRDaGVja2VkfVxuICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGVja2JveD5cbiAgKTtcbn07XG5cbmxldCBvdXRwdXQ7XG5cbmV4cG9ydCBjb25zdCB0ZXN0cyA9IChcbiAgY2hlY2tib3ggPSBDb21wb25lbnQoXG4gICAgZGVmYXVsdFZhbHVlcy5pc0NoZWNrZWQsXG4gICAgZGVmYXVsdFZhbHVlcy5pc0RlZmF1bHRDaGVja2VkLFxuICAgIGRlZmF1bHRWYWx1ZXMuaXNEaXNhYmxlZCxcbiAgICBkZWZhdWx0VmFsdWVzLmlzUGFydGlhbGx5Q2hlY2tlZCxcbiAgICBkZWZhdWx0VmFsdWVzLnBvc2l0aW9uLFxuICAgIGRlZmF1bHRWYWx1ZXMuY2hpbGRyZW5cbiAgKVxuKSA9PiB7XG4gIG91dHB1dCA9IG1vdW50KGNoZWNrYm94KTtcblxuICByZXR1cm4gZGVzY3JpYmUoJ0NoZWNrYm94JywgKCkgPT4ge1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0RlZmF1bHRDaGVja2VkOiAke2NoZWNrYm94LnByb3BzLmlzRGVmYXVsdENoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wcygpLmlzRGVmYXVsdENoZWNrZWQpLnRvRXF1YWwoXG4gICAgICAgIGNoZWNrYm94LnByb3BzLmlzRGVmYXVsdENoZWNrZWRcbiAgICAgICk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzQ2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc0NoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0NoZWNrZWQnKSkudG9FcXVhbChjaGVja2JveC5wcm9wcy5pc0NoZWNrZWQpO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBpc0Rpc2FibGVkOiAke2NoZWNrYm94LnByb3BzLmlzRGlzYWJsZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc0Rpc2FibGVkJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuaXNEaXNhYmxlZCk7XG4gICAgfSk7XG4gICAgaXQoYFNob3VsZCBoYXZlIGlzUGFydGlhbGx5Q2hlY2tlZDogJHtjaGVja2JveC5wcm9wcy5pc1BhcnRpYWxseUNoZWNrZWR9YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KG91dHB1dC5wcm9wKCdpc1BhcnRpYWxseUNoZWNrZWQnKSkudG9FcXVhbChcbiAgICAgICAgY2hlY2tib3gucHJvcHMuaXNQYXJ0aWFsbHlDaGVja2VkXG4gICAgICApO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBwb3NpdGlvbjogJHtjaGVja2JveC5wcm9wcy5wb3NpdGlvbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ3Bvc2l0aW9uJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMucG9zaXRpb24pO1xuICAgIH0pO1xuICAgIGl0KGBTaG91bGQgaGF2ZSBjaGlsZHJlbjogJHtjaGVja2JveC5wcm9wcy5jaGlsZHJlbn1gLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob3V0cHV0LnByb3AoJ2NoaWxkcmVuJykpLnRvRXF1YWwoY2hlY2tib3gucHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnRlc3RzKCk7XG4iXX0=